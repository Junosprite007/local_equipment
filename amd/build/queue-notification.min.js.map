{"version":3,"file":"queue-notification.min.js","sources":["../src/queue-notification.js"],"sourcesContent":["/**\n * QR Code Print Queue Notification module.\n *\n * This module creates and manages a floating notification showing the current\n * number of items in the QR code print queue.\n *\n * @module     local_equipment/queue-notification\n * @copyright  2025 Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// No imports needed - using vanilla JS\n\n/**\n * Initialize the queue notification.\n */\nexport const init = () => {\n    let notificationElement = null;\n    let updateInterval = null;\n\n    /**\n     * Create the floating notification element.\n     * @returns {HTMLElement} The notification element\n     */\n    const createNotificationElement = () => {\n        const notification = document.createElement('div');\n        notification.id = 'qr-queue-notification';\n        notification.className = 'qr-queue-notification';\n        notification.style.cssText = `\n            position: fixed;\n            bottom: 20px;\n            left: 20px;\n            background: #007bff;\n            color: white;\n            padding: 12px 16px;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            z-index: 1050;\n            display: none;\n            transition: all 0.3s ease;\n            user-select: none;\n        `;\n\n        // Add hover effects\n        notification.addEventListener('mouseenter', () => {\n            notification.style.transform = 'translateY(-2px)';\n            notification.style.boxShadow = '0 6px 16px rgba(0, 0, 0, 0.2)';\n        });\n\n        notification.addEventListener('mouseleave', () => {\n            notification.style.transform = 'translateY(0)';\n            notification.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';\n        });\n\n        // Click handler to navigate to print queue\n        notification.addEventListener('click', () => {\n            const url = new URL(\n                M.cfg.wwwroot + '/local/equipment/inventory/generate_qr.php'\n            );\n            url.searchParams.set('action', 'print_queue');\n            window.open(url.toString(), '_blank');\n        });\n\n        document.body.appendChild(notification);\n        return notification;\n    };\n\n    /**\n     * Update the notification with current queue count.\n     * @param {number} count The current queue count\n     */\n    const updateNotification = (count) => {\n        if (!notificationElement) {\n            notificationElement = createNotificationElement();\n        }\n\n        if (count > 0) {\n            const icon = '🖨️';\n            const text =\n                count === 1 ? '1 QR code queued' : `${count} QR codes queued`;\n            notificationElement.innerHTML = `${icon} ${text}`;\n            notificationElement.style.display = 'block';\n\n            // Add a subtle pulse animation for new items\n            notificationElement.style.animation = 'none';\n            setTimeout(() => {\n                notificationElement.style.animation = 'pulse 1s ease-in-out';\n            }, 10);\n        } else {\n            notificationElement.style.display = 'none';\n        }\n    };\n\n    /**\n     * Fetch the current queue count from the server.\n     */\n    const fetchQueueCount = () => {\n        fetch(\n            M.cfg.wwwroot +\n                '/local/equipment/classes/external/get_queue_count.php',\n            {\n                method: 'GET',\n                credentials: 'same-origin',\n            }\n        )\n            .then((response) => response.json())\n            .then((data) => {\n                if (data.success) {\n                    updateNotification(data.count);\n                }\n                // Silently fail for queue count errors - non-critical feature\n            })\n            .catch(() => {\n                // Silently fail for network errors - non-critical feature\n            });\n    };\n\n    /**\n     * Start monitoring the queue count.\n     */\n    const startMonitoring = () => {\n        // Fetch immediately\n        fetchQueueCount();\n\n        // Set up periodic updates every 30 seconds\n        updateInterval = setInterval(fetchQueueCount, 30000);\n    };\n\n    /**\n     * Stop monitoring the queue count.\n     */\n    const stopMonitoring = () => {\n        if (updateInterval) {\n            clearInterval(updateInterval);\n            updateInterval = null;\n        }\n    };\n\n    /**\n     * Refresh the queue count immediately.\n     */\n    const refresh = () => {\n        fetchQueueCount();\n    };\n\n    // Add CSS animation for pulse effect\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.05); }\n            100% { transform: scale(1); }\n        }\n\n        .qr-queue-notification:hover {\n            background: #0056b3 !important;\n        }\n\n        @media (max-width: 768px) {\n            .qr-queue-notification {\n                bottom: 10px !important;\n                left: 10px !important;\n                padding: 10px 12px !important;\n                font-size: 13px !important;\n            }\n        }\n    `;\n    document.head.appendChild(style);\n\n    // Start monitoring when the page loads\n    startMonitoring();\n\n    // Clean up when page unloads\n    window.addEventListener('beforeunload', stopMonitoring);\n\n    // Expose methods for external use\n    window.QRQueueNotification = {\n        refresh: refresh,\n        updateCount: updateNotification,\n    };\n\n    return {\n        refresh: refresh,\n        updateCount: updateNotification,\n        stop: stopMonitoring,\n    };\n};\n"],"names":["notificationElement","updateInterval","updateNotification","count","notification","document","createElement","id","className","style","cssText","addEventListener","transform","boxShadow","url","URL","M","cfg","wwwroot","searchParams","set","window","open","toString","body","appendChild","createNotificationElement","icon","text","innerHTML","display","animation","setTimeout","fetchQueueCount","fetch","method","credentials","then","response","json","data","success","catch","stopMonitoring","clearInterval","refresh","textContent","head","setInterval","QRQueueNotification","updateCount","stop"],"mappings":"uKAgBoB,SACZA,oBAAsB,KACtBC,eAAiB,WAwDfC,mBAAsBC,WACnBH,sBACDA,oBApD0B,YACxBI,aAAeC,SAASC,cAAc,cAC5CF,aAAaG,GAAK,wBAClBH,aAAaI,UAAY,wBACzBJ,aAAaK,MAAMC,0fAmBnBN,aAAaO,iBAAiB,cAAc,KACxCP,aAAaK,MAAMG,UAAY,mBAC/BR,aAAaK,MAAMI,UAAY,mCAGnCT,aAAaO,iBAAiB,cAAc,KACxCP,aAAaK,MAAMG,UAAY,gBAC/BR,aAAaK,MAAMI,UAAY,oCAInCT,aAAaO,iBAAiB,SAAS,WAC7BG,IAAM,IAAIC,IACZC,EAAEC,IAAIC,QAAU,8CAEpBJ,IAAIK,aAAaC,IAAI,SAAU,eAC/BC,OAAOC,KAAKR,IAAIS,WAAY,aAGhClB,SAASmB,KAAKC,YAAYrB,cACnBA,cASmBsB,IAGtBvB,MAAQ,EAAG,OACLwB,KAAO,MACPC,KACQ,IAAVzB,MAAc,6BAAwBA,0BAC1CH,oBAAoB6B,oBAAeF,iBAAQC,MAC3C5B,oBAAoBS,MAAMqB,QAAU,QAGpC9B,oBAAoBS,MAAMsB,UAAY,OACtCC,YAAW,KACPhC,oBAAoBS,MAAMsB,UAAY,yBACvC,SAEH/B,oBAAoBS,MAAMqB,QAAU,QAOtCG,gBAAkB,KACpBC,MACIlB,EAAEC,IAAIC,QACF,wDACJ,CACIiB,OAAQ,MACRC,YAAa,gBAGhBC,MAAMC,UAAaA,SAASC,SAC5BF,MAAMG,OACCA,KAAKC,SACLvC,mBAAmBsC,KAAKrC,UAI/BuC,OAAM,UAmBTC,eAAiB,KACf1C,iBACA2C,cAAc3C,gBACdA,eAAiB,OAOnB4C,QAAU,KACZZ,mBAIExB,MAAQJ,SAASC,cAAc,gBACrCG,MAAMqC,qjBAoBNzC,SAAS0C,KAAKtB,YAAYhB,OA7CtBwB,kBAGAhC,eAAiB+C,YAAYf,gBAAiB,KAgDlDZ,OAAOV,iBAAiB,eAAgBgC,gBAGxCtB,OAAO4B,oBAAsB,CACzBJ,QAASA,QACTK,YAAahD,oBAGV,CACH2C,QAASA,QACTK,YAAahD,mBACbiD,KAAMR"}