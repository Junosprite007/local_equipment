define("local_equipment/partnership_courses",["exports","core/log","core/str"],(function(_exports,_log,_str){var obj;
/**
   * JavaScript for managing consents.
   *
   * @module     local_equipment/partnership_courses
   * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>
   * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_log=(obj=_log)&&obj.__esModule?obj:{default:obj};_exports.init=()=>{_log.default.debug("init function called in partnership_courses.js");const partnershipSelect=document.getElementById("id_partnership");if(!partnershipSelect)return void _log.default.error("partnershipSelect element not found");let partnershipData;_log.default.debug("'partnershipSelect' variable: "),_log.default.debug(partnershipSelect);try{partnershipData=JSON.parse(partnershipSelect.getAttribute("data-partnerships")||"{}"),_log.default.debug("'partnershipData' variable: "),_log.default.debug(partnershipData)}catch(e){return void _log.default.error("Error parsing partnership data: ",e)}const updateStudentCourses=async partnershipId=>{_log.default.debug("updateStudentCourses function called in partnership_courses.js"),_log.default.debug("partnershipId argument passed in: "),_log.default.debug(partnershipId);const courses=partnershipData[partnershipId]||[];_log.default.debug("'courses' variable: "),_log.default.debug(courses);const selects=document.querySelectorAll('select[name^="student_courses["]');_log.default.debug("'selects' variable: "),_log.default.debug(selects);for(const select of selects)await updateCourseOptions(select,courses)},updateCourseOptions=async(select,courses)=>{_log.default.debug("updateCourseOptions function called in partnership_courses.js"),_log.default.debug("'select' arg passed: "),_log.default.debug(select),_log.default.debug("'courses' arg passed: "),_log.default.debug(courses);const previouslySelected=JSON.parse(select.getAttribute("data-selected")||"[]");if(_log.default.debug("'previouslySelected' variable: "),_log.default.debug(previouslySelected),select.innerHTML="",0===courses.length){_log.default.debug("courses length is 0...");const noCourseString=await(0,_str.get_string)("nocoursesavailable","local_equipment"),option=document.createElement("option");option.value="",option.textContent=noCourseString,option.disabled=!0,select.appendChild(option),_log.default.debug("'noCourseString' variable: "),_log.default.debug(noCourseString),_log.default.debug("'option' variable: "),_log.default.debug(option)}else _log.default.debug("courses length is not 0..."),courses.forEach((course=>{const option=document.createElement("option");option.value=course.id,option.textContent=course.fullname,option.selected=previouslySelected.includes(course.id.toString()),select.appendChild(option),_log.default.debug("'option' variable: "),_log.default.debug(option)}));preserveSelectedCourses()},preserveSelectedCourses=()=>{_log.default.debug("preserveSelectedCourses function called in partnership_courses.js"),document.querySelectorAll('select[name^="student_courses["]').forEach((select=>{select.addEventListener("change",(()=>{const selectedOptions=Array.from(select.selectedOptions).map((option=>option.value));select.setAttribute("data-selected",JSON.stringify(selectedOptions)),_log.default.debug("'option' variable: "),_log.default.debug(selectedOptions)}))}))};partnershipSelect.addEventListener("change",(event=>{updateStudentCourses(event.target.value)})),updateStudentCourses(partnershipSelect.value),preserveSelectedCourses(),_log.default.debug("###### End init function for partnership_courses.js ######")}}));

//# sourceMappingURL=partnership_courses.min.js.map