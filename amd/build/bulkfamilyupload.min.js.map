{"version":3,"file":"bulkfamilyupload.min.js","sources":["../src/bulkfamilyupload.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for bulk family upload functionality.\n *\n * @module     local_equipment/bulkfamilyupload\n * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport { get_string as getString } from 'core/str';\nimport Log from 'core/log';\n// import { get } from 'grunt';\n\n/**\n * Initialize the module.\n */\nexport const init = () => {\n    const $textarea = $('#id_familiesinputdata');\n    const $preprocessDiv = $('#family-preprocess-display');\n    const $preprocessButton = $('.preprocessbutton');\n    const $submitButton = $('#id_submitbutton');\n    const $partnershipData = $('#id_partnershipdata');\n    const partnershipDataValue = JSON.parse(\n        $partnershipData.attr('data-partnerships')\n    );\n    const $courseData = $('#id_coursedata');\n    const courseDataValue = JSON.parse($courseData.attr('data-courses'));\n\n    // Set initial height of preprocess div to match textarea\n    $preprocessDiv.css('height', $textarea.outerHeight() + 'px');\n\n    // Disable submit button when textarea content changes\n    $textarea.on('input', () => {\n        $submitButton.prop('disabled', true);\n    });\n\n    // Function to clean up input text with error handling\n    const cleanInputText = (text) => {\n        if (!text || typeof text !== 'string') {\n            return '';\n        }\n        // Trim newlines and whitespace from the start and end of the entire input\n        return text.replace(/^\\s+|\\s+$/g, '');\n    };\n\n    $preprocessButton.on('click', async (e) => {\n        e.preventDefault(); // Prevent form submission\n\n        // Clean up input text\n\n        try {\n            $textarea.val(cleanInputText($textarea.val()));\n            const data = {\n                input: $textarea.val(),\n                partnerships: partnershipDataValue,\n                courses: courseDataValue,\n            };\n\n            const families = await validateFamilyData(data);\n\n            Log.debug('families: ');\n            Log.debug(families);\n            $preprocessDiv.html(families.html);\n\n\n\n            // Adjust height of preprocess div to match textarea\n            $preprocessDiv.css('height', $textarea.outerHeight() + 'px');\n\n            // Enable the submit button if there are no error messages\n            const hasErrors = families.html.includes('alert-danger');\n            $submitButton.prop('disabled', hasErrors);\n\n            // const messageKey = hasErrors\n            //     ? 'preprocessing_failure'\n            //     : 'preprocessing_success';\n            // const message = await getString(messageKey, 'local_equipment');\n            // Log.debug(message);\n        } catch (error) {\n            Log.error('Error in preprocessing: ');\n            Log.error(error);\n            $submitButton.prop('disabled', true);\n            const errorMessage = await getString(\n                'errorvalidatingfamilydata',\n                'local_equipment'\n            );\n            Log.debug(errorMessage);\n        }\n    });\n\n    // Adjust preprocess div height on window resize\n    $(window).on('resize', () => {\n        $preprocessDiv.css('height', $textarea.outerHeight() + 'px');\n    });\n};\n\n/**\n * Validate and process family data.\n *\n * @param {Object} data - The input data object.\n * @param {string} data.input - The raw input string containing family data.\n * @param {Object} data.partnerships - Partnership data keyed by ID.\n * @param {Object} data.courses - Course data keyed by ID.\n * @return {Promise<string>} The HTML feedback string.\n */\nexport const validateFamilyData = async ({ input, partnerships, courses }) => {\n    // let familiesData = [];\n    // let familiesHTML = [];\n    // Log.debug('input: ');\n    // Log.debug(input);\n    // Log.debug(partnerships);\n    // Log.debug(courses);\n    if (!input || typeof input !== 'string') {\n        throw new Error(\n            getString(\n                'invalidinput',\n                'local_equipment',\n                getString('expectedanonemptystring', 'local_equipment')\n            )\n        );\n    }\n    // This creates and objext with text types as keys and regexes to match as values.\n    const regexes = {\n        email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n        phone: /^(\\+?\\d{1,2}\\s?)?(\\(?\\d{3}\\)?[\\s.-]?)?\\d{3}[\\s.-]?\\d{4}$/,\n        name: /^[a-zA-Z\\s'-]+$/,\n        partnership: /^-?\\d+$/,\n        student: /^\\*(?!\\*)(.)/,\n        courses: /^\\*\\*.*$/,\n    };\n\n    /**\n     * Determine the type of text based on regex patterns.\n     * Below, we are defining a function that will take the above oject using and convert it into an array of key/values.\n     * So instead of having an object like this:\n     * textType1: /regex1/\n     * textType2: /regex2/\n     * textType3: /regex3/\n     * textType4: /regex4/\n     * We will have only the one matched key/value pair returned in the form of an array like this:\n     * ['textTypeX', /regexX/]\n     * ('X' representing whichever key/value pair was matched).\n     * It's the Object.entries(regexes) function that does all that. Then, the find() function comes in.\n     * The find() function, in this case, destuctures the array that was returned by Object.entries(regexes), skipping the first\n     * element (the key) and assigning the second element (the value) to the variable 'regex', which has the test() function.\n     *\n     * Returns the key of the first element in the array that matches the regex.\n     * So, determineTextType() should return one of the following:\n     * 'email'\n     * 'phone'\n     * 'name'\n     * 'partnership'\n     * 'student'\n     * 'courses'\n     * 'unknown'\n     *\n     * @param {string} line - The line of text to analyze.\n     * @return {string} The determined text type.\n     */\n    const determineTextType = (line) => {\n        for (const [type, regex] of Object.entries(regexes)) {\n            if (regex.test(line)) {\n                if (type === 'phone' && line.length < 10) {\n                    return 'unknown';\n                }\n                return type;\n            }\n        }\n        return 'unknown';\n    };\n\n    /**\n     * Parse and reformat a phone number into +12345678910 format.\n     * Take any phone number, and turn it into a U.S. phone number.\n     * E.g +1 (234) 567-8910 -> +12345678910\n     * E.g. 234-567-8910 -> +12345678910\n     * E.g. 234.567.8910 -> +12345678910\n     * E.g. 234 567 8910 -> +12345678910\n     * E.g. 2345678910 -> +12345678910\n     * E.g. 12345678910 -> +12345678910\n     * @param {string} phoneNumber - The phone number to reformat.\n     * @return {Object} An object containing the reformatted phone number and any errors.\n     */\n    const parsePhoneNumber = async (phoneNumber) => {\n        let parsedPhoneNumber = phoneNumber.replace(/[()\\-\\s+.]/g, '');\n        if (parsedPhoneNumber.length === 10 && parsedPhoneNumber[0] !== '1') {\n            parsedPhoneNumber = '+1' + parsedPhoneNumber;\n        } else if (\n            parsedPhoneNumber.length === 11 &&\n            parsedPhoneNumber[0] === '1'\n        ) {\n            parsedPhoneNumber = '+' + parsedPhoneNumber;\n        } else {\n            return (\n                '<span class=\"pl-2 pr-2 alert-danger\">' +\n                (await getString(\n                    'invalidphonenumber',\n                    'local_equipment',\n                    parsedPhoneNumber\n                )) +\n                '</span>'\n            );\n        }\n        return parsedPhoneNumber;\n    };\n\n    /**\n     * Process parent information from a line of text.\n     *\n     * @param {string} line - The line of text to process.\n     * @param {string} textType - The type of text determined.\n     * @param {Object} parent - The current parent object.\n     * @return {Object} Updated parent object.\n     */\n    const processParentInfo = async (line, textType, parent) => {\n        // let parentObj = {\n        //     name: {\n        //         html: '',\n        //         data: '',\n        //     },\n        //     phone: {\n        //         html: '',\n        //         data: '',\n        //     },\n        //     email: {\n        //         html: '',\n        //         data: '',\n        //     },\n        // };\n        parent = {\n            ...parent,\n            [textType]: {\n                html: line,\n                data: line,\n            },\n        };\n        // parentObj[textType] = {\n        //     html: line,\n        //     data: line,\n        // };\n        // Log.debug('parent stuff: ');\n        // Log.debug(textType);\n        // Log.debug(line);\n        switch (textType) {\n            // case 'name':\n            //     break;\n            case 'email':\n                parent[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + line + '</span>';\n                // parentObj = {\n                //     line: '<span class=\"pl-4 pr-4\">' + line + '</span>',\n                //     parent: { ...parent, [textType]: line },\n                //     partnership,\n                // };\n                break;\n            case 'phone': {\n                let formattedPhone = await parsePhoneNumber(line);\n                parent[textType].data = formattedPhone;\n                parent[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + formattedPhone + '</span>';\n                break;\n\n                // return {\n                //     line: '<span class=\"pl-4 pr-4\">' + line + '</span>',\n                //     parent: { ...parent, [textType]: line },\n                //     partnership,\n                // };\n            }\n            default:\n                // return { parent, partnership };\n                break;\n        }\n        return parent;\n    };\n\n    /**\n     * Process student information from a line of text.\n     *\n     * @param {string} line - The line of text to process.\n     * @param {string} textType - The type of text determined.\n     * @param {Object} student - The current student object.\n     * @return {Object} Updated student object.\n     */\n    const processStudentInfo = async (line, textType, student) => {\n        student = {\n            ...student,\n            [textType]: {\n                html: line,\n                data: line,\n            },\n        };\n\n        switch (textType) {\n            case 'student': {\n                // This refers to the student's name, which is the only line that is preceded by a single asterisk (*).\n                const name = line.replace('*', '').trim();\n\n                student = {\n                    ...student,\n                    [textType]: {\n                        data: name,\n                        html: name,\n                    },\n                };\n                // student[textType].data = name;\n                // student[textType].html = name;\n\n                // return { ...student, name, line: name };\n                break;\n            }\n            case 'email':\n                student[textType].data = line;\n                student[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + line + '</span>';\n                // return {\n                //     line: '<span class=\"pl-4 pr-4\">' + line + '</span>',\n                //     student: { ...student, [textType]: line },\n                // };\n                break;\n            case 'phone': {\n                let formattedPhone = await parsePhoneNumber(line);\n                student[textType].data = formattedPhone;\n                student[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + formattedPhone + '</span>';\n                break;\n            }\n            case 'courses': {\n                // student[textType].data =\n\n                const coursesData = line\n                    .replace('**', '')\n                    .trim()\n                    .split(',')\n                    .map((course) => course.trim());\n\n                // courseIds.map(async (id) => {\n                //     student[textType] = {\n                //         ...student[textType],\n                //             html: line,\n                //             data: line,\n                //     };\n                // });\n                // let coursesHTML = '';\n\n                const processedCourses = [];\n\n                const coursesHTML = await Promise.all(\n                    coursesData.map(async (id) => {\n                        const courseAlreadyProcessed =\n                            processedCourses.includes(id);\n                        let courseName = '';\n                        if (courses[id] && !courseAlreadyProcessed) {\n                            processedCourses.push(id);\n                            const enDash = '–'; // EN DASH character: '–' or \\u2013\n                            const regex = new RegExp(`${id} ${enDash} `, 'g');\n                            courseName = courses[id].replace(regex, '');\n                        } else if (courses[id] && courseAlreadyProcessed) {\n                            processedCourses.push(id);\n                            const errorMessage = await getString(\n                                'coursealreadyadded',\n                                'local_equipment',\n                                id\n                            );\n                            courseName = `<span class=\"pl-2 pr-2 alert-danger\">${errorMessage}</span>`;\n                        } else {\n                            const errorMessage = await getString(\n                                'courseidnotfound',\n                                'local_equipment',\n                                id\n                            );\n                            courseName = `<span class=\"pl-2 pr-2 alert-danger\">${errorMessage}</span>`;\n                        }\n\n                        // Log.debug('courseName: ', courseName);\n                        // Log.debug('id: ', id);\n\n                        return courseName;\n                    })\n                );\n\n                // Log.debug('studentCourses: ', studentCourses);\n\n                // return {\n                //     student: { ...student, courses: studentCourses },\n                //     line: `<span class=\"pl-4 pr-4\">${studentCourses.join(\n                //         ', '\n                //     )}</span>`,\n                // };\n                // Log.debug('coursesData: ');\n                // Log.debug(coursesData);\n                student[textType].data = coursesData;\n                student[textType].html =\n                    '<span class=\"pl-4 pr-4\">' +\n                    coursesHTML.join(', ') +\n                    '</span>';\n                break;\n            }\n            default:\n                break;\n        }\n        return student;\n    };\n\n    /**\n     * Process partnership information from a line of text.\n     *\n     * @param {string} id - The partnership ID.\n     * @return {Object} The partnership object.\n     */\n\n    const processPartnershipInfo = async (id) => {\n        let partnership = {};\n        if (partnerships[id]) {\n            partnership = {\n                data: id,\n                html: partnerships[id].name,\n            };\n        } else {\n            partnership = {\n                data: id,\n                html:\n                    '<span class=\"pl-2 pr-2 alert-danger\">' +\n                    (await getString(\n                        'partnershipnumbernotfound',\n                        'local_equipment',\n                        id\n                    )) +\n                    '</span>',\n            };\n        }\n\n        return {\n            partnership,\n            inStudentSection: true,\n        };\n    };\n\n    // We can use this for mapping below, instead of the for loop.\n    // Grab each family chunk and split each line into its own element within the 'lines' array.\n    // const promiseResults = await Promise.all(\n    //     family.split('\\n').map(async (line) => {\n    //         Log.debug('Processing family... mapping...');\n    //         line.trim();\n    //         const textType = determineTextType(line);\n\n    //         if (textType === 'student') {\n    //             inStudentSection = true;\n    //         }\n\n    //         // Determine whether we're in the student section, parent section, or an unknown section.\n    //         if (textType === 'unknown') {\n    //             const errorString = await getString(\n    //                 'unrecognizedformat',\n    //                 'local_equipment',\n    //                 line\n    //             );\n    //             familyHTML.push(\n    //                 `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n    //             );\n    //             // The 'familyData' object won't need anything added, 'cause we're checking for errors using 'alert-danger'.\n    //         } else if (partnershipAdded && textType === 'partnership') {\n    //             const errorString = await getString(\n    //                 'connotaddmorethanonepartnership',\n    //                 'local_equipment',\n    //                 line\n    //             );\n    //             familyHTML.push(\n    //                 `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n    //             );\n    //         } else if (textType === 'partnership') {\n    //             ({ partnership, inStudentSection } =\n    //                 await processPartnershipInfo(line));\n    //             familyHTML.push(partnership.html);\n    //             // There can only be one partnership\n    //             familyData.partnership = partnership.data;\n    //             partnershipAdded = true;\n    //         } else if (!inStudentSection) {\n    //             // We haven't entered the student section yet.\n    //             ({ parent } = await processParentInfo(\n    //                 line,\n    //                 textType,\n    //                 parent\n    //             ));\n\n    //             // The 'email' line marks the end of a given parent, so we push the parent object to the 'parents' array.\n    //             if (textType === 'email') {\n    //                 parents.push(parent);\n    //                 parent = {};\n    //             }\n    //             familyHTML.push(parent[textType].html);\n    //         } else {\n    //             // Now we are in the student section.\n    //             ({ student } = await processStudentInfo(\n    //                 line,\n    //                 textType,\n    //                 student\n    //             ));\n    //             // line = student[textType].html;\n    //             if (textType === 'courses') {\n    //                 students.push(student);\n    //                 student = {};\n    //             }\n    //             familyHTML.push(student[textType].html);\n    //         }\n\n    //         // We're using this map function to change and update the variables above, so we don't need to return anything.\n    //     })\n    // );\n\n    /**\n     * Process a single family's data, a.k.a. a family chunk.\n     * This const will be used as input for the map() function below.\n     *\n     * @param {string} family - The raw family data string.\n     * @return {string} HTML feedback for the family.\n     */\n    const processFamily = async (family) => {\n        try {\n            let parents = [];\n            let students = [];\n            let parent = {};\n            let student = {};\n            let partnership = {};\n            let inStudentSection = false;\n            let familyHTML = [];\n            let partnershipAdded = false;\n\n            const lines = family\n                .split('\\n')\n                .map((line) => line.trim())\n                .filter((line) => line); // Remove empty lines\n\n            for (const line of lines) {\n                try {\n                    const textType = determineTextType(line);\n                    // Log.debug(`Processing line: ${line} of type: ${textType}`);\n\n                    if (textType === 'student') {\n                        inStudentSection = true;\n                    }\n\n                    if (textType === 'unknown') {\n                        const errorString = await getString(\n                            'unrecognizedformat',\n                            'local_equipment',\n                            line\n                        );\n                        familyHTML.push(\n                            `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n                        );\n                        continue;\n                    }\n\n                    if (partnershipAdded && textType === 'partnership') {\n                        const errorString = await getString(\n                            'connotaddmorethanonepartnership',\n                            'local_equipment',\n                            line\n                        );\n                        familyHTML.push(\n                            `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n                        );\n                        continue;\n                    }\n\n                    switch (true) {\n                        case textType === 'partnership': {\n                            const result = await processPartnershipInfo(line);\n                            partnership = result.partnership;\n                            inStudentSection = result.inStudentSection;\n                            familyHTML.push(partnership.html);\n                            partnershipAdded = true;\n                            break;\n                        }\n                        case !inStudentSection: {\n                            parent = await processParentInfo(\n                                line,\n                                textType,\n                                parent\n                            );\n                            if (parent[textType]) {\n                                familyHTML.push(parent[textType].html);\n                            }\n                            if (textType === 'email') {\n                                parents.push({ ...parent }); // Create a deep copy\n                                parent = {};\n                            }\n                            break;\n                        }\n                        case inStudentSection: {\n                            const result = await processStudentInfo(\n                                line,\n                                textType,\n                                student\n                            );\n                            student = result;\n                            if (student[textType]) {\n                                familyHTML.push(student[textType].html);\n                            }\n                            if (textType === 'courses') {\n                                students.push({ ...student }); // Create a deep copy\n                                student = {};\n                            }\n                            break;\n                        }\n                    }\n                } catch (lineError) {\n                    Log.error('Error processing line:', line, lineError);\n                    const errorString = await getString(\n                        'errorprocessingline',\n                        'local_equipment',\n                        line\n                    );\n                    familyHTML.push(\n                        `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n                    );\n                }\n            }\n\n            // Handle any remaining student data\n            if (Object.keys(student).length > 0) {\n                students.push({ ...student });\n            }\n\n            const familyData = { parents, students, partnership };\n            const htmlOutput = `<div class=\"bg-light border p-3\">${familyHTML.join(\n                '<br />'\n            )}</div>`;\n\n            return {\n                data: familyData,\n                html: htmlOutput,\n            };\n        } catch (error) {\n            Log.error('Error processing family:', error);\n            const errorString = await getString(\n                'errorprocessingfamily',\n                'local_equipment'\n            );\n            return {\n                data: {},\n                html: `<div class=\"bg-light border p-3\"><span class=\"pl-2 alert-danger\">${errorString}</span></div>`,\n            };\n        }\n    };\n\n    try {\n        const familiesInput = input\n            .split('\\n\\n')\n            .filter((family) => family.trim());\n        const results = await Promise.all(familiesInput.map(processFamily));\n\n        const familiesData = results\n            .map((result) => result.data)\n            .filter(Boolean);\n        const familiesHTML = results.map((result) => result.html);\n\n        Log.debug('Processing complete:', {\n            familiesCount: familiesData.length,\n            dataStructure: familiesData,\n            htmlContent: familiesHTML,\n        });\n\n        return {\n            data: familiesData,\n            html: familiesHTML.join('<br>'),\n        };\n    } catch (error) {\n        Log.error('Error in validateFamilyData:', error);\n        const errorMessage = await getString(\n            'errorvalidatingfamilydata',\n            'local_equipment'\n        );\n        return {\n            data: [],\n            html: `<div class=\"alert alert-danger\">${errorMessage}</div>`,\n        };\n    }\n};\n"],"names":["$textarea","$preprocessDiv","$preprocessButton","$submitButton","$partnershipData","partnershipDataValue","JSON","parse","attr","$courseData","courseDataValue","css","outerHeight","on","prop","async","e","preventDefault","val","text","replace","data","input","partnerships","courses","families","validateFamilyData","debug","html","hasErrors","includes","error","errorMessage","window","Error","regexes","email","phone","name","partnership","student","determineTextType","line","type","regex","Object","entries","test","length","parsePhoneNumber","parsedPhoneNumber","phoneNumber","processParentInfo","textType","parent","formattedPhone","processStudentInfo","trim","coursesData","split","map","course","processedCourses","coursesHTML","Promise","all","courseAlreadyProcessed","id","courseName","push","enDash","RegExp","join","processPartnershipInfo","inStudentSection","processFamily","parents","students","familyHTML","partnershipAdded","lines","family","filter","errorString","result","lineError","keys","familiesInput","results","familiesData","Boolean","familiesHTML","familiesCount","dataStructure","htmlContent"],"mappings":"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"}