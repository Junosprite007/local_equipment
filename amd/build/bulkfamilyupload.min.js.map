{"version":3,"file":"bulkfamilyupload.min.js","sources":["../src/bulkfamilyupload.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for bulk family upload functionality.\n *\n * @module     local_equipment/bulkfamilyupload\n * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport { get_string as getString } from 'core/str';\nimport Log from 'core/log';\n\n/**\n * Initialize the module.\n */\nexport const init = () => {\n    // Core form elements.\n    const $textarea = $('#id_familiesinputdata');\n    const $preprocessDiv = $('#id_familypreprocessdisplay');\n    const $preprocessButton = $('.preprocessbutton');\n    const $shownexterrorContainer = $('.shownexterror-container');\n    const $noerrorsfoundContainer = $('.noerrorsfound-container');\n    const $shownexterrorButton = $shownexterrorContainer.find('button');\n    const $noerrorsfoundButton = $noerrorsfoundContainer.find('button');\n    const $submitButton = $('#id_submitbutton');\n    const $partnershipData = $('#id_partnershipdata');\n    const $courseData = $('#id_coursedata');\n\n    // Parse initial data.\n    const partnershipDataValue = JSON.parse(\n        $partnershipData.attr('data-partnerships')\n    );\n    const courseDataValue = JSON.parse($courseData.attr('data-courses'));\n\n    // Error navigation state.\n    let currentErrorIndex = -1;\n\n    /**\n     * Process the current data and update UI.\n     */\n    const processCurrentData = async () => {\n        try {\n            const data = {\n                input: cleanInputText($textarea.val()),\n                partnerships: partnershipDataValue,\n                courses: courseDataValue,\n            };\n\n            const families = await validateFamilyData(data);\n            Log.debug('families: ');\n            Log.debug(families);\n\n            $preprocessDiv.html(families.html);\n            $preprocessDiv.css('height', $textarea.outerHeight() + 'px');\n\n            const hasErrors = families.html.includes('alert-danger');\n\n            // Update form controls based on error state\n            $shownexterrorButton.prop('hidden', !hasErrors);\n            $shownexterrorButton.prop('disabled', !hasErrors);\n            $noerrorsfoundButton.prop('hidden', hasErrors);\n            $submitButton.prop('disabled', hasErrors);\n            $shownexterrorButton.prop({\n                disabled: !hasErrors,\n                hidden: !hasErrors,\n            });\n\n            // Automatically scroll to first error\n            if (hasErrors && currentErrorIndex === -1) {\n                currentErrorIndex = 0;\n                scrollToError(currentErrorIndex);\n            }\n        } catch (error) {\n            Log.error('Error in preprocessing:', error);\n            $submitButton.prop('disabled', true);\n\n            const errorMessage = await getString(\n                'errorvalidatingfamilydata',\n                'local_equipment'\n            );\n\n            $preprocessDiv.html(\n                `<div class=\"alert alert-danger\">${errorMessage}</div>`\n            );\n        }\n    };\n\n    // Set initial height and handlers\n    $preprocessDiv.css('height', $textarea.outerHeight() + 'px');\n\n    $textarea.on('input', () => {\n        $submitButton.prop('disabled', true);\n    });\n\n    // Function to clean up input text\n    const cleanInputText = (text) => {\n        if (!text || typeof text !== 'string') {\n            return '';\n        }\n        return text.replace(/^\\s+|\\s+$/g, '');\n    };\n\n    /**\n     * Get the corresponding line in textarea for an error\n     * @param {jQuery} $error The error element from preprocess div\n     * @returns {Object} Line information including line number and specific error positions\n     */\n    const getErrorLineInTextarea = ($error) => {\n        const errorText = $error.text().trim();\n        const lines = $textarea.val().split('\\n');\n\n        if (errorText.includes('Course ID')) {\n            const courseIdMatch = errorText.match(/Course ID #(.+) not found/);\n\n            if (courseIdMatch) {\n                const courseId = courseIdMatch[1];\n                const lineIndex = lines.findIndex((line) => {\n                    return line.startsWith('**') && line.includes(courseId);\n                });\n\n                if (lineIndex !== -1) {\n                    const line = lines[lineIndex];\n                    const start = line.indexOf(courseId);\n                    return {\n                        lineNumber: lineIndex,\n                        errorStart: start,\n                        errorEnd: start + courseId.length,\n                    };\n                }\n            }\n        }\n\n        // General error line matching\n        const cleanErrorText = errorText\n            .replace(/^(Error:|Invalid:|Not found:|Course ID)\\s*/i, '')\n            .trim();\n\n        const lineIndex = lines.findIndex((line) => {\n            const cleanLine = line.trim();\n            return (\n                cleanLine &&\n                (cleanErrorText.includes(cleanLine) ||\n                    cleanLine.includes(cleanErrorText))\n            );\n        });\n\n        return {\n            lineNumber: lineIndex,\n            errorStart: -1,\n            errorEnd: -1,\n        };\n    };\n\n    /**\n     * Scroll element into view\n     * @param {Element} element The element to scroll into view\n     */\n    const smoothScrollIntoView = (element) => {\n        const $container = $('#id_familypreprocessdisplay');\n        const containerTop = $container.offset().top;\n        const elementTop = $(element).offset().top;\n        const scroll =\n            elementTop -\n            containerTop -\n            $container.height() / 2 +\n            $(element).height();\n\n        $container.scrollTop($container.scrollTop() + scroll);\n    };\n\n    /**\n     * Highlight specific text in textarea\n     * @param {Object} errorInfo A.I generated doc: Line information including line number and specific error positions.\n     */\n    const highlightTextareaError = (errorInfo) => {\n        if (errorInfo.lineNumber === -1) {\n            return;\n        }\n\n        const lines = $textarea.val().split('\\n');\n        let position = lines\n            .slice(0, errorInfo.lineNumber)\n            .reduce((pos, line) => pos + line.length + 1, 0);\n\n        const textareaElement = $textarea.get(0);\n        textareaElement.focus();\n\n        if (errorInfo.errorStart >= 0 && errorInfo.errorEnd >= 0) {\n            textareaElement.setSelectionRange(\n                position + errorInfo.errorStart,\n                position + errorInfo.errorEnd\n            );\n        } else {\n            textareaElement.setSelectionRange(\n                position,\n                position + lines[errorInfo.lineNumber].length\n            );\n        }\n\n        // Scroll textarea to show highlighted text.\n        const lineHeight = parseInt($textarea.css('line-height'));\n        const scrollPosition = errorInfo.lineNumber * lineHeight;\n        $textarea.scrollTop(scrollPosition - $textarea.height() / 2);\n    };\n\n    /**\n     * Scroll to and highlight specific error.\n     * @param {number} index The index of the error to scroll to.\n     */\n    const scrollToError = (index) => {\n        const $errors = $preprocessDiv.find('.alert-danger');\n        if (index >= 0 && index < $errors.length) {\n            $('.error-highlight').removeClass('error-highlight');\n            const $currentError = $errors.eq(index);\n            $currentError.addClass('error-highlight');\n\n            smoothScrollIntoView($currentError.get(0));\n            highlightTextareaError(getErrorLineInTextarea($currentError));\n        }\n    };\n\n    // Add error highlight styling\n    $('<style>')\n        .text(\n            `\n            .error-highlight {\n                animation: highlight-pulse 1s;\n                box-shadow: 0 0 8px rgba(220, 53, 69, 0.5);\n            }\n            @keyframes highlight-pulse {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.02); }\n                100% { transform: scale(1); }\n            }\n        `\n        )\n        .appendTo('head');\n\n    // Event Handlers\n    $preprocessButton.on('click', async (e) => {\n        e.preventDefault();\n        $textarea.val(cleanInputText($textarea.val()));\n        currentErrorIndex = -1;\n        await processCurrentData();\n    });\n\n    $shownexterrorButton.on('click', async (e) => {\n        e.preventDefault();\n        await processCurrentData();\n        const $errors = $preprocessDiv.find('.alert-danger');\n        if ($errors.length > 0) {\n            currentErrorIndex = (currentErrorIndex + 1) % $errors.length;\n            scrollToError(currentErrorIndex);\n        }\n    });\n\n    $(window).on('resize', () => {\n        $preprocessDiv.css('height', $textarea.outerHeight() + 'px');\n    });\n};\n\n/**\n * Validate and process family data.\n *\n * @param {Object} data - The input data object.\n * @param {string} data.input - The raw input string containing family data.\n * @param {Object} data.partnerships - Partnership data keyed by ID.\n * @param {Object} data.courses - Course data keyed by ID.\n * @return {Promise<string>} The HTML feedback string.\n */\nexport const validateFamilyData = async ({ input, partnerships, courses }) => {\n    if (!input || typeof input !== 'string') {\n        throw new Error(\n            getString(\n                'invalidinput',\n                'local_equipment',\n                getString('expectedanonemptystring', 'local_equipment')\n            )\n        );\n    }\n    // This creates and objext with text types as keys and regexes to match as values.\n    const regexes = {\n        email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n        phone: /^(\\+?\\d{1,2}\\s?)?(\\(?\\d{3}\\)?[\\s.-]?)?\\d{3}[\\s.-]?\\d{4}$/,\n        name: /^[a-zA-Z\\s'-]+$/,\n        partnership: /^-?\\d+$/,\n        student: /^\\*(?!\\*)(.)/,\n        courses: /^\\*\\*.*$/,\n    };\n\n    /**\n     * Determine the type of text based on regex patterns.\n     * Below, we are defining a function that will take the above oject using and convert it into an array of key/values.\n     * So instead of having an object like this:\n     * textType1: /regex1/\n     * textType2: /regex2/\n     * textType3: /regex3/\n     * textType4: /regex4/\n     * We will have only the one matched key/value pair returned in the form of an array like this:\n     * ['textTypeX', /regexX/]\n     * ('X' representing whichever key/value pair was matched).\n     * It's the Object.entries(regexes) function that does all that. Then, the find() function comes in.\n     * The find() function, in this case, destuctures the array that was returned by Object.entries(regexes), skipping the first\n     * element (the key) and assigning the second element (the value) to the variable 'regex', which has the test() function.\n     *\n     * Returns the key of the first element in the array that matches the regex.\n     * So, determineTextType() should return one of the following:\n     * 'email'\n     * 'phone'\n     * 'name'\n     * 'partnership'\n     * 'student'\n     * 'courses'\n     * 'unknown'\n     *\n     * @param {string} line - The line of text to analyze.\n     * @return {string} The determined text type.\n     */\n    const determineTextType = (line) => {\n        for (const [type, regex] of Object.entries(regexes)) {\n            if (regex.test(line)) {\n                if (type === 'phone' && line.length < 10) {\n                    return 'unknown';\n                }\n                return type;\n            }\n        }\n        return 'unknown';\n    };\n\n    /**\n     * Parse and reformat a phone number into +12345678910 format.\n     * Take any phone number, and turn it into a U.S. phone number.\n     * E.g +1 (234) 567-8910 -> +12345678910\n     * E.g. 234-567-8910 -> +12345678910\n     * E.g. 234.567.8910 -> +12345678910\n     * E.g. 234 567 8910 -> +12345678910\n     * E.g. 2345678910 -> +12345678910\n     * E.g. 12345678910 -> +12345678910\n     * @param {string} phoneNumber - The phone number to reformat.\n     * @return {Object} An object containing the reformatted phone number and any errors.\n     */\n    const parsePhoneNumber = async (phoneNumber) => {\n        let parsedPhoneNumber = phoneNumber.replace(/[()\\-\\s+.]/g, '');\n        if (parsedPhoneNumber.length === 10 && parsedPhoneNumber[0] !== '1') {\n            parsedPhoneNumber = '+1' + parsedPhoneNumber;\n        } else if (\n            parsedPhoneNumber.length === 11 &&\n            parsedPhoneNumber[0] === '1'\n        ) {\n            parsedPhoneNumber = '+' + parsedPhoneNumber;\n        } else {\n            return (\n                '<span class=\"pl-2 pr-2 alert-danger\">' +\n                (await getString(\n                    'invalidphonenumber',\n                    'local_equipment',\n                    parsedPhoneNumber\n                )) +\n                '</span>'\n            );\n        }\n        return parsedPhoneNumber;\n    };\n\n    /**\n     * Process parent information from a line of text.\n     *\n     * @param {string} line - The line of text to process.\n     * @param {string} textType - The type of text determined.\n     * @param {Object} parent - The current parent object.\n     * @return {Object} Updated parent object.\n     */\n    const processParentInfo = async (line, textType, parent) => {\n        parent = {\n            ...parent,\n            [textType]: {\n                html: line,\n                data: line,\n            },\n        };\n        switch (textType) {\n            // We'll separate full names into first, last, and middle (if it exists) in PHP during form submission.\n            case 'email':\n                parent[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + line + '</span>';\n\n                break;\n            case 'phone': {\n                let formattedPhone = await parsePhoneNumber(line);\n                parent[textType].data = formattedPhone;\n                parent[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + formattedPhone + '</span>';\n                break;\n            }\n            default:\n                break;\n        }\n        return parent;\n    };\n\n    /**\n     * Process partnership information from a line of text.\n     *\n     * @param {string} id - The partnership ID.\n     * @return {Object} The partnership object.\n     */\n\n    const processPartnershipInfo = async (id) => {\n        let partnership = {};\n        if (partnerships[id]) {\n            partnership = {\n                data: id,\n                html: partnerships[id].name,\n            };\n        } else {\n            partnership = {\n                data: id,\n                html:\n                    '<span class=\"pl-2 pr-2 alert-danger\">' +\n                    (await getString(\n                        'partnershipnumbernotfound',\n                        'local_equipment',\n                        id\n                    )) +\n                    '</span>',\n            };\n        }\n\n        return {\n            partnership,\n            inStudentSection: true,\n        };\n    };\n\n    /**\n     * Process student information from a line of text.\n     *\n     * @param {string} line - The line of text to process.\n     * @param {string} textType - The type of text determined.\n     * @param {Object} student - The current student object.\n     * @param {string} partnership - The partnership object.\n     * @return {Object} Updated student object.\n     */\n    const processStudentInfo = async (line, textType, student, partnership) => {\n        student = {\n            ...student,\n            [textType]: {\n                html: line,\n                data: line,\n            },\n        };\n\n        switch (textType) {\n            case 'student': {\n                // We'll separate full names into first, last, and middle (if it exists) in PHP during form submission.\n                // This refers to the student's name, which is the only line that is preceded by a single asterisk (*).\n                const name = line.replace('*', '').trim();\n\n                student = {\n                    ...student,\n                    [textType]: {\n                        data: name,\n                        html: name,\n                    },\n                };\n                break;\n            }\n            case 'email':\n                student[textType].data = line;\n                student[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + line + '</span>';\n                break;\n            case 'phone': {\n                let formattedPhone = await parsePhoneNumber(line);\n                student[textType].data = formattedPhone;\n                student[textType].html =\n                    '<span class=\"pl-4 pr-4\">' + formattedPhone + '</span>';\n                break;\n            }\n            case 'courses': {\n                const coursesData = line\n                    .replace('**', '')\n                    .trim()\n                    .split(',')\n                    .map((course) => course.trim());\n\n                const processedCourses = [];\n\n                const coursesHTML = await Promise.all(\n                    coursesData.map(async (id) => {\n                        const msg = {\n                            c_id: id,\n                            p_id: partnership.data,\n                        };\n                        const courseExistsInPartnership =\n                            partnerships[partnership?.data].coursedata[id] !==\n                            undefined;\n                        Log.debug(courseExistsInPartnership);\n                        const courseAlreadyProcessed =\n                            processedCourses.includes(id);\n                        let courseName = '';\n                        if (\n                            courses[id] &&\n                            !courseAlreadyProcessed &&\n                            courseExistsInPartnership\n                        ) {\n                            processedCourses.push(id);\n                            // EN DASH character: '–' or \\u2013\n                            const enDash = '–';\n                            const regex = new RegExp(`${id} ${enDash} `, 'g');\n                            courseName = courses[id].replace(regex, '');\n                        } else if (\n                            courses[id] &&\n                            courseAlreadyProcessed &&\n                            courseExistsInPartnership\n                        ) {\n                            processedCourses.push(id);\n                            const errorMessage = await getString(\n                                'coursealreadyadded',\n                                'local_equipment',\n                                msg.c_id\n                            );\n                            courseName = `<span class=\"pl-2 pr-2 alert-danger\">${errorMessage}</span>`;\n                        } else if (courses[id] && !courseExistsInPartnership) {\n                            const errorMessage = await getString(\n                                'courseidnotfoundinpartnership',\n                                'local_equipment',\n                                msg\n                            );\n                            courseName = `<span class=\"pl-2 pr-2 alert-danger\">${errorMessage}</span>`;\n                        } else {\n                            const errorMessage = await getString(\n                                'courseidnotfound',\n                                'local_equipment',\n                                msg.c_id\n                            );\n                            courseName = `<span class=\"pl-2 pr-2 alert-danger\">${errorMessage}</span>`;\n                        }\n\n                        return courseName;\n                    })\n                );\n\n                student[textType].data = coursesData;\n                student[textType].html =\n                    '<span class=\"pl-4 pr-4\">' +\n                    coursesHTML.join(', ') +\n                    '</span>';\n                break;\n            }\n            default:\n                break;\n        }\n        return student;\n    };\n\n    /**\n     * Process a single family's data, a.k.a. a family chunk.\n     * This const will be used as input for the map() function below.\n     *\n     * @param {string} family - The raw family data string.\n     * @return {string} HTML feedback for the family.\n     */\n    const processFamily = async (family) => {\n        try {\n            let parents = [];\n            let students = [];\n            let parent = {};\n            let student = {};\n            let partnership = {};\n            let inStudentSection = false;\n            let familyHTML = [];\n            let partnershipAdded = false;\n\n            const lines = family\n                .split('\\n')\n                .map((line) => line.trim())\n                .filter((line) => line); // This removes empty lines.\n\n            for (const line of lines) {\n                try {\n                    const textType = determineTextType(line);\n\n                    if (textType === 'student') {\n                        inStudentSection = true;\n                    }\n\n                    if (textType === 'unknown') {\n                        const errorString = await getString(\n                            'unrecognizedformat',\n                            'local_equipment',\n                            line\n                        );\n                        familyHTML.push(\n                            `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n                        );\n                        continue;\n                    }\n\n                    if (partnershipAdded && textType === 'partnership') {\n                        const errorString = await getString(\n                            'connotaddmorethanonepartnership',\n                            'local_equipment',\n                            line\n                        );\n                        familyHTML.push(\n                            `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n                        );\n                        continue;\n                    }\n\n                    switch (true) {\n                        case textType === 'partnership': {\n                            const result = await processPartnershipInfo(line);\n                            partnership = result.partnership;\n                            inStudentSection = result.inStudentSection;\n                            familyHTML.push(partnership.html);\n                            partnershipAdded = true;\n                            break;\n                        }\n                        case !inStudentSection: {\n                            parent = await processParentInfo(\n                                line,\n                                textType,\n                                parent\n                            );\n                            if (parent[textType]) {\n                                familyHTML.push(parent[textType].html);\n                            }\n                            if (textType === 'email') {\n                                parents.push({ ...parent });\n                                parent = {};\n                            }\n                            break;\n                        }\n                        case inStudentSection: {\n                            const result = await processStudentInfo(\n                                line,\n                                textType,\n                                student,\n                                partnership\n                            );\n                            student = result;\n                            if (student[textType]) {\n                                familyHTML.push(student[textType].html);\n                            }\n                            if (textType === 'courses') {\n                                students.push({ ...student });\n                                student = {};\n                            }\n                            break;\n                        }\n                    }\n                } catch (lineError) {\n                    Log.error('Error processing line:', line, lineError);\n                    const errorString = await getString(\n                        'errorprocessingline',\n                        'local_equipment',\n                        line\n                    );\n                    familyHTML.push(\n                        `<span class=\"pl-2 alert-danger\">${errorString}</span>`\n                    );\n                }\n            }\n\n            // Handle any remaining student data\n            if (Object.keys(student).length > 0) {\n                students.push({ ...student });\n            }\n\n            const familyData = { parents, students, partnership };\n            const htmlOutput = `<div class=\"bg-light border p-3\">${familyHTML.join(\n                '<br />'\n            )}</div>`;\n\n            return {\n                data: familyData,\n                html: htmlOutput,\n            };\n        } catch (error) {\n            Log.error('Error processing family:', error);\n            const errorString = await getString(\n                'errorprocessingfamily',\n                'local_equipment'\n            );\n            return {\n                data: {},\n                html: `<div class=\"bg-light border p-3\"><span class=\"pl-2 alert-danger\">${errorString}</span></div>`,\n            };\n        }\n    };\n\n    try {\n        const familiesInput = input\n            .split('\\n\\n')\n            .filter((family) => family.trim());\n        const results = await Promise.all(familiesInput.map(processFamily));\n\n        const familiesData = results\n            .map((result) => result.data)\n            .filter(Boolean);\n        const familiesHTML = results.map((result) => result.html);\n\n        Log.debug('Processing complete:', {\n            familiesCount: familiesData.length,\n            dataStructure: familiesData,\n            htmlContent: familiesHTML,\n        });\n\n        return {\n            data: familiesData,\n            html: familiesHTML.join('<br>'),\n        };\n    } catch (error) {\n        Log.error('Error in validateFamilyData:', error);\n        const errorMessage = await getString(\n            'errorvalidatingfamilydata',\n            'local_equipment'\n        );\n        return {\n            data: [],\n            html: `<div class=\"alert alert-danger\">${errorMessage}</div>`,\n        };\n    }\n};\n"],"names":["$textarea","$preprocessDiv","$preprocessButton","$shownexterrorContainer","$noerrorsfoundContainer","$shownexterrorButton","find","$noerrorsfoundButton","$submitButton","$partnershipData","$courseData","partnershipDataValue","JSON","parse","attr","courseDataValue","currentErrorIndex","processCurrentData","async","data","input","cleanInputText","val","partnerships","courses","families","validateFamilyData","debug","html","css","outerHeight","hasErrors","includes","prop","disabled","hidden","scrollToError","error","errorMessage","on","text","replace","index","$errors","length","removeClass","$currentError","eq","addClass","element","$container","containerTop","offset","top","scroll","height","scrollTop","smoothScrollIntoView","get","errorInfo","lineNumber","lines","split","position","slice","reduce","pos","line","textareaElement","focus","errorStart","errorEnd","setSelectionRange","lineHeight","parseInt","scrollPosition","highlightTextareaError","$error","errorText","trim","courseIdMatch","match","courseId","lineIndex","findIndex","startsWith","start","indexOf","cleanErrorText","cleanLine","getErrorLineInTextarea","appendTo","e","preventDefault","window","Error","regexes","email","phone","name","partnership","student","determineTextType","type","regex","Object","entries","test","parsePhoneNumber","parsedPhoneNumber","phoneNumber","processParentInfo","textType","parent","formattedPhone","processPartnershipInfo","id","inStudentSection","processStudentInfo","coursesData","map","course","processedCourses","coursesHTML","Promise","all","msg","c_id","p_id","courseExistsInPartnership","undefined","coursedata","courseAlreadyProcessed","courseName","push","enDash","RegExp","join","processFamily","parents","students","familyHTML","partnershipAdded","family","filter","errorString","result","lineError","keys","familiesInput","results","familiesData","Boolean","familiesHTML","familiesCount","dataStructure","htmlContent"],"mappings":"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"}