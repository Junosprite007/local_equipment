{"version":3,"file":"mass_text_page.min.js","sources":["../src/mass_text_page.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Mass text messaging page JavaScript functionality.\n *\n * @module     local_equipment/mass_text_page\n * @copyright  2025 onwards Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Log from 'core/log';\n\n/**\n * Initialize the mass text page functionality.\n *\n * @return {void}\n */\nconst init = () => {\n    let retryCount = 0;\n    const maxRetries = 50; // 5 seconds max (50 * 100ms)\n\n    // Wait for DOM to be ready and try multiple times if elements aren't found\n    const initializePage = () => {\n        // Use more robust selectors that work with dynamic forms\n        const messageTextarea =\n            document.querySelector('textarea[name=\"message\"]') ||\n            document.querySelector('#id_message') ||\n            document.querySelector('textarea[id*=\"message\"]');\n\n        const charCountDisplay =\n            document.querySelector('#char-counter') ||\n            document.querySelector('[id*=\"char-counter\"]') ||\n            document.querySelector('.char-counter');\n\n        const recipientCountDisplay =\n            document.querySelector('#recipient-count') ||\n            document.querySelector('[id*=\"recipient-count\"]') ||\n            document.querySelector('.recipient-count');\n\n        const form = document.querySelector('form');\n        const submitButton = document.querySelector('input[type=\"submit\"]');\n\n        // Safety check - ensure required elements exist\n        if (!messageTextarea) {\n            retryCount++;\n            if (retryCount < maxRetries) {\n                Log.debug(\n                    `local_equipment/mass_text_page: Message textarea not found, retrying... (${retryCount}/${maxRetries})`\n                );\n                // Try again after a short delay\n                setTimeout(initializePage, 100);\n                return;\n            } else {\n                Log.error(\n                    'local_equipment/mass_text_page: Message textarea not found after maximum retries. ' +\n                        'Page initialization failed.'\n                );\n                return;\n            }\n        }\n\n        Log.debug(\n            'local_equipment/mass_text_page: Elements found, initializing...'\n        );\n\n        // Get max length from data attribute or use default\n        const maxLength = parseInt(messageTextarea.dataset.maxLength) || 250;\n\n        /**\n         * Update character count display with proper styling.\n         *\n         * @return {void}\n         */\n        const updateCharCount = () => {\n            if (!charCountDisplay) {\n                return;\n            }\n\n            const currentLength = messageTextarea.value.length;\n            const remaining = maxLength - currentLength;\n\n            // Update the character count text\n            if (remaining >= 0) {\n                charCountDisplay.textContent = `${remaining} characters remaining`;\n            } else {\n                charCountDisplay.textContent = `${Math.abs(\n                    remaining\n                )} characters over limit`;\n            }\n\n            // Update styling based on remaining characters\n            charCountDisplay.classList.remove(\n                'text-danger',\n                'text-warning',\n                'text-muted'\n            );\n\n            if (remaining < 0) {\n                charCountDisplay.classList.add('text-danger');\n            } else if (remaining < 20) {\n                charCountDisplay.classList.add('text-warning');\n            } else {\n                charCountDisplay.classList.add('text-muted');\n            }\n        };\n\n        /**\n         * Load recipient count via AJAX using Moodle web services.\n         *\n         * @return {void}\n         */\n        const loadRecipientCount = () => {\n            if (!recipientCountDisplay) {\n                return;\n            }\n\n            Ajax.call([\n                {\n                    methodname: 'local_equipment_get_recipient_count',\n                    args: {},\n                },\n            ])[0]\n                .then((response) => {\n                    Log.debug('Web service response:', response);\n\n                    if (response.success) {\n                        recipientCountDisplay.textContent = `${response.count} parents`;\n                        recipientCountDisplay.className = 'badge bg-secondary';\n\n                        // Update styling based on count\n                        if (response.count === 0) {\n                            recipientCountDisplay.classList.remove(\n                                'bg-secondary'\n                            );\n                            recipientCountDisplay.classList.add('bg-warning');\n                        } else {\n                            recipientCountDisplay.classList.remove(\n                                'bg-warning'\n                            );\n                            recipientCountDisplay.classList.add('bg-success');\n                        }\n                    } else {\n                        recipientCountDisplay.textContent =\n                            'Error loading count';\n                        recipientCountDisplay.className = 'badge bg-danger';\n                        Log.error(\n                            'local_equipment/mass_text_page: Recipient count error:',\n                            response.error\n                        );\n                    }\n                })\n                .catch((error) => {\n                    Log.debug('Web service error details:', error);\n                    recipientCountDisplay.textContent = 'Error loading count';\n                    recipientCountDisplay.className = 'badge bg-danger';\n                    Log.error(\n                        'local_equipment/mass_text_page: Web service error:',\n                        error.message || 'Unknown error'\n                    );\n                });\n        };\n\n        /**\n         * Handle form submission confirmation.\n         *\n         * @param {Event} e - The form submission event\n         * @return {boolean} - Whether to allow form submission\n         */\n        const handleFormSubmit = (e) => {\n            const message = messageTextarea.value.trim();\n\n            if (message.length === 0) {\n                e.preventDefault();\n                Notification.addNotification({\n                    message: 'Please enter a message',\n                    type: 'error',\n                });\n                return false;\n            }\n\n            if (message.length > maxLength) {\n                e.preventDefault();\n                Notification.addNotification({\n                    message: `Message is too long. Maximum ${maxLength} characters allowed`,\n                    type: 'error',\n                });\n                return false;\n            }\n\n            // Show confirmation dialog\n            if (\n                !confirm(\n                    'Are you sure you want to send this message to all parents with verified phone numbers?'\n                )\n            ) {\n                e.preventDefault();\n                return false;\n            }\n\n            // Show loading state\n            if (submitButton) {\n                submitButton.disabled = true;\n                submitButton.value = 'Sending Messages...';\n            }\n\n            return true;\n        };\n\n        /**\n         * Handle successful form submission results.\n         *\n         * @return {void}\n         */\n        const handleFormSuccess = () => {\n            // Clear the form\n            if (messageTextarea) {\n                messageTextarea.value = '';\n                updateCharCount();\n            }\n\n            // Re-enable submit button\n            if (submitButton) {\n                submitButton.disabled = false;\n                submitButton.value = 'Send Messages';\n            }\n\n            // Reload recipient count\n            loadRecipientCount();\n\n            // Scroll to top to show results\n            window.scrollTo({ top: 0, behavior: 'smooth' });\n        };\n\n        // Initialize functionality\n        if (messageTextarea) {\n            messageTextarea.addEventListener('input', updateCharCount);\n            messageTextarea.addEventListener('keyup', updateCharCount);\n            messageTextarea.addEventListener('paste', () => {\n                // Use setTimeout to ensure paste content is processed\n                setTimeout(updateCharCount, 10);\n            });\n\n            // Initial character count\n            updateCharCount();\n        }\n\n        // Load recipient count\n        loadRecipientCount();\n\n        // Handle form submission if form exists\n        if (form) {\n            form.addEventListener('submit', handleFormSubmit);\n        }\n\n        // Handle successful submissions (check for success messages)\n        const successAlert = document.querySelector('.alert-success');\n        const warningAlert = document.querySelector('.alert-warning');\n        if (successAlert || warningAlert) {\n            handleFormSuccess();\n        }\n\n        // Auto-dismiss alerts after 10 seconds\n        const alerts = document.querySelectorAll('.alert-dismissible');\n        alerts.forEach((alert) => {\n            setTimeout(() => {\n                const closeButton = alert.querySelector('.btn-close');\n                if (closeButton) {\n                    closeButton.click();\n                }\n            }, 10000);\n        });\n    };\n\n    // Start the initialization process\n    initializePage();\n};\n\nexport default {\n    init: init,\n};\n"],"names":["init","retryCount","initializePage","messageTextarea","document","querySelector","charCountDisplay","recipientCountDisplay","form","submitButton","debug","setTimeout","error","maxLength","parseInt","dataset","updateCharCount","currentLength","value","length","remaining","textContent","Math","abs","classList","remove","add","loadRecipientCount","call","methodname","args","then","response","success","count","className","catch","message","handleFormSubmit","e","trim","preventDefault","addNotification","type","confirm","disabled","addEventListener","successAlert","warningAlert","window","scrollTo","top","behavior","querySelectorAll","forEach","alert","closeButton","click"],"mappings":";;;;;;;4NAoSe,CACXA,KArQS,SACLC,WAAa,QAIXC,eAAiB,WAEbC,gBACFC,SAASC,cAAc,6BACvBD,SAASC,cAAc,gBACvBD,SAASC,cAAc,2BAErBC,iBACFF,SAASC,cAAc,kBACvBD,SAASC,cAAc,yBACvBD,SAASC,cAAc,iBAErBE,sBACFH,SAASC,cAAc,qBACvBD,SAASC,cAAc,4BACvBD,SAASC,cAAc,oBAErBG,KAAOJ,SAASC,cAAc,QAC9BI,aAAeL,SAASC,cAAc,4BAGvCF,uBACDF,aACIA,WA1BO,iBA2BHS,yFAC4ET,uBA5BzE,cA+BPU,WAAWT,eAAgB,wBAGvBU,MACA,8HAORF,MACA,yEAIEG,UAAYC,SAASX,gBAAgBY,QAAQF,YAAc,IAO3DG,gBAAkB,SACfV,8BAICW,cAAgBd,gBAAgBe,MAAMC,OACtCC,UAAYP,UAAYI,cAI1BX,iBAAiBe,YADjBD,WAAa,YACqBA,6CAEAE,KAAKC,IACnCH,qCAKRd,iBAAiBkB,UAAUC,OACvB,cACA,eACA,cAGAL,UAAY,EACZd,iBAAiBkB,UAAUE,IAAI,eACxBN,UAAY,GACnBd,iBAAiBkB,UAAUE,IAAI,gBAE/BpB,iBAAiBkB,UAAUE,IAAI,eASjCC,mBAAqB,KAClBpB,qCAIAqB,KAAK,CACN,CACIC,WAAY,sCACZC,KAAM,MAEX,GACEC,MAAMC,wBACCtB,MAAM,wBAAyBsB,UAE/BA,SAASC,SACT1B,sBAAsBc,sBAAiBW,SAASE,kBAChD3B,sBAAsB4B,UAAY,qBAGX,IAAnBH,SAASE,OACT3B,sBAAsBiB,UAAUC,OAC5B,gBAEJlB,sBAAsBiB,UAAUE,IAAI,gBAEpCnB,sBAAsBiB,UAAUC,OAC5B,cAEJlB,sBAAsBiB,UAAUE,IAAI,iBAGxCnB,sBAAsBc,YAClB,sBACJd,sBAAsB4B,UAAY,+BAC9BvB,MACA,yDACAoB,SAASpB,WAIpBwB,OAAOxB,qBACAF,MAAM,6BAA8BE,OACxCL,sBAAsBc,YAAc,sBACpCd,sBAAsB4B,UAAY,+BAC9BvB,MACA,qDACAA,MAAMyB,SAAW,qBAW3BC,iBAAoBC,UAChBF,QAAUlC,gBAAgBe,MAAMsB,cAEf,IAAnBH,QAAQlB,QACRoB,EAAEE,uCACWC,gBAAgB,CACzBL,QAAS,yBACTM,KAAM,WAEH,GAGPN,QAAQlB,OAASN,WACjB0B,EAAEE,uCACWC,gBAAgB,CACzBL,+CAAyCxB,iCACzC8B,KAAM,WAEH,GAKNC,QACG,2FAQJnC,eACAA,aAAaoC,UAAW,EACxBpC,aAAaS,MAAQ,wBAGlB,IAVHqB,EAAEE,kBACK,IAsCXtC,kBACAA,gBAAgB2C,iBAAiB,QAAS9B,iBAC1Cb,gBAAgB2C,iBAAiB,QAAS9B,iBAC1Cb,gBAAgB2C,iBAAiB,SAAS,KAEtCnC,WAAWK,gBAAiB,OAIhCA,mBAIJW,qBAGInB,MACAA,KAAKsC,iBAAiB,SAAUR,wBAI9BS,aAAe3C,SAASC,cAAc,kBACtC2C,aAAe5C,SAASC,cAAc,mBACxC0C,cAAgBC,gBA1CZ7C,kBACAA,gBAAgBe,MAAQ,GACxBF,mBAIAP,eACAA,aAAaoC,UAAW,EACxBpC,aAAaS,MAAQ,iBAIzBS,qBAGAsB,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,YAgCzBhD,SAASiD,iBAAiB,sBAClCC,SAASC,QACZ5C,YAAW,WACD6C,YAAcD,MAAMlD,cAAc,cACpCmD,aACAA,YAAYC,UAEjB,SAKXvD"}