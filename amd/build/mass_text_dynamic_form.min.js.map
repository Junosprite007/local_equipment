{"version":3,"file":"mass_text_dynamic_form.min.js","sources":["../src/mass_text_dynamic_form.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Mass text dynamic form JavaScript functionality.\n *\n * @module     local_equipment/mass_text_dynamic_form\n * @copyright  2025 onwards Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport { get_string as getString } from 'core/str';\nimport ModalForm from 'core_form/modalform';\nimport { add as addToast } from 'core/toast';\nimport Log from 'core/log';\n\n/**\n * Initialize the mass text dynamic form functionality.\n *\n * @return {void}\n */\nconst init = () => {\n    let retryCount = 0;\n    const maxRetries = 50; // 5 seconds max (50 * 100ms)\n\n    // Wait for DOM to be ready and try multiple times if elements aren't found\n    const initializeForm = () => {\n        // Use more robust selectors that work with dynamic forms\n        const messageTextarea =\n            document.querySelector('textarea[name=\"message\"]') ||\n            document.querySelector('#id_message') ||\n            document.querySelector('textarea[id*=\"message\"]');\n\n        const charCountDisplay =\n            document.querySelector('#char-counter') ||\n            document.querySelector('[id*=\"char-counter\"]') ||\n            document.querySelector('.char-counter');\n\n        const recipientCountDisplay =\n            document.querySelector('#recipient-count') ||\n            document.querySelector('[id*=\"recipient-count\"]') ||\n            document.querySelector('.recipient-count');\n\n        const form = document.querySelector('form');\n\n        // Safety check - ensure required elements exist\n        if (!messageTextarea) {\n            retryCount++;\n            if (retryCount < maxRetries) {\n                Log.debug(\n                    `local_equipment/mass_text_dynamic_form: Message textarea not found, retrying... (${retryCount}/${maxRetries})`\n                );\n                // Try again after a short delay\n                setTimeout(initializeForm, 100);\n                return;\n            } else {\n                Log.error(\n                    'local_equipment/mass_text_dynamic_form: Message textarea not found after maximum retries. ' +\n                        'Form initialization failed.'\n                );\n                return;\n            }\n        }\n\n        Log.debug(\n            'local_equipment/mass_text_dynamic_form: Elements found, initializing...'\n        );\n\n        // Get max length from data attribute or use default\n        const maxLength = parseInt(messageTextarea.dataset.maxLength) || 250;\n\n        /**\n         * Update character count display with proper styling.\n         *\n         * @return {void}\n         */\n        const updateCharCount = () => {\n            const currentLength = messageTextarea.value.length;\n            const remaining = maxLength - currentLength;\n\n            // Update the character count text\n            if (remaining >= 0) {\n                charCountDisplay.textContent = `${remaining} characters remaining`;\n            } else {\n                charCountDisplay.textContent = `${Math.abs(\n                    remaining\n                )} characters over limit`;\n            }\n\n            // Update styling based on remaining characters\n            charCountDisplay.classList.remove(\n                'text-danger',\n                'text-warning',\n                'text-muted'\n            );\n\n            if (remaining < 0) {\n                charCountDisplay.classList.add('text-danger');\n            } else if (remaining < 20) {\n                charCountDisplay.classList.add('text-warning');\n            } else {\n                charCountDisplay.classList.add('text-muted');\n            }\n        };\n\n        /**\n         * Load recipient count via AJAX using Moodle web services.\n         *\n         * @return {void}\n         */\n        const loadRecipientCount = () => {\n            if (!recipientCountDisplay) {\n                return;\n            }\n\n            Ajax.call([\n                {\n                    methodname: 'local_equipment_get_recipient_count',\n                    args: {},\n                },\n            ])[0]\n                .then((response) => {\n                    Log.debug('Web service response:', response);\n\n                    if (response.success) {\n                        recipientCountDisplay.textContent = `${response.count} parents`;\n                        recipientCountDisplay.className = 'badge bg-secondary';\n\n                        // Update styling based on count\n                        if (response.count === 0) {\n                            recipientCountDisplay.classList.remove(\n                                'bg-secondary'\n                            );\n                            recipientCountDisplay.classList.add('bg-warning');\n                        } else {\n                            recipientCountDisplay.classList.remove(\n                                'bg-warning'\n                            );\n                            recipientCountDisplay.classList.add('bg-success');\n                        }\n                    } else {\n                        recipientCountDisplay.textContent =\n                            'Error loading count';\n                        recipientCountDisplay.className = 'badge bg-danger';\n                        Log.error(\n                            'local_equipment/mass_text_dynamic_form: Recipient count error:',\n                            response.error\n                        );\n                    }\n                })\n                .catch((error) => {\n                    Log.debug('Web service error details:', error);\n                    recipientCountDisplay.textContent = 'Error loading count';\n                    recipientCountDisplay.className = 'badge bg-danger';\n                    Log.error(\n                        'local_equipment/mass_text_dynamic_form: Web service error:',\n                        error.message || 'Unknown error'\n                    );\n                });\n        };\n\n        /**\n         * Handle successful form submission.\n         *\n         * @param {Object} response - The response from the form submission\n         * @return {void}\n         */\n        const handleFormSuccess = (response) => {\n            if (response.success_message) {\n                addToast(response.success_message, {\n                    type: 'success',\n                    autohide: true,\n                    delay: 5000,\n                });\n            }\n\n            if (response.failure_message) {\n                addToast(response.failure_message, {\n                    type: 'warning',\n                    autohide: true,\n                    delay: 8000,\n                });\n            }\n\n            // Show detailed error information if available\n            if (response.error_details && response.error_details.length > 0) {\n                showErrorDetails(response.error_details);\n            }\n\n            // Clear the form\n            if (messageTextarea) {\n                messageTextarea.value = '';\n                updateCharCount();\n            }\n\n            // Reload recipient count\n            loadRecipientCount();\n        };\n\n        /**\n         * Show detailed error information in a collapsible format.\n         *\n         * @param {Array} errorDetails - Array of error detail objects\n         * @return {void}\n         */\n        const showErrorDetails = (errorDetails) => {\n            let errorHtml = '<div class=\"alert alert-danger mt-3\">';\n            errorHtml += '<h5>Error Details</h5>';\n            errorHtml += '<div class=\"collapse\" id=\"errorDetails\">';\n            errorHtml += '<ul class=\"mb-0\">';\n\n            errorDetails.forEach((error) => {\n                errorHtml += '<li>';\n                errorHtml += `<strong>${error.recipient}</strong> (${error.phone}): `;\n                errorHtml += error.error_message;\n                if (error.aws_error_code) {\n                    errorHtml += ` (AWS Error: ${error.aws_error_code})`;\n                }\n                errorHtml += '</li>';\n            });\n\n            errorHtml += '</ul>';\n            errorHtml += '</div>';\n            errorHtml += `<button class=\"btn btn-sm btn-outline-danger mt-2\" type=\"button\"\n                      data-bs-toggle=\"collapse\" data-bs-target=\"#errorDetails\"\n                      aria-expanded=\"false\" aria-controls=\"errorDetails\">`;\n            errorHtml += `View Error Details (${errorDetails.length} errors)`;\n            errorHtml += '</button>';\n            errorHtml += '</div>';\n\n            // Insert the error details after the form\n            const formContainer =\n                document.querySelector('.local_equipment_mass_text') ||\n                document.querySelector('form') ||\n                document.body;\n\n            const errorDiv = document.createElement('div');\n            errorDiv.innerHTML = errorHtml;\n            formContainer.appendChild(errorDiv);\n        };\n\n        /**\n         * Handle form submission confirmation.\n         *\n         * @param {Event} e - The form submission event\n         * @return {boolean} - Whether to allow form submission\n         */\n        const handleFormSubmit = (e) => {\n            const message = messageTextarea.value.trim();\n\n            if (message.length === 0) {\n                e.preventDefault();\n                Notification.addNotification({\n                    message: 'Please enter a message',\n                    type: 'error',\n                });\n                return false;\n            }\n\n            if (message.length > maxLength) {\n                e.preventDefault();\n                Notification.addNotification({\n                    message: `Message is too long. Maximum ${maxLength} characters allowed`,\n                    type: 'error',\n                });\n                return false;\n            }\n\n            // Show confirmation dialog\n            if (\n                !confirm(\n                    'Are you sure you want to send this message to all parents?'\n                )\n            ) {\n                e.preventDefault();\n                return false;\n            }\n\n            return true;\n        };\n\n        // Initialize functionality\n        messageTextarea.addEventListener('input', () => {\n            if (charCountDisplay) {\n                updateCharCount();\n            }\n        });\n        messageTextarea.addEventListener('keyup', () => {\n            if (charCountDisplay) {\n                updateCharCount();\n            }\n        });\n        messageTextarea.addEventListener('paste', () => {\n            // Use setTimeout to ensure paste content is processed\n            setTimeout(() => {\n                if (charCountDisplay) {\n                    updateCharCount();\n                }\n            }, 10);\n        });\n\n        // Initial character count\n        if (charCountDisplay) {\n            updateCharCount();\n        }\n\n        // Load recipient count\n        loadRecipientCount();\n\n        // Handle form submission if form exists\n        if (form) {\n            form.addEventListener('submit', handleFormSubmit);\n        }\n\n        // Set up dynamic form handling if using modal forms\n        const modalTriggers = document.querySelectorAll(\n            '[data-action=\"mass-text-modal\"]'\n        );\n        modalTriggers.forEach((trigger) => {\n            trigger.addEventListener('click', (e) => {\n                e.preventDefault();\n\n                const modalForm = new ModalForm({\n                    formClass: 'local_equipment\\\\form\\\\mass_text_dynamic_form',\n                    args: {},\n                    modalConfig: {\n                        title: getString(\n                            'masstextmessaging',\n                            'local_equipment'\n                        ),\n                        size: 'lg',\n                    },\n                    returnFocus: trigger,\n                });\n\n                modalForm.addEventListener(\n                    modalForm.events.FORM_SUBMITTED,\n                    (e) => {\n                        handleFormSuccess(e.detail);\n                    }\n                );\n\n                modalForm.show();\n            });\n        });\n    };\n\n    // Start the initialization process\n    initializeForm();\n};\n\nexport default {\n    init: init,\n};\n"],"names":["init","retryCount","initializeForm","messageTextarea","document","querySelector","charCountDisplay","recipientCountDisplay","form","debug","setTimeout","error","maxLength","parseInt","dataset","updateCharCount","currentLength","value","length","remaining","textContent","Math","abs","classList","remove","add","loadRecipientCount","call","methodname","args","then","response","success","count","className","catch","message","showErrorDetails","errorDetails","errorHtml","forEach","recipient","phone","error_message","aws_error_code","formContainer","body","errorDiv","createElement","innerHTML","appendChild","handleFormSubmit","e","trim","preventDefault","addNotification","type","confirm","addEventListener","querySelectorAll","trigger","modalForm","ModalForm","formClass","modalConfig","title","size","returnFocus","events","FORM_SUBMITTED","detail","success_message","autohide","delay","failure_message","error_details","show"],"mappings":"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"}