{"version":3,"file":"remove-items-scanner.min.js","sources":["../src/remove-items-scanner.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Scanner integration for remove items page.\n *\n * @module     local_equipment/remove-items-scanner\n * @copyright  2024 onwards Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport UniversalScanner from 'local_equipment/universal-scanner';\nimport Notification from 'core/notification';\nimport Log from 'core/log';\nimport jsQR from 'local_equipment/jsqr';\nimport Ajax from 'core/ajax';\nimport { debugAjaxResponse } from 'local_equipment/debug-utils';\n\n/**\n * Initialize the scanner for remove items page.\n */\nexport const init = () => {\n    Log.debug('local_equipment/remove-items-scanner: init() called');\n    Log.debug(\n        'local_equipment/remove-items-scanner: document.readyState =',\n        document.readyState\n    );\n\n    // Check if DOM is already ready\n    if (document.readyState === 'loading') {\n        // DOM is still loading, wait for DOMContentLoaded\n        Log.debug(\n            'local_equipment/remove-items-scanner: DOM still loading, adding DOMContentLoaded listener'\n        );\n        document.addEventListener('DOMContentLoaded', function () {\n            Log.debug(\n                'local_equipment/remove-items-scanner: DOMContentLoaded event fired'\n            );\n            initializeScanner();\n        });\n    } else {\n        // DOM is already ready, initialize immediately\n        Log.debug(\n            'local_equipment/remove-items-scanner: DOM already ready, initializing immediately'\n        );\n        initializeScanner();\n    }\n};\n\n/**\n * Initialize the scanner interface.\n */\nfunction initializeScanner() {\n    Log.debug(\n        'local_equipment/remove-items-scanner: initializeScanner() called'\n    );\n\n    const scannerContainer = document.getElementById('scanner-container');\n    const manualUuid = document.getElementById('manual_uuid');\n    const lookupBtn = document.getElementById('lookup_btn');\n    const sessionItems = document.getElementById('session_items');\n\n    Log.debug('DOM elements found:', {\n        scannerContainer: !!scannerContainer,\n        manualUuid: !!manualUuid,\n        lookupBtn: !!lookupBtn,\n        sessionItems: !!sessionItems,\n    });\n\n    let scanner = null;\n    let sessionRemovedCount = 0;\n    let sessionRemovedItems = [];\n\n    // Initialize scanner immediately\n    initScanner();\n\n    /**\n     * Initialize the scanner interface.\n     */\n    function initScanner() {\n        if (!scannerContainer) {\n            Log.error('Scanner container not found in DOM');\n            return;\n        }\n\n        // Clear existing scanner interface\n        scannerContainer.innerHTML = '';\n\n        // Create scanner controls\n        const controlsDiv = document.createElement('div');\n        controlsDiv.className = 'scanner-controls';\n        controlsDiv.innerHTML = `\n            <div class=\"scanner-area mb-3\" id=\"scanner-area\">\n                <!-- Scanner video will be inserted here -->\n            </div>\n            <div class=\"scanner-toggle mb-3\">\n                <div class=\"btn-group\" role=\"group\">\n                    <button type=\"button\" id=\"start-camera-btn\" class=\"btn btn-primary\">\n                        <i class=\"fa fa-camera\"></i> Start Camera\n                    </button>\n                    <button type=\"button\" id=\"stop-camera-btn\" class=\"btn btn-secondary\" disabled>\n                        <i class=\"fa fa-stop\"></i> Stop Camera\n                    </button>\n                </div>\n                <div class=\"mt-2\">\n                    <button type=\"button\" id=\"scan-barcode-btn\" class=\"btn btn-primary\" style=\"display: none;\">\n                        <i class=\"fa fa-qrcode\"></i> Scan\n                    </button>\n                    <button type=\"button\" id=\"flip-camera-btn\" class=\"btn btn-outline-secondary btn-sm ms-2\" style=\"display: none;\"\n                        title=\"Toggle camera mirror\">\n                        <i class=\"fa fa-arrows-h\"></i> Flip\n                    </button>\n                </div>\n            </div>\n            <div class=\"file-upload-section mb-3\" style=\"display: none;\" id=\"file-upload-section\">\n                <label for=\"barcode-file-input\" class=\"form-label\">\n                    <i class=\"fa fa-camera\"></i> Take Photo of Barcode/QR Code:\n                </label>\n                <div class=\"input-group\">\n                    <input type=\"file\" id=\"barcode-file-input\" class=\"form-control\" accept=\"image/*\" capture=\"environment\">\n                    <button type=\"button\" id=\"process-file-btn\" class=\"btn btn-outline-success\" disabled>\n                        <i class=\"fa fa-search\"></i> Scan Photo\n                    </button>\n                </div>\n                <small class=\"form-text text-muted\">\n                    Take a clear photo of the QR code or barcode with good lighting\n                </small>\n            </div>\n            <div class=\"manual-input\">\n                <label for=\"scanner-manual-input\" class=\"form-label\">Or enter barcode/QR manually:</label>\n                <div class=\"input-group\">\n                    <input type=\"text\" id=\"scanner-manual-input\" class=\"form-control\" placeholder=\"Scan or type barcode/QR code...\">\n                    <button type=\"button\" id=\"scanner-manual-btn\" class=\"btn btn-outline-primary\">Process</button>\n                </div>\n            </div>\n        `;\n        scannerContainer.appendChild(controlsDiv);\n\n        // Initialize scanner instance\n        scanner = new UniversalScanner({\n            containerId: 'scanner-area',\n            resultCallback: handleScanResult,\n            errorCallback: handleScanError,\n        });\n\n        // Initialize scanner\n        scanner.init().then((success) => {\n            if (success) {\n                Log.debug('Scanner initialized successfully');\n            } else {\n                Log.error('Scanner initialization failed');\n                showFallbackInterface();\n            }\n        });\n\n        // Set up control buttons\n        setupScannerControls();\n\n        // Add network test button\n        addNetworkTestButton();\n    }\n\n    /**\n     * Set up scanner control buttons.\n     */\n    function setupScannerControls() {\n        const startBtn = document.getElementById('start-camera-btn');\n        const stopBtn = document.getElementById('stop-camera-btn');\n        const scanBtn = document.getElementById('scan-barcode-btn');\n        const flipBtn = document.getElementById('flip-camera-btn');\n        const manualInput = document.getElementById('scanner-manual-input');\n        const manualBtn = document.getElementById('scanner-manual-btn');\n\n        let isScanning = false;\n        let scanTimeout = null;\n        let isMirrored = false; // Default to mirrored (good for webcams)\n\n        startBtn.addEventListener('click', async () => {\n            try {\n                // Use robust camera detection\n                scanner.stream = await getCameraStreamRobust();\n\n                scanner.video.srcObject = scanner.stream;\n                await scanner.video.play();\n\n                // Set canvas dimensions to match video\n                scanner.canvas.width = scanner.video.videoWidth;\n                scanner.canvas.height = scanner.video.videoHeight;\n\n                scanner.updateStatus(\n                    'Camera ready - click Scan to detect barcode/QR code'\n                );\n\n                startBtn.disabled = true;\n                stopBtn.disabled = false;\n                scanBtn.style.display = 'inline-block';\n                flipBtn.style.display = 'inline-block';\n\n                // Apply initial mirror state\n                updateVideoMirror();\n\n                updateStatusMessage(\n                    \"Camera started. Click 'Scan' to detect QR codes or barcodes in the camera view.\",\n                    'info'\n                );\n            } catch (error) {\n                Log.error('Failed to start camera:', error);\n\n                // Show detailed error information\n                const compatibility = await checkCameraCompatibility();\n                if (!compatibility.supported) {\n                    showDetailedCompatibilityError(compatibility);\n                } else {\n                    Notification.addNotification({\n                        message: 'Failed to start camera: ' + error.message,\n                        type: 'error',\n                    });\n                }\n            }\n        });\n\n        stopBtn.addEventListener('click', () => {\n            // Stop camera and hide scan button\n            if (scanner.stream) {\n                scanner.stream.getTracks().forEach((track) => track.stop());\n                scanner.stream = null;\n            }\n            if (scanner.video) {\n                scanner.video.srcObject = null;\n            }\n\n            scanner.updateStatus('Camera stopped');\n            startBtn.disabled = false;\n            stopBtn.disabled = true;\n            scanBtn.style.display = 'none';\n            flipBtn.style.display = 'none';\n\n            // Clear any active scanning\n            if (scanTimeout) {\n                clearTimeout(scanTimeout);\n                scanTimeout = null;\n            }\n            isScanning = false;\n        });\n\n        // Flip camera button - toggles horizontal mirror\n        flipBtn.addEventListener('click', () => {\n            isMirrored = !isMirrored;\n            updateVideoMirror();\n\n            // Update button text to show current state\n            const icon = isMirrored ? 'fa-arrows-h' : 'fa-arrows-h';\n            const text = isMirrored ? 'Flip (Mirrored)' : 'Flip (Normal)';\n            flipBtn.innerHTML = `<i class=\"fa ${icon}\"></i> ${text}`;\n\n            // Show feedback message\n            const message = isMirrored\n                ? 'Camera mirrored (good for webcams)'\n                : 'Camera normal (good for mobile)';\n            showSuccessMessage(message);\n        });\n\n        /**\n         * Update video mirror state based on isMirrored flag.\n         */\n        function updateVideoMirror() {\n            // Find the video element in the scanner area\n            const videoElement = document.querySelector('#scanner-area video');\n\n            if (videoElement) {\n                // Apply transform directly via inline style (more reliable)\n                if (isMirrored) {\n                    videoElement.style.transform = 'scaleX(-1)';\n                } else {\n                    videoElement.style.transform = 'scaleX(1)';\n                }\n\n                Log.debug(\n                    'Video mirror updated:',\n                    isMirrored ? 'mirrored (scaleX(-1))' : 'normal (scaleX(1))',\n                    'Video element found:',\n                    !!videoElement,\n                    'Applied transform:',\n                    videoElement.style.transform\n                );\n            } else {\n                Log.error('Video element not found for mirror update');\n            }\n        }\n\n        // Scan button - triggers 1-second scan window\n        scanBtn.addEventListener('click', async () => {\n            if (isScanning) {\n                return;\n            }\n\n            isScanning = true;\n            scanBtn.disabled = true;\n            scanBtn.innerHTML =\n                '<i class=\"fa fa-spinner fa-spin\"></i> Scanning...';\n            scanner.updateStatus('Scanning for barcode/QR code...');\n\n            try {\n                const result = await performSingleScan();\n                if (result) {\n                    // Barcode found and processed\n                    scanner.updateStatus('Scan successful!');\n                    scanner.showScanSuccess();\n                } else {\n                    // No barcode found\n                    scanner.updateStatus('No barcode detected - try again');\n                    showErrorMessage(\n                        'No barcode detected. Please position the barcode/QR code in the target area and try again.'\n                    );\n                }\n            } catch (error) {\n                Log.error('Scan error:', error);\n                scanner.updateStatus('Scan failed');\n                showErrorMessage('Scan failed. Please try again.');\n            }\n\n            // Reset button state\n            isScanning = false;\n            scanBtn.disabled = false;\n            scanBtn.innerHTML = '<i class=\"fa fa-qrcode\"></i> Scan';\n\n            // Reset status after a delay\n            setTimeout(() => {\n                scanner.updateStatus(\n                    'Ready to scan - position barcode/QR code and click Scan'\n                );\n            }, 2000);\n        });\n\n        /**\n         * Perform a single 1-second scan attempt.\n         * @returns {Promise<boolean>} True if barcode was found and processed\n         */\n        async function performSingleScan() {\n            return new Promise((resolve) => {\n                let scanAttempts = 0;\n                const maxAttempts = 30; // ~1 second at 30fps\n                let found = false;\n\n                const scanFrame = async () => {\n                    if (found || scanAttempts >= maxAttempts) {\n                        resolve(found);\n                        return;\n                    }\n\n                    try {\n                        // Check if video is ready\n                        if (\n                            !scanner.video ||\n                            scanner.video.readyState !==\n                                scanner.video.HAVE_ENOUGH_DATA\n                        ) {\n                            scanAttempts++;\n                            requestAnimationFrame(scanFrame);\n                            return;\n                        }\n\n                        // Draw current frame to canvas\n                        scanner.context.drawImage(\n                            scanner.video,\n                            0,\n                            0,\n                            scanner.canvas.width,\n                            scanner.canvas.height\n                        );\n\n                        // Try native BarcodeDetector first (Chrome/Edge)\n                        if (scanner.hasBarcodeDetector) {\n                            try {\n                                // eslint-disable-next-line no-undef\n                                const detector = new BarcodeDetector({\n                                    formats: [\n                                        'qr_code',\n                                        'ean_13',\n                                        'ean_8',\n                                        'upc_a',\n                                        'upc_e',\n                                        'code_128',\n                                        'code_39',\n                                    ],\n                                });\n\n                                const barcodes = await detector.detect(\n                                    scanner.canvas\n                                );\n\n                                if (barcodes.length > 0) {\n                                    const barcode = barcodes[0];\n                                    Log.debug(\n                                        'Barcode detected:',\n                                        barcode.rawValue,\n                                        barcode.format\n                                    );\n                                    processBarcode(\n                                        barcode.rawValue,\n                                        barcode.format\n                                    );\n                                    found = true;\n                                    resolve(true);\n                                    return;\n                                }\n                            } catch (error) {\n                                Log.debug('BarcodeDetector failed:', error);\n                            }\n                        }\n\n                        // Fallback: Try QR code detection\n                        try {\n                            const imageData = scanner.context.getImageData(\n                                0,\n                                0,\n                                scanner.canvas.width,\n                                scanner.canvas.height\n                            );\n\n                            // Use jsQR library for QR code detection\n                            const code = jsQR.scan(\n                                imageData.data,\n                                imageData.width,\n                                imageData.height\n                            );\n\n                            if (code && code.data) {\n                                Log.debug('QR code detected:', code.data);\n                                processBarcode(code.data, 'qr_code');\n                                found = true;\n                                resolve(true);\n                                return;\n                            }\n                        } catch (error) {\n                            Log.debug('QR detection failed:', error);\n                        }\n                    } catch (error) {\n                        Log.debug('Frame processing error:', error);\n                    }\n\n                    scanAttempts++;\n                    requestAnimationFrame(scanFrame);\n                };\n\n                // Start scanning\n                requestAnimationFrame(scanFrame);\n            });\n        }\n\n        // Manual input handling\n        manualBtn.addEventListener('click', () => {\n            const barcode = manualInput.value.trim();\n            if (barcode) {\n                processBarcode(barcode, 'manual');\n                manualInput.value = '';\n            }\n        });\n\n        manualInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                manualBtn.click();\n            }\n        });\n\n        // Set up file upload\n        setupFileUpload();\n    }\n\n    /**\n     * Handle scan result from scanner.\n     *\n     * @param {Object} result Scan result\n     */\n    function handleScanResult(result) {\n        if (result.success && result.data) {\n            // Extract barcode data from the scan result\n            const barcodeData = result.data.barcode_data || result.data;\n            Log.debug('Scan successful, processing barcode:', barcodeData);\n            processBarcode(barcodeData, 'scan');\n        } else {\n            Log.error('Scan failed:', result);\n            // Show error message to user\n            const errorMsg = result.message || 'Scan failed. Please try again.';\n            showErrorMessage(errorMsg);\n        }\n    }\n\n    /**\n     * Handle scan error from scanner.\n     *\n     * @param {string} errorCode Error code\n     * @param {string} message Error message\n     */\n    function handleScanError(errorCode, message) {\n        Log.error('Scanner error:', errorCode, message);\n\n        if (errorCode === 'camera_access_failed') {\n            showFallbackInterface();\n        }\n    }\n\n    /**\n     * Show fallback interface when camera is not available.\n     */\n    function showFallbackInterface() {\n        if (scannerContainer) {\n            const isMobile =\n                /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n                    navigator.userAgent\n                );\n            const isHTTP = window.location.protocol === 'http:';\n\n            let content = '';\n\n            if (isMobile && isHTTP) {\n                // Mobile + HTTP specific guidance\n                content = `\n                    <div class=\"alert alert-info\">\n                        <h5><i class=\"fa fa-mobile\"></i> Mobile Camera Setup Required</h5>\n                        <p><strong>To enable camera scanning on mobile:</strong></p>\n                        <ol class=\"text-start mb-3\">\n                            <li>Open Chrome menu (⋮) → <strong>Settings</strong></li>\n                            <li>Go to <strong>Site Settings</strong> → <strong>Camera</strong></li>\n                            <li>Find this site and set to <strong>\"Allow\"</strong></li>\n                        </ol>\n                        <p><strong>Alternative:</strong> In Chrome address bar, type:<br>\n                        <code>chrome://flags/#unsafely-treat-insecure-origin-as-secure</code><br>\n                        Add: <code>${window.location.origin}</code></p>\n                        <button type=\"button\" id=\"test-camera-btn\" class=\"btn btn-primary btn-sm mt-2\">\n                            <i class=\"fa fa-camera\"></i> Test Camera Access\n                        </button>\n                    </div>\n                `;\n            } else if (isMobile) {\n                // Mobile + HTTPS\n                content = `\n                    <div class=\"alert alert-warning text-center\">\n                        <i class=\"fa fa-mobile\"></i>\n                        <strong>Camera access denied</strong><br>\n                        Please check your browser settings and allow camera access for this site.\n                        <button type=\"button\" id=\"test-camera-btn\" class=\"btn btn-primary btn-sm mt-2\">\n                            <i class=\"fa fa-camera\"></i> Test Camera Access\n                        </button>\n                    </div>\n                `;\n            } else {\n                // Desktop fallback\n                content = `\n                    <div class=\"alert alert-warning text-center\">\n                        <i class=\"fa fa-exclamation-triangle\"></i>\n                        <strong>Camera not available</strong><br>\n                        Please use the manual input below to enter barcodes/QR codes.\n                    </div>\n                `;\n            }\n\n            scannerContainer.innerHTML = content;\n\n            // Add test camera button functionality\n            const testBtn = document.getElementById('test-camera-btn');\n            if (testBtn) {\n                testBtn.addEventListener('click', testCameraAccess);\n            }\n\n            // Show file upload option for mobile users\n            if (isMobile) {\n                const fileUploadSection = document.getElementById(\n                    'file-upload-section'\n                );\n                if (fileUploadSection) {\n                    fileUploadSection.style.display = 'block';\n                }\n            }\n        }\n    }\n\n    /**\n     * Set up file upload functionality for mobile users.\n     */\n    function setupFileUpload() {\n        const fileInput = document.getElementById('barcode-file-input');\n        const processFileBtn = document.getElementById('process-file-btn');\n\n        if (!fileInput || !processFileBtn) {\n            return;\n        }\n\n        // Enable process button when file is selected\n        fileInput.addEventListener('change', function () {\n            processFileBtn.disabled = !this.files.length;\n        });\n\n        // Process uploaded file\n        processFileBtn.addEventListener('click', async function () {\n            const file = fileInput.files[0];\n            if (!file) {\n                return;\n            }\n\n            const originalText = this.innerHTML;\n            this.disabled = true;\n            this.innerHTML =\n                '<i class=\"fa fa-spinner fa-spin\"></i> Scanning Photo...';\n\n            try {\n                const barcode = await processImageFile(file);\n                if (barcode) {\n                    showSuccessMessage('Barcode detected from photo!');\n                    processBarcode(\n                        barcode.data,\n                        barcode.format || 'file_upload'\n                    );\n                    // Clear the file input\n                    fileInput.value = '';\n                } else {\n                    showErrorMessage(\n                        'No barcode found in the image. Please try taking a clearer photo with better lighting.'\n                    );\n                }\n            } catch (error) {\n                Log.error('File processing error:', error);\n                showErrorMessage('Failed to process image. Please try again.');\n            }\n\n            this.disabled = false;\n            this.innerHTML = originalText;\n            processFileBtn.disabled = true; // Disable until new file selected\n        });\n    }\n\n    /**\n     * Process an uploaded image file for barcodes.\n     * @param {File} file Image file\n     * @returns {Promise<Object|null>} Detected barcode object or null\n     */\n    async function processImageFile(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onload = function (e) {\n                const img = new Image();\n\n                img.onload = async function () {\n                    try {\n                        // Create a temporary canvas for processing\n                        const canvas = document.createElement('canvas');\n                        const context = canvas.getContext('2d', {\n                            willReadFrequently: true,\n                        });\n\n                        // Set canvas size to image size\n                        canvas.width = img.width;\n                        canvas.height = img.height;\n\n                        // Draw image to canvas\n                        context.drawImage(img, 0, 0);\n\n                        // Try native BarcodeDetector first (Chrome/Edge)\n                        if ('BarcodeDetector' in window) {\n                            try {\n                                // eslint-disable-next-line no-undef\n                                const detector = new BarcodeDetector({\n                                    formats: [\n                                        'qr_code',\n                                        'ean_13',\n                                        'ean_8',\n                                        'upc_a',\n                                        'upc_e',\n                                        'code_128',\n                                        'code_39',\n                                    ],\n                                });\n\n                                const barcodes = await detector.detect(canvas);\n\n                                if (barcodes.length > 0) {\n                                    Log.debug(\n                                        'Barcode detected from file:',\n                                        barcodes[0].rawValue\n                                    );\n                                    resolve({\n                                        data: barcodes[0].rawValue,\n                                        format: barcodes[0].format,\n                                    });\n                                    return;\n                                }\n                            } catch (error) {\n                                Log.debug(\n                                    'BarcodeDetector failed on file:',\n                                    error\n                                );\n                            }\n                        }\n\n                        // Fallback: Try QR code detection with jsQR\n                        try {\n                            const imageData = context.getImageData(\n                                0,\n                                0,\n                                canvas.width,\n                                canvas.height\n                            );\n                            const code = jsQR.scan(\n                                imageData.data,\n                                imageData.width,\n                                imageData.height\n                            );\n\n                            if (code && code.data) {\n                                Log.debug(\n                                    'QR code detected from file:',\n                                    code.data\n                                );\n                                resolve({\n                                    data: code.data,\n                                    format: 'qr_code',\n                                });\n                                return;\n                            }\n                        } catch (error) {\n                            Log.debug('jsQR failed on file:', error);\n                        }\n\n                        // No barcode found\n                        resolve(null);\n                    } catch (error) {\n                        reject(error);\n                    }\n                };\n\n                img.onerror = function () {\n                    reject(new Error('Failed to load image'));\n                };\n\n                img.src = e.target.result;\n            };\n\n            reader.onerror = function () {\n                reject(new Error('Failed to read file'));\n            };\n\n            reader.readAsDataURL(file);\n        });\n    }\n\n    /**\n     * Test camera access with comprehensive compatibility checking.\n     */\n    async function testCameraAccess() {\n        const testBtn = document.getElementById('test-camera-btn');\n        const originalText = testBtn.innerHTML;\n\n        testBtn.disabled = true;\n        testBtn.innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i> Testing...';\n\n        // First, run comprehensive compatibility check\n        const compatibility = await checkCameraCompatibility();\n\n        if (!compatibility.supported) {\n            showDetailedCompatibilityError(compatibility);\n            testBtn.disabled = false;\n            testBtn.innerHTML = originalText;\n            return;\n        }\n\n        // Try to access camera using the best available method\n        try {\n            const stream = await getCameraStreamRobust();\n\n            // Success! Camera access granted\n            stream.getTracks().forEach((track) => track.stop());\n\n            showSuccessMessage(\n                'Camera access granted! You can now use the Start Camera button.'\n            );\n\n            // Re-initialize scanner interface\n            initScanner();\n        } catch (error) {\n            // Provide specific error guidance\n            let errorMessage = 'Camera access failed. ';\n\n            if (error.name === 'NotAllowedError') {\n                errorMessage +=\n                    'Please allow camera permissions in your browser settings.';\n            } else if (error.name === 'NotFoundError') {\n                errorMessage += 'No camera found on this device.';\n            } else if (error.name === 'NotSupportedError') {\n                errorMessage += 'Camera not supported on this browser/device.';\n            } else if (error.name === 'NotReadableError') {\n                errorMessage += 'Camera is being used by another application.';\n            } else {\n                errorMessage += `Error: ${error.message}`;\n            }\n\n            showErrorMessage(errorMessage);\n\n            testBtn.disabled = false;\n            testBtn.innerHTML = originalText;\n        }\n    }\n\n    /**\n     * Comprehensive camera compatibility check.\n     * @returns {Promise<Object>} Compatibility information\n     */\n    async function checkCameraCompatibility() {\n        const result = {\n            supported: false,\n            method: null,\n            issues: [],\n            browserInfo: getBrowserInfo(),\n            apis: {\n                mediaDevices: false,\n                getUserMedia: false,\n                webkitGetUserMedia: false,\n                mozGetUserMedia: false,\n            },\n        };\n\n        Log.debug('Browser info:', result.browserInfo);\n\n        // Check for modern MediaDevices API\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            result.apis.mediaDevices = true;\n            result.method = 'mediaDevices';\n            result.supported = true;\n        }\n\n        // Check for legacy getUserMedia\n        if (navigator.getUserMedia) {\n            result.apis.getUserMedia = true;\n            if (!result.supported) {\n                result.method = 'getUserMedia';\n                result.supported = true;\n            }\n        }\n\n        // Check for webkit prefixed version (older Chrome/Safari)\n        if (navigator.webkitGetUserMedia) {\n            result.apis.webkitGetUserMedia = true;\n            if (!result.supported) {\n                result.method = 'webkitGetUserMedia';\n                result.supported = true;\n            }\n        }\n\n        // Check for moz prefixed version (older Firefox)\n        if (navigator.mozGetUserMedia) {\n            result.apis.mozGetUserMedia = true;\n            if (!result.supported) {\n                result.method = 'mozGetUserMedia';\n                result.supported = true;\n            }\n        }\n\n        // Check for HTTPS/secure context\n        if (\n            location.protocol !== 'https:' &&\n            location.hostname !== 'localhost'\n        ) {\n            result.issues.push('insecure_context');\n        }\n\n        // Check if we're in a mobile browser\n        if (result.browserInfo.mobile && !result.supported) {\n            result.issues.push('mobile_no_camera_api');\n        }\n\n        Log.debug('Camera compatibility check:', result);\n        return result;\n    }\n\n    /**\n     * Get detailed browser information.\n     * @returns {Object} Browser information\n     */\n    function getBrowserInfo() {\n        const ua = navigator.userAgent;\n        const result = {\n            mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n                ua\n            ),\n            chrome: /Chrome/i.test(ua),\n            firefox: /Firefox/i.test(ua),\n            safari: /Safari/i.test(ua) && !/Chrome/i.test(ua),\n            edge: /Edge/i.test(ua),\n            version: null,\n            android: /Android/i.test(ua),\n            ios: /iPhone|iPad|iPod/i.test(ua),\n        };\n\n        // Extract Chrome version\n        if (result.chrome) {\n            const match = ua.match(/Chrome\\/(\\d+)/);\n            if (match) {\n                result.version = parseInt(match[1]);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Robust camera stream acquisition with fallbacks.\n     * @returns {Promise<MediaStream>} Camera stream\n     */\n    async function getCameraStreamRobust() {\n        const constraints = {\n            video: {\n                facingMode: 'environment',\n                width: { ideal: 1280 },\n                height: { ideal: 720 },\n            },\n        };\n\n        // Try modern API first\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            try {\n                Log.debug('Trying modern mediaDevices.getUserMedia');\n                return await navigator.mediaDevices.getUserMedia(constraints);\n            } catch (error) {\n                Log.debug('Modern API failed:', error);\n                // Continue to fallbacks\n            }\n        }\n\n        // Try legacy getUserMedia with Promise wrapper\n        if (navigator.getUserMedia) {\n            try {\n                Log.debug('Trying legacy getUserMedia');\n                return await new Promise((resolve, reject) => {\n                    navigator.getUserMedia(constraints, resolve, reject);\n                });\n            } catch (error) {\n                Log.debug('Legacy getUserMedia failed:', error);\n            }\n        }\n\n        // Try webkit prefixed version\n        if (navigator.webkitGetUserMedia) {\n            try {\n                Log.debug('Trying webkitGetUserMedia');\n                return await new Promise((resolve, reject) => {\n                    navigator.webkitGetUserMedia(constraints, resolve, reject);\n                });\n            } catch (error) {\n                Log.debug('webkitGetUserMedia failed:', error);\n            }\n        }\n\n        // Try moz prefixed version\n        if (navigator.mozGetUserMedia) {\n            try {\n                Log.debug('Trying mozGetUserMedia');\n                return await new Promise((resolve, reject) => {\n                    navigator.mozGetUserMedia(constraints, resolve, reject);\n                });\n            } catch (error) {\n                Log.debug('mozGetUserMedia failed:', error);\n            }\n        }\n\n        throw new Error('No camera API available');\n    }\n\n    /**\n     * Show detailed compatibility error with specific guidance.\n     * @param {Object} compatibility Compatibility check result\n     */\n    function showDetailedCompatibilityError(compatibility) {\n        let message =\n            '<div class=\"alert alert-danger\"><h5><i class=\"fa fa-exclamation-triangle\"></i> Camera Not Supported</h5>';\n\n        message +=\n            '<p><strong>Browser:</strong> ' + compatibility.browserInfo.chrome\n                ? `Chrome ${compatibility.browserInfo.version || 'Unknown'}`\n                : 'Unknown browser';\n\n        message +=\n            '<br><strong>Mobile:</strong> ' +\n            (compatibility.browserInfo.mobile ? 'Yes' : 'No');\n        message +=\n            '<br><strong>Secure Context:</strong> ' +\n            (location.protocol === 'https:' ? 'Yes' : 'No') +\n            '</p>';\n\n        message += '<p><strong>Available APIs:</strong></p><ul>';\n        Object.keys(compatibility.apis).forEach((api) => {\n            message += `<li>${api}: ${\n                compatibility.apis[api] ? '✓' : '✗'\n            }</li>`;\n        });\n        message += '</ul>';\n\n        if (compatibility.issues.length > 0) {\n            message += '<p><strong>Issues Found:</strong></p><ul>';\n            compatibility.issues.forEach((issue) => {\n                switch (issue) {\n                    case 'insecure_context':\n                        message +=\n                            '<li>Site is not served over HTTPS (required for camera access)</li>';\n                        break;\n                    case 'mobile_no_camera_api':\n                        message +=\n                            '<li>Mobile browser does not support camera API</li>';\n                        break;\n                }\n            });\n            message += '</ul>';\n        }\n\n        // Specific guidance based on browser\n        if (\n            compatibility.browserInfo.chrome &&\n            compatibility.browserInfo.mobile\n        ) {\n            message +=\n                '<div class=\"mt-3\"><strong>Chrome Mobile Solutions:</strong>';\n            message += '<ol>';\n            message += '<li>Ensure Chrome is updated to latest version</li>';\n            message += '<li>Try clearing Chrome cache and data</li>';\n            message +=\n                '<li>Check if \"Use camera\" is enabled in Chrome settings</li>';\n            message += '<li>Try accessing via Chrome Incognito mode</li>';\n            message += '</ol></div>';\n        }\n\n        message += '</div>';\n\n        if (scannerContainer) {\n            scannerContainer.innerHTML = message;\n        }\n    }\n\n    /**\n     * Determine if a barcode is a UUID (QR code) or UPC code.\n     * @param {string} barcode Barcode data\n     * @returns {string} Type: 'uuid', 'upc', or 'unknown'\n     */\n    function determineBarcodeType(barcode) {\n        // UUID pattern (standard 8-4-4-4-12 format)\n        const uuidPattern =\n            /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\n\n        // UPC pattern (8-14 digits)\n        const upcPattern = /^\\d{8,14}$/;\n\n        if (uuidPattern.test(barcode)) {\n            return 'uuid';\n        } else if (upcPattern.test(barcode)) {\n            return 'upc';\n        } else {\n            return 'unknown';\n        }\n    }\n\n    /**\n     * Process a barcode (from scan or manual entry).\n     *\n     * @param {string} barcode Barcode data\n     * @param {string} format Barcode format (optional)\n     */\n    function processBarcode(barcode, format = 'unknown') {\n        Log.debug('Processing barcode:', barcode, 'Format:', format);\n\n        // Determine barcode type\n        const barcodeType = determineBarcodeType(barcode);\n\n        Log.debug('Determined barcode type:', barcodeType);\n\n        // Show processing state\n        const processingBtn = document.getElementById('scanner-manual-btn');\n        if (processingBtn) {\n            processingBtn.disabled = true;\n            processingBtn.textContent = 'Processing...';\n        }\n\n        // Update status message\n        updateStatusMessage(\n            `Processing ${barcodeType} code: ${barcode}...`,\n            'info'\n        );\n\n        // Process via removal endpoint\n        processRemoval(barcode, barcodeType).finally(() => {\n            // Reset button state\n            if (processingBtn) {\n                processingBtn.disabled = false;\n                processingBtn.textContent = 'Process';\n            }\n        });\n    }\n\n    /**\n     * Process item removal using Moodle web service.\n     *\n     * @param {string} barcode Barcode data\n     * @param {string} barcodeType Type of barcode (uuid, upc, unknown)\n     * @returns {Promise} Processing promise\n     */\n    async function processRemoval(barcode, barcodeType) {\n        if (!window.M || !window.M.cfg) {\n            throw new Error(\n                'Moodle environment not properly loaded. Please refresh the page.'\n            );\n        }\n\n        Log.debug(\n            'local_equipment/remove-items-scanner: Processing removal request',\n            {\n                barcode: barcode,\n                type: barcodeType,\n                timestamp: new Date().toISOString(),\n            }\n        );\n\n        try {\n            const request = {\n                methodname: 'local_equipment_validate_removal',\n                args: {\n                    barcode: barcode,\n                    type: barcodeType,\n                },\n            };\n\n            Log.debug(\n                'local_equipment/remove-items-scanner: Making AJAX request',\n                request\n            );\n\n            const response = await Ajax.call([request]);\n            const data = await response[0];\n\n            Log.debug(\n                'local_equipment/remove-items-scanner: Raw response received',\n                {\n                    response: response,\n                    data: data,\n                    responseType: typeof data,\n                    keys: Object.keys(data || {}),\n                    stringified: JSON.stringify(data),\n                }\n            );\n\n            // Check if we got a valid response structure\n            if (!data || typeof data !== 'object') {\n                Log.error(\n                    'local_equipment/remove-items-scanner: Invalid response structure',\n                    {\n                        response: response,\n                        data: data,\n                        dataType: typeof data,\n                    }\n                );\n\n                throw new Error(\n                    'Invalid response from server - expected object, got: ' +\n                        typeof data\n                );\n            }\n\n            // Enhanced debugging: log every property of the response\n            Log.debug(\n                'local_equipment/remove-items-scanner: Complete response analysis',\n                {\n                    fullResponse: response,\n                    dataObject: data,\n                    dataKeys: Object.keys(data),\n                    dataValues: Object.values(data),\n                    hasSuccessProperty: 'success' in data,\n                    successValue: data.success,\n                    successType: typeof data.success,\n                    hasMessageProperty: 'message' in data,\n                    messageValue: data.message,\n                    hasErrorProperty: 'error' in data,\n                    errorValue: data.error,\n                    hasErrorCodeProperty: 'error_code' in data,\n                    errorCodeValue: data.error_code,\n                    hasExceptionProperty: 'exception' in data,\n                    exceptionValue: data.exception,\n                    responseAsString: JSON.stringify(data, null, 2),\n                }\n            );\n\n            // Log the complete response structure for debugging\n            if (data.success === true) {\n                Log.debug(\n                    'local_equipment/remove-items-scanner: Success response received',\n                    data\n                );\n                handleRemovalSuccess(data);\n            } else if (data.success === false) {\n                Log.debug(\n                    'local_equipment/remove-items-scanner: Error response received',\n                    data\n                );\n                handleRemovalError(data);\n            } else {\n                // Handle case where success property is missing or invalid\n                debugAjaxResponse(\n                    'Response missing or invalid success property',\n                    data,\n                    {\n                        Barcode: barcode,\n                        'Barcode Type': barcodeType,\n                        Function: 'processRemoval',\n                        'All Properties':\n                            Object.getOwnPropertyNames(data).join(', '),\n                    }\n                );\n\n                // Check if this looks like a Moodle error response\n                let errorMessage = 'Unknown response format from server';\n                let debugInfo = data;\n\n                if (data.exception) {\n                    // This looks like a Moodle exception response\n                    errorMessage = `Moodle Exception: ${data.exception} - ${\n                        data.message || 'No message provided'\n                    }`;\n                    if (data.debuginfo) {\n                        errorMessage += ` (Debug: ${data.debuginfo})`;\n                    }\n                } else if (data.error) {\n                    // This looks like an error response without success property\n                    errorMessage = `Server Error: ${data.error}`;\n                } else if (data.message && !data.success) {\n                    // Message without success - probably an error\n                    errorMessage = `Server Response: ${data.message}`;\n                } else {\n                    // Try to show any message that came back\n                    errorMessage =\n                        data.message ||\n                        data.error ||\n                        'Unknown response format from server';\n                    errorMessage += ` (Server returned: ${JSON.stringify(\n                        data\n                    )})`;\n                }\n\n                handleRemovalError({\n                    success: false,\n                    message: errorMessage,\n                    error_code: 'invalid_response_format',\n                    debug_info: debugInfo,\n                });\n            }\n        } catch (error) {\n            Log.error(\n                'local_equipment/remove-items-scanner: Exception during removal processing',\n                {\n                    error: error.message,\n                    stack: error.stack,\n                    barcode: barcode,\n                    barcodeType: barcodeType,\n                    timestamp: new Date().toISOString(),\n                }\n            );\n\n            // Enhanced error message handling\n            let errorMessage = 'Network or server error occurred. ';\n            let isKnownError = false;\n\n            // Check for specific Moodle error patterns\n            if (error.message && error.message.includes('invalidparameter')) {\n                errorMessage = 'Invalid barcode format provided to server.';\n                isKnownError = true;\n            } else if (\n                error.message &&\n                error.message.includes('nopermissions')\n            ) {\n                errorMessage = 'You do not have permission to remove items.';\n                isKnownError = true;\n            } else if (\n                error.message &&\n                error.message.includes('requireloggedin')\n            ) {\n                errorMessage = 'Please log in to remove items.';\n                isKnownError = true;\n            } else if (error.message && error.message.includes('webservice')) {\n                errorMessage = 'Web service error: ' + error.message;\n                isKnownError = true;\n            } else if (error.message && error.message.includes('network')) {\n                errorMessage =\n                    'Network connection error. Please check your connection.';\n                isKnownError = true;\n            }\n\n            // For unknown errors, show more detail in developer mode\n            if (!isKnownError) {\n                // Check if we're in developer mode by looking for debug indicators\n                const isDeveloperMode =\n                    document.body.classList.contains('debug') ||\n                    (window.M && window.M.cfg && window.M.cfg.developerdebug);\n\n                if (isDeveloperMode) {\n                    errorMessage =\n                        'Exception: ' +\n                        error.message +\n                        ' (Check browser console for details)';\n                } else {\n                    errorMessage +=\n                        'Please contact administrator if this persists.';\n                }\n            }\n\n            // Use Moodle's notification system for better error display\n            Notification.addNotification({\n                message: errorMessage,\n                type: 'error',\n            });\n\n            updateStatusMessage(errorMessage, 'danger');\n        }\n    }\n\n    /**\n     * Handle successful removal response.\n     * @param {Object} data Response data\n     */\n    function handleRemovalSuccess(data) {\n        // Update session tracking\n        sessionRemovedCount++;\n        sessionRemovedItems.push({\n            id: data.item_id,\n            uuid: data.uuid,\n            product_name: data.product_name,\n            removal_method: data.removal_method,\n        });\n\n        // Show success message\n        const message =\n            data.removal_method === 'emergency_upc'\n                ? `Emergency removal: ${data.product_name} (via UPC)`\n                : `Removed: ${data.product_name}`;\n\n        showSuccessMessage(message);\n        updateStatusMessage(\n            `Successfully removed item: ${data.product_name}`,\n            'success'\n        );\n\n        // Update session display\n        updateSessionDisplay();\n\n        // If this is an item details page, refresh the right column\n        if (data.redirect_url) {\n            // Optionally redirect or update the page\n            window.location.href = data.redirect_url;\n        }\n    }\n\n    /**\n     * Handle removal error response.\n     * @param {Object} data Response data\n     */\n    function handleRemovalError(data) {\n        let errorMessage = data.message || 'Removal failed';\n\n        // Handle specific error types\n        switch (data.error_code) {\n            case 'item_not_found':\n                errorMessage = `Equipment item not found: ${data.barcode}`;\n                break;\n            case 'already_removed':\n                errorMessage = `Item has already been removed: ${data.product_name}`;\n                break;\n            case 'upc_with_qr_exists':\n                errorMessage = `This item has a QR code. Please scan the QR code instead of the UPC barcode to remove it.`;\n                break;\n            case 'item_checked_out':\n                errorMessage = `Cannot remove item that is currently checked out to: ${data.current_user}`;\n                break;\n            case 'invalid_barcode_type':\n                errorMessage = `Invalid barcode format. Please scan a valid QR code or UPC barcode.`;\n                break;\n            default:\n                errorMessage = data.message || 'Unknown removal error occurred';\n        }\n\n        showErrorMessage(errorMessage);\n        updateStatusMessage(errorMessage, 'danger');\n\n        // If removal URL is provided, show link to manual removal\n        if (data.manual_removal_url) {\n            const alert = document.querySelector('.alert:last-child');\n            if (alert) {\n                alert.innerHTML += ` <a href=\"${data.manual_removal_url}\" class=\"alert-link\">Remove manually</a>`;\n            }\n        }\n    }\n\n    /**\n     * Update session display with removed items count.\n     */\n    function updateSessionDisplay() {\n        // Update any session counter elements\n        const sessionCounters = document.querySelectorAll(\n            '.session-removed-count'\n        );\n        sessionCounters.forEach((counter) => {\n            counter.textContent = sessionRemovedCount;\n        });\n\n        // Show session items if container exists\n        if (sessionItems && sessionRemovedCount > 0) {\n            let sessionHtml = `<h4>Session Removed Items (${sessionRemovedCount})</h4>`;\n            sessionHtml += '<ul class=\"list-group\">';\n\n            sessionRemovedItems.forEach((item) => {\n                const methodBadge =\n                    item.removal_method === 'emergency_upc'\n                        ? '<span class=\"badge bg-warning\">Emergency UPC</span>'\n                        : '<span class=\"badge bg-primary\">QR Code</span>';\n\n                sessionHtml += `\n                    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                        ${item.product_name} (${item.uuid})\n                        ${methodBadge}\n                    </li>\n                `;\n            });\n\n            sessionHtml += '</ul>';\n\n            // Only update if content has changed\n            if (sessionItems.innerHTML !== sessionHtml) {\n                sessionItems.innerHTML = sessionHtml;\n            }\n        }\n    }\n\n    /**\n     * Update status message in the UI.\n     * @param {string} message Status message to display\n     * @param {string} alertType Bootstrap alert type (info, success, warning, danger)\n     */\n    function updateStatusMessage(message, alertType = 'info') {\n        // Look for existing status message container\n        let statusContainer = document.getElementById('scanner-status-message');\n\n        if (!statusContainer) {\n            // Create status container if it doesn't exist\n            statusContainer = document.createElement('div');\n            statusContainer.id = 'scanner-status-message';\n            statusContainer.className = 'mt-3';\n\n            // Insert after scanner container\n            if (scannerContainer && scannerContainer.parentNode) {\n                scannerContainer.parentNode.insertBefore(\n                    statusContainer,\n                    scannerContainer.nextSibling\n                );\n            }\n        }\n\n        const alertClass = `alert alert-${alertType}`;\n        statusContainer.innerHTML = `\n            <div class=\"${alertClass}\">\n                <i class=\"fa fa-info-circle me-2\"></i>\n                ${message}\n            </div>\n        `;\n\n        // Auto-hide info messages after 5 seconds\n        if (alertType === 'info') {\n            setTimeout(() => {\n                if (statusContainer.innerHTML.includes(message)) {\n                    statusContainer.innerHTML = '';\n                }\n            }, 5000);\n        }\n    }\n\n    /**\n     * Show success message.\n     *\n     * @param {string} message Success message\n     */\n    function showSuccessMessage(message) {\n        const alert = document.createElement('div');\n        alert.className =\n            'alert alert-success alert-dismissible fade show mt-2';\n        alert.innerHTML = `\n            <strong>✓ Success!</strong> ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n\n        if (sessionItems) {\n            sessionItems.appendChild(alert);\n        } else {\n            // Fallback to scanner container\n            if (scannerContainer) {\n                scannerContainer.appendChild(alert);\n            }\n        }\n\n        // Auto-dismiss after 3 seconds\n        setTimeout(() => {\n            if (alert.parentNode) {\n                alert.remove();\n            }\n        }, 3000);\n    }\n\n    /**\n     * Show error message.\n     *\n     * @param {string} message Error message\n     * @param {string} actionUrl Action URL (optional)\n     */\n    function showErrorMessage(message, actionUrl = null) {\n        const alert = document.createElement('div');\n        alert.className = 'alert alert-danger alert-dismissible fade show mt-2';\n        let content = `<strong>✗ Error:</strong> ${message}`;\n        if (actionUrl) {\n            content += ` <a href=\"${actionUrl}\" class=\"alert-link\">Take action</a>`;\n        }\n        content += `<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>`;\n        alert.innerHTML = content;\n\n        if (sessionItems) {\n            sessionItems.appendChild(alert);\n        } else {\n            // Fallback to scanner container\n            if (scannerContainer) {\n                scannerContainer.appendChild(alert);\n            }\n        }\n    }\n\n    /**\n     * Test network connectivity to the server.\n     * @returns {Promise<boolean>} True if connectivity is working\n     */\n    async function testNetworkConnectivity() {\n        try {\n            const testUrl =\n                M.cfg.wwwroot +\n                '/local/equipment/classes/external/validate_removal.php';\n\n            Log.debug('Testing network connectivity to:', testUrl);\n\n            // Send a simple OPTIONS request to test connectivity\n            const response = await fetch(testUrl, {\n                method: 'OPTIONS',\n                headers: {\n                    Accept: 'application/json',\n                },\n            });\n\n            Log.debug('Network test response:', {\n                status: response.status,\n                ok: response.ok,\n                headers: Object.fromEntries(response.headers.entries()),\n            });\n\n            return response.ok;\n        } catch (error) {\n            Log.error('Network connectivity test failed:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Adds a network test button to the scanner controls interface.\n     */\n    function addNetworkTestButton() {\n        const scannerControls = document.querySelector('.scanner-controls');\n        if (scannerControls && !document.getElementById('test-network-btn')) {\n            const testButton = document.createElement('button');\n            testButton.id = 'test-network-btn';\n            testButton.type = 'button';\n            testButton.className = 'btn btn-outline-info btn-sm mt-2';\n            testButton.innerHTML = '<i class=\"fa fa-wifi\"></i> Test Network';\n\n            testButton.addEventListener('click', async function () {\n                const originalText = this.innerHTML;\n                this.disabled = true;\n                this.innerHTML =\n                    '<i class=\"fa fa-spinner fa-spin\"></i> Testing...';\n\n                const isConnected = await testNetworkConnectivity();\n\n                if (isConnected) {\n                    showSuccessMessage('Network connectivity test passed!');\n                } else {\n                    showErrorMessage(\n                        'Network connectivity test failed. Check your connection.'\n                    );\n                }\n\n                this.disabled = false;\n                this.innerHTML = originalText;\n            });\n\n            scannerControls.appendChild(testButton);\n        }\n    }\n\n    // Handle existing manual UUID input if present\n    if (lookupBtn) {\n        lookupBtn.addEventListener('click', function () {\n            const uuid = manualUuid.value.trim();\n            if (uuid) {\n                processBarcode(uuid, 'manual');\n                manualUuid.value = '';\n            }\n        });\n    }\n\n    // Allow Enter key in existing UUID input\n    if (manualUuid) {\n        manualUuid.addEventListener('keypress', function (e) {\n            if (e.key === 'Enter') {\n                lookupBtn.click();\n            }\n        });\n    }\n}\n"],"names":["initializeScanner","debug","scannerContainer","document","getElementById","manualUuid","lookupBtn","sessionItems","scanner","sessionRemovedCount","sessionRemovedItems","initScanner","error","innerHTML","controlsDiv","createElement","className","appendChild","UniversalScanner","containerId","resultCallback","handleScanResult","errorCallback","handleScanError","init","then","success","showFallbackInterface","startBtn","stopBtn","scanBtn","flipBtn","manualInput","manualBtn","isScanning","scanTimeout","isMirrored","updateVideoMirror","videoElement","querySelector","style","transform","performSingleScan","Promise","resolve","scanAttempts","maxAttempts","found","scanFrame","async","video","readyState","HAVE_ENOUGH_DATA","requestAnimationFrame","context","drawImage","canvas","width","height","hasBarcodeDetector","detector","BarcodeDetector","formats","barcodes","detect","length","barcode","rawValue","format","processBarcode","imageData","getImageData","code","jsQR","scan","data","addEventListener","stream","getCameraStreamRobust","srcObject","play","videoWidth","videoHeight","updateStatus","disabled","display","updateStatusMessage","compatibility","checkCameraCompatibility","supported","addNotification","message","type","showDetailedCompatibilityError","getTracks","forEach","track","stop","clearTimeout","icon","text","showSuccessMessage","showScanSuccess","showErrorMessage","setTimeout","value","trim","e","key","click","fileInput","processFileBtn","this","files","file","originalText","reject","reader","FileReader","onload","img","Image","getContext","willReadFrequently","window","onerror","Error","src","target","result","readAsDataURL","processImageFile","setupFileUpload","setupScannerControls","scannerControls","testButton","id","testUrl","M","cfg","wwwroot","response","fetch","method","headers","Accept","status","ok","Object","fromEntries","entries","testNetworkConnectivity","addNetworkTestButton","barcodeData","barcode_data","errorCode","isMobile","test","navigator","userAgent","isHTTP","location","protocol","content","origin","testBtn","testCameraAccess","fileUploadSection","errorMessage","name","issues","browserInfo","getBrowserInfo","apis","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","hostname","push","mobile","ua","chrome","firefox","safari","edge","version","android","ios","match","parseInt","constraints","facingMode","ideal","keys","api","issue","determineBarcodeType","barcodeType","processingBtn","textContent","processRemoval","finally","timestamp","Date","toISOString","request","methodname","args","Ajax","call","responseType","stringified","JSON","stringify","dataType","fullResponse","dataObject","dataKeys","dataValues","values","hasSuccessProperty","successValue","successType","hasMessageProperty","messageValue","hasErrorProperty","errorValue","hasErrorCodeProperty","errorCodeValue","error_code","hasExceptionProperty","exceptionValue","exception","responseAsString","item_id","uuid","product_name","removal_method","querySelectorAll","counter","sessionHtml","item","methodBadge","updateSessionDisplay","redirect_url","href","handleRemovalSuccess","handleRemovalError","Barcode","Function","getOwnPropertyNames","join","debugInfo","debuginfo","debug_info","stack","isKnownError","includes","body","classList","contains","developerdebug","current_user","manual_removal_url","alert","alertType","statusContainer","parentNode","insertBefore","nextSibling","alertClass","remove","actionUrl"],"mappings":"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"}