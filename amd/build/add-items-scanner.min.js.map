{"version":3,"file":"add-items-scanner.min.js","sources":["../src/add-items-scanner.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Scanner integration for add items page.\n *\n * @module     local_equipment/add-items-scanner\n * @copyright  2024 onwards Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport UniversalScanner from 'local_equipment/universal-scanner';\nimport Notification from 'core/notification';\nimport Log from 'core/log';\nimport jsQR from 'local_equipment/jsqr';\n\n/**\n * Initialize the scanner for add items page.\n */\nexport const init = () => {\n    Log.debug('local_equipment/add-items-scanner: init() called');\n    Log.debug(\n        'local_equipment/add-items-scanner: document.readyState =',\n        document.readyState\n    );\n\n    // Check if DOM is already ready\n    if (document.readyState === 'loading') {\n        // DOM is still loading, wait for DOMContentLoaded\n        Log.debug(\n            'local_equipment/add-items-scanner: DOM still loading, adding DOMContentLoaded listener'\n        );\n        document.addEventListener('DOMContentLoaded', function () {\n            Log.debug(\n                'local_equipment/add-items-scanner: DOMContentLoaded event fired'\n            );\n            initializeScanner();\n        });\n    } else {\n        // DOM is already ready, initialize immediately\n        Log.debug(\n            'local_equipment/add-items-scanner: DOM already ready, initializing immediately'\n        );\n        initializeScanner();\n    }\n};\n\n/**\n * Initialize the scanner interface.\n */\nfunction initializeScanner() {\n    Log.debug('local_equipment/add-items-scanner: initializeScanner() called');\n\n    // First, replace the \"Initializing scanner...\" message\n    const scannerInterface = document.getElementById('scanner_interface');\n    Log.debug(\n        'local_equipment/add-items-scanner: scannerInterface element found:',\n        !!scannerInterface\n    );\n\n    if (scannerInterface) {\n        Log.debug(\n            'local_equipment/add-items-scanner: Replacing scanner interface HTML'\n        );\n        scannerInterface.innerHTML = `\n            <div class=\"alert alert-info text-center\">\n                <i class=\"fa fa-info-circle\"></i>\n                <strong>Scanner Ready</strong><br>\n                Please select a storage location above to begin scanning.\n            </div>\n        `;\n        Log.debug(\n            'local_equipment/add-items-scanner: Scanner interface HTML updated successfully'\n        );\n    } else {\n        Log.error(\n            'local_equipment/add-items-scanner: scanner_interface element not found in DOM'\n        );\n    }\n    const locationSelect = document.getElementById('location_select');\n    const manualUpc = document.getElementById('manual_upc');\n    const addItemBtn = document.getElementById('add_item_btn');\n    const sessionCount = document.getElementById('session_count');\n    const sessionItems = document.getElementById('session_items');\n    const printQrBtn = document.getElementById('print_qr_btn');\n    const scannerCard = document.getElementById('scanner_card');\n    const sessionSummary = document.getElementById('session_summary');\n\n    let scanner = null;\n    let sessionItemCount = 0;\n    let sessionItemIds = [];\n\n    // Enable scanner when location is selected\n    locationSelect.addEventListener('change', function () {\n        if (this.value) {\n            scannerCard.style.display = 'block';\n            sessionSummary.style.display = 'block';\n            manualUpc.disabled = false;\n            addItemBtn.disabled = false;\n\n            // Initialize scanner\n            initScanner();\n\n            // Reset session when location changes\n            sessionItemCount = 0;\n            sessionItemIds = [];\n            updateSessionDisplay();\n        } else {\n            scannerCard.style.display = 'none';\n            sessionSummary.style.display = 'none';\n            manualUpc.disabled = true;\n            addItemBtn.disabled = true;\n\n            // Destroy scanner\n            if (scanner) {\n                scanner.destroy();\n                scanner = null;\n            }\n        }\n    });\n\n    /**\n     * Initialize the scanner interface.\n     */\n    function initScanner() {\n        // Clear existing scanner interface\n        scannerInterface.innerHTML = '';\n\n        // Create scanner container\n        const scannerContainer = document.createElement('div');\n        scannerContainer.id = 'scanner-container';\n        scannerContainer.className = 'scanner-container mb-3';\n        scannerInterface.appendChild(scannerContainer);\n\n        // Create scanner controls\n        const controlsDiv = document.createElement('div');\n        controlsDiv.className = 'scanner-controls';\n        controlsDiv.innerHTML = `\n            <div class=\"scanner-toggle mb-3\">\n                <div class=\"btn-group\" role=\"group\">\n                    <button type=\"button\" id=\"start-camera-btn\" class=\"btn btn-primary\">\n                        <i class=\"fa fa-camera\"></i> Start Camera\n                    </button>\n                    <button type=\"button\" id=\"stop-camera-btn\" class=\"btn btn-secondary\" disabled>\n                        <i class=\"fa fa-stop\"></i> Stop Camera\n                    </button>\n                </div>\n                <div class=\"mt-2\">\n                    <button type=\"button\" id=\"scan-barcode-btn\" class=\"btn btn-success\" style=\"display: none;\">\n                        <i class=\"fa fa-qrcode\"></i> Scan\n                    </button>\n                    <button type=\"button\" id=\"flip-camera-btn\" class=\"btn btn-outline-secondary btn-sm ms-2\" style=\"display: none;\"\n                        title=\"Toggle camera mirror\">\n                        <i class=\"fa fa-arrows-h\"></i> Flip\n                    </button>\n                </div>\n            </div>\n            <div class=\"file-upload-section mb-3\" style=\"display: none;\" id=\"file-upload-section\">\n                <label for=\"barcode-file-input\" class=\"form-label\">\n                    <i class=\"fa fa-camera\"></i> Take Photo of Barcode:\n                </label>\n                <div class=\"input-group\">\n                    <input type=\"file\" id=\"barcode-file-input\" class=\"form-control\" accept=\"image/*\" capture=\"environment\">\n                    <button type=\"button\" id=\"process-file-btn\" class=\"btn btn-outline-success\" disabled>\n                        <i class=\"fa fa-search\"></i> Scan Photo\n                    </button>\n                </div>\n                <small class=\"form-text text-muted\">\n                    Take a clear photo of the barcode with good lighting\n                </small>\n            </div>\n            <div class=\"manual-input\">\n                <label for=\"scanner-manual-input\" class=\"form-label\">Or enter barcode manually:</label>\n                <div class=\"input-group\">\n                    <input type=\"text\" id=\"scanner-manual-input\" class=\"form-control\" placeholder=\"Scan or type barcode...\">\n                    <button type=\"button\" id=\"scanner-manual-btn\" class=\"btn btn-outline-primary\">Process</button>\n                </div>\n            </div>\n        `;\n        scannerInterface.appendChild(controlsDiv);\n\n        // Initialize scanner instance\n        scanner = new UniversalScanner({\n            containerId: 'scanner-container',\n            resultCallback: handleScanResult,\n            errorCallback: handleScanError,\n        });\n\n        // Initialize scanner\n        scanner.init().then((success) => {\n            if (success) {\n                Log.debug('Scanner initialized successfully');\n            } else {\n                Log.error('Scanner initialization failed');\n                showFallbackInterface();\n            }\n        });\n\n        // Set up control buttons\n        setupScannerControls();\n\n        // Add network test button\n        addNetworkTestButton();\n    }\n\n    /**\n     * Set up scanner control buttons.\n     */\n    function setupScannerControls() {\n        const startBtn = document.getElementById('start-camera-btn');\n        const stopBtn = document.getElementById('stop-camera-btn');\n        const scanBtn = document.getElementById('scan-barcode-btn');\n        const flipBtn = document.getElementById('flip-camera-btn');\n        const manualInput = document.getElementById('scanner-manual-input');\n        const manualBtn = document.getElementById('scanner-manual-btn');\n\n        let isScanning = false;\n        let scanTimeout = null;\n        let isMirrored = false; // Default to mirrored (good for webcams)\n\n        startBtn.addEventListener('click', async () => {\n            try {\n                // Use robust camera detection\n                scanner.stream = await getCameraStreamRobust();\n\n                scanner.video.srcObject = scanner.stream;\n                await scanner.video.play();\n\n                // Set canvas dimensions to match video\n                scanner.canvas.width = scanner.video.videoWidth;\n                scanner.canvas.height = scanner.video.videoHeight;\n\n                scanner.updateStatus(\n                    'Camera ready - click Scan to detect barcode'\n                );\n\n                startBtn.disabled = true;\n                stopBtn.disabled = false;\n                scanBtn.style.display = 'inline-block';\n                flipBtn.style.display = 'inline-block';\n\n                // Apply initial mirror state\n                updateVideoMirror();\n            } catch (error) {\n                Log.error('Failed to start camera:', error);\n\n                // Show detailed error information\n                const compatibility = await checkCameraCompatibility();\n                if (!compatibility.supported) {\n                    showDetailedCompatibilityError(compatibility);\n                } else {\n                    Notification.addNotification({\n                        message: 'Failed to start camera: ' + error.message,\n                        type: 'error',\n                    });\n                }\n            }\n        });\n\n        stopBtn.addEventListener('click', () => {\n            // Stop camera and hide scan button\n            if (scanner.stream) {\n                scanner.stream.getTracks().forEach((track) => track.stop());\n                scanner.stream = null;\n            }\n            if (scanner.video) {\n                scanner.video.srcObject = null;\n            }\n\n            scanner.updateStatus('Camera stopped');\n            startBtn.disabled = false;\n            stopBtn.disabled = true;\n            scanBtn.style.display = 'none';\n            flipBtn.style.display = 'none';\n\n            // Clear any active scanning\n            if (scanTimeout) {\n                clearTimeout(scanTimeout);\n                scanTimeout = null;\n            }\n            isScanning = false;\n        });\n\n        // Flip camera button - toggles horizontal mirror\n        flipBtn.addEventListener('click', () => {\n            isMirrored = !isMirrored;\n            updateVideoMirror();\n\n            // Update button text to show current state\n            const icon = isMirrored ? 'fa-arrows-h' : 'fa-arrows-h';\n            const text = isMirrored ? 'Flip (Mirrored)' : 'Flip (Normal)';\n            flipBtn.innerHTML = `<i class=\"fa ${icon}\"></i> ${text}`;\n\n            // Show feedback message\n            const message = isMirrored\n                ? 'Camera mirrored (good for webcams)'\n                : 'Camera normal (good for mobile)';\n            showSuccessMessage(message);\n        });\n\n        /**\n         * Update video mirror state based on isMirrored flag.\n         */\n        function updateVideoMirror() {\n            // Find the video element in the scanner container\n            const videoElement = document.querySelector(\n                '#scanner-container video'\n            );\n\n            if (videoElement) {\n                // Apply transform directly via inline style (more reliable)\n                if (isMirrored) {\n                    videoElement.style.transform = 'scaleX(-1)';\n                } else {\n                    videoElement.style.transform = 'scaleX(1)';\n                }\n\n                Log.debug(\n                    'Video mirror updated:',\n                    isMirrored ? 'mirrored (scaleX(-1))' : 'normal (scaleX(1))',\n                    'Video element found:',\n                    !!videoElement,\n                    'Applied transform:',\n                    videoElement.style.transform\n                );\n            } else {\n                Log.error('Video element not found for mirror update');\n            }\n        }\n\n        // Scan button - triggers 1-second scan window\n        scanBtn.addEventListener('click', async () => {\n            if (isScanning) {\n                return;\n            }\n\n            isScanning = true;\n            scanBtn.disabled = true;\n            scanBtn.innerHTML =\n                '<i class=\"fa fa-spinner fa-spin\"></i> Scanning...';\n            scanner.updateStatus('Scanning for barcode...');\n\n            try {\n                const result = await performSingleScan();\n                if (result) {\n                    // Barcode found and processed\n                    scanner.updateStatus('Scan successful!');\n                    scanner.showScanSuccess();\n                } else {\n                    // No barcode found\n                    scanner.updateStatus('No barcode detected - try again');\n                    showErrorMessage(\n                        'No barcode detected. Please position the barcode in the target area and try again.'\n                    );\n                }\n            } catch (error) {\n                Log.error('Scan error:', error);\n                scanner.updateStatus('Scan failed');\n                showErrorMessage('Scan failed. Please try again.');\n            }\n\n            // Reset button state\n            isScanning = false;\n            scanBtn.disabled = false;\n            scanBtn.innerHTML = '<i class=\"fa fa-qrcode\"></i> Scan';\n\n            // Reset status after a delay\n            setTimeout(() => {\n                scanner.updateStatus(\n                    'Ready to scan - position barcode and click Scan'\n                );\n            }, 2000);\n        });\n\n        /**\n         * Perform a single 1-second scan attempt.\n         * @returns {Promise<boolean>} True if barcode was found and processed\n         */\n        async function performSingleScan() {\n            return new Promise((resolve) => {\n                let scanAttempts = 0;\n                const maxAttempts = 30; // ~1 second at 30fps\n                let found = false;\n\n                const scanFrame = async () => {\n                    if (found || scanAttempts >= maxAttempts) {\n                        resolve(found);\n                        return;\n                    }\n\n                    try {\n                        // Check if video is ready\n                        if (\n                            !scanner.video ||\n                            scanner.video.readyState !==\n                                scanner.video.HAVE_ENOUGH_DATA\n                        ) {\n                            scanAttempts++;\n                            requestAnimationFrame(scanFrame);\n                            return;\n                        }\n\n                        // Draw current frame to canvas\n                        scanner.context.drawImage(\n                            scanner.video,\n                            0,\n                            0,\n                            scanner.canvas.width,\n                            scanner.canvas.height\n                        );\n\n                        // Try native BarcodeDetector first (Chrome/Edge)\n                        if (scanner.hasBarcodeDetector) {\n                            try {\n                                // eslint-disable-next-line no-undef\n                                const detector = new BarcodeDetector({\n                                    formats: [\n                                        'qr_code',\n                                        'ean_13',\n                                        'ean_8',\n                                        'upc_a',\n                                        'upc_e',\n                                        'code_128',\n                                        'code_39',\n                                    ],\n                                });\n\n                                const barcodes = await detector.detect(\n                                    scanner.canvas\n                                );\n\n                                if (barcodes.length > 0) {\n                                    const barcode = barcodes[0];\n                                    Log.debug(\n                                        'Barcode detected:',\n                                        barcode.rawValue,\n                                        barcode.format\n                                    );\n                                    processBarcode(barcode.rawValue);\n                                    found = true;\n                                    resolve(true);\n                                    return;\n                                }\n                            } catch (error) {\n                                Log.debug('BarcodeDetector failed:', error);\n                            }\n                        }\n\n                        // Fallback: Try QR code detection\n                        try {\n                            const imageData = scanner.context.getImageData(\n                                0,\n                                0,\n                                scanner.canvas.width,\n                                scanner.canvas.height\n                            );\n\n                            // Use jsQR library for QR code detection\n                            const code = jsQR.scan(\n                                imageData.data,\n                                imageData.width,\n                                imageData.height\n                            );\n\n                            if (code && code.data) {\n                                Log.debug('QR code detected:', code.data);\n                                processBarcode(code.data);\n                                found = true;\n                                resolve(true);\n                                return;\n                            }\n                        } catch (error) {\n                            Log.debug('QR detection failed:', error);\n                        }\n                    } catch (error) {\n                        Log.debug('Frame processing error:', error);\n                    }\n\n                    scanAttempts++;\n                    requestAnimationFrame(scanFrame);\n                };\n\n                // Start scanning\n                requestAnimationFrame(scanFrame);\n            });\n        }\n\n        // Manual input handling\n        manualBtn.addEventListener('click', () => {\n            const barcode = manualInput.value.trim();\n            if (barcode) {\n                processBarcode(barcode);\n                manualInput.value = '';\n            }\n        });\n\n        manualInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                manualBtn.click();\n            }\n        });\n    }\n\n    /**\n     * Handle scan result from scanner.\n     *\n     * @param {Object} result Scan result\n     */\n    function handleScanResult(result) {\n        if (result.success && result.data) {\n            // Extract barcode data from the scan result\n            const barcodeData = result.data.barcode_data || result.data;\n            Log.debug('Scan successful, processing barcode:', barcodeData);\n            processBarcode(barcodeData);\n        } else {\n            Log.error('Scan failed:', result);\n            // Show error message to user\n            const errorMsg = result.message || 'Scan failed. Please try again.';\n            showErrorMessage(errorMsg);\n        }\n    }\n\n    /**\n     * Handle scan error from scanner.\n     *\n     * @param {string} errorCode Error code\n     * @param {string} message Error message\n     */\n    function handleScanError(errorCode, message) {\n        Log.error('Scanner error:', errorCode, message);\n\n        if (errorCode === 'camera_access_failed') {\n            showFallbackInterface();\n        }\n    }\n\n    /**\n     * Show fallback interface when camera is not available.\n     */\n    function showFallbackInterface() {\n        const scannerContainer = document.getElementById('scanner-container');\n        if (scannerContainer) {\n            const isMobile =\n                /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n                    navigator.userAgent\n                );\n            const isHTTP = window.location.protocol === 'http:';\n\n            let content = '';\n\n            if (isMobile && isHTTP) {\n                // Mobile + HTTP specific guidance\n                content = `\n                    <div class=\"alert alert-info\">\n                        <h5><i class=\"fa fa-mobile\"></i> Mobile Camera Setup Required</h5>\n                        <p><strong>To enable camera scanning on mobile:</strong></p>\n                        <ol class=\"text-start mb-3\">\n                            <li>Open Chrome menu (⋮) → <strong>Settings</strong></li>\n                            <li>Go to <strong>Site Settings</strong> → <strong>Camera</strong></li>\n                            <li>Find this site and set to <strong>\"Allow\"</strong></li>\n                        </ol>\n                        <p><strong>Alternative:</strong> In Chrome address bar, type:<br>\n                        <code>chrome://flags/#unsafely-treat-insecure-origin-as-secure</code><br>\n                        Add: <code>${window.location.origin}</code></p>\n                        <button type=\"button\" id=\"test-camera-btn\" class=\"btn btn-primary btn-sm mt-2\">\n                            <i class=\"fa fa-camera\"></i> Test Camera Access\n                        </button>\n                    </div>\n                `;\n            } else if (isMobile) {\n                // Mobile + HTTPS\n                content = `\n                    <div class=\"alert alert-warning text-center\">\n                        <i class=\"fa fa-mobile\"></i>\n                        <strong>Camera access denied</strong><br>\n                        Please check your browser settings and allow camera access for this site.\n                        <button type=\"button\" id=\"test-camera-btn\" class=\"btn btn-primary btn-sm mt-2\">\n                            <i class=\"fa fa-camera\"></i> Test Camera Access\n                        </button>\n                    </div>\n                `;\n            } else {\n                // Desktop fallback\n                content = `\n                    <div class=\"alert alert-warning text-center\">\n                        <i class=\"fa fa-exclamation-triangle\"></i>\n                        <strong>Camera not available</strong><br>\n                        Please use the manual input below to enter barcodes.\n                    </div>\n                `;\n            }\n\n            scannerContainer.innerHTML = content;\n\n            // Add test camera button functionality\n            const testBtn = document.getElementById('test-camera-btn');\n            if (testBtn) {\n                testBtn.addEventListener('click', testCameraAccess);\n            }\n\n            // Show file upload option for mobile users\n            if (isMobile) {\n                const fileUploadSection = document.getElementById(\n                    'file-upload-section'\n                );\n                if (fileUploadSection) {\n                    fileUploadSection.style.display = 'block';\n                    setupFileUpload();\n                }\n            }\n        }\n    }\n\n    /**\n     * Set up file upload functionality for mobile users.\n     */\n    function setupFileUpload() {\n        const fileInput = document.getElementById('barcode-file-input');\n        const processFileBtn = document.getElementById('process-file-btn');\n\n        if (!fileInput || !processFileBtn) {\n            return;\n        }\n\n        // Enable process button when file is selected\n        fileInput.addEventListener('change', function () {\n            processFileBtn.disabled = !this.files.length;\n        });\n\n        // Process uploaded file\n        processFileBtn.addEventListener('click', async function () {\n            const file = fileInput.files[0];\n            if (!file) {\n                return;\n            }\n\n            const originalText = this.innerHTML;\n            this.disabled = true;\n            this.innerHTML =\n                '<i class=\"fa fa-spinner fa-spin\"></i> Scanning Photo...';\n\n            try {\n                const barcode = await processImageFile(file);\n                if (barcode) {\n                    showSuccessMessage('Barcode detected from photo!');\n                    processBarcode(barcode);\n                    // Clear the file input\n                    fileInput.value = '';\n                } else {\n                    showErrorMessage(\n                        'No barcode found in the image. Please try taking a clearer photo with better lighting.'\n                    );\n                }\n            } catch (error) {\n                Log.error('File processing error:', error);\n                showErrorMessage('Failed to process image. Please try again.');\n            }\n\n            this.disabled = false;\n            this.innerHTML = originalText;\n            processFileBtn.disabled = true; // Disable until new file selected\n        });\n    }\n\n    /**\n     * Process an uploaded image file for barcodes.\n     * @param {File} file Image file\n     * @returns {Promise<string|null>} Detected barcode or null\n     */\n    async function processImageFile(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onload = function (e) {\n                const img = new Image();\n\n                img.onload = async function () {\n                    try {\n                        // Create a temporary canvas for processing\n                        const canvas = document.createElement('canvas');\n                        const context = canvas.getContext('2d', {\n                            willReadFrequently: true,\n                        });\n\n                        // Set canvas size to image size\n                        canvas.width = img.width;\n                        canvas.height = img.height;\n\n                        // Draw image to canvas\n                        context.drawImage(img, 0, 0);\n\n                        // Try native BarcodeDetector first (Chrome/Edge)\n                        if ('BarcodeDetector' in window) {\n                            try {\n                                // eslint-disable-next-line no-undef\n                                const detector = new BarcodeDetector({\n                                    formats: [\n                                        'qr_code',\n                                        'ean_13',\n                                        'ean_8',\n                                        'upc_a',\n                                        'upc_e',\n                                        'code_128',\n                                        'code_39',\n                                    ],\n                                });\n\n                                const barcodes = await detector.detect(canvas);\n\n                                if (barcodes.length > 0) {\n                                    Log.debug(\n                                        'Barcode detected from file:',\n                                        barcodes[0].rawValue\n                                    );\n                                    resolve(barcodes[0].rawValue);\n                                    return;\n                                }\n                            } catch (error) {\n                                Log.debug(\n                                    'BarcodeDetector failed on file:',\n                                    error\n                                );\n                            }\n                        }\n\n                        // Fallback: Try QR code detection with jsQR\n                        try {\n                            const imageData = context.getImageData(\n                                0,\n                                0,\n                                canvas.width,\n                                canvas.height\n                            );\n                            const code = jsQR.scan(\n                                imageData.data,\n                                imageData.width,\n                                imageData.height\n                            );\n\n                            if (code && code.data) {\n                                Log.debug(\n                                    'QR code detected from file:',\n                                    code.data\n                                );\n                                resolve(code.data);\n                                return;\n                            }\n                        } catch (error) {\n                            Log.debug('jsQR failed on file:', error);\n                        }\n\n                        // No barcode found\n                        resolve(null);\n                    } catch (error) {\n                        reject(error);\n                    }\n                };\n\n                img.onerror = function () {\n                    reject(new Error('Failed to load image'));\n                };\n\n                img.src = e.target.result;\n            };\n\n            reader.onerror = function () {\n                reject(new Error('Failed to read file'));\n            };\n\n            reader.readAsDataURL(file);\n        });\n    }\n\n    /**\n     * Test camera access with comprehensive compatibility checking.\n     */\n    async function testCameraAccess() {\n        const testBtn = document.getElementById('test-camera-btn');\n        const originalText = testBtn.innerHTML;\n\n        testBtn.disabled = true;\n        testBtn.innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i> Testing...';\n\n        // First, run comprehensive compatibility check\n        const compatibility = await checkCameraCompatibility();\n\n        if (!compatibility.supported) {\n            showDetailedCompatibilityError(compatibility);\n            testBtn.disabled = false;\n            testBtn.innerHTML = originalText;\n            return;\n        }\n\n        // Try to access camera using the best available method\n        try {\n            const stream = await getCameraStreamRobust();\n\n            // Success! Camera access granted\n            stream.getTracks().forEach((track) => track.stop());\n\n            showSuccessMessage(\n                'Camera access granted! You can now use the Start Camera button.'\n            );\n\n            // Re-initialize scanner interface\n            initScanner();\n        } catch (error) {\n            // Provide specific error guidance\n            let errorMessage = 'Camera access failed. ';\n\n            if (error.name === 'NotAllowedError') {\n                errorMessage +=\n                    'Please allow camera permissions in your browser settings.';\n            } else if (error.name === 'NotFoundError') {\n                errorMessage += 'No camera found on this device.';\n            } else if (error.name === 'NotSupportedError') {\n                errorMessage += 'Camera not supported on this browser/device.';\n            } else if (error.name === 'NotReadableError') {\n                errorMessage += 'Camera is being used by another application.';\n            } else {\n                errorMessage += `Error: ${error.message}`;\n            }\n\n            showErrorMessage(errorMessage);\n\n            testBtn.disabled = false;\n            testBtn.innerHTML = originalText;\n        }\n    }\n\n    /**\n     * Comprehensive camera compatibility check.\n     * @returns {Promise<Object>} Compatibility information\n     */\n    async function checkCameraCompatibility() {\n        const result = {\n            supported: false,\n            method: null,\n            issues: [],\n            browserInfo: getBrowserInfo(),\n            apis: {\n                mediaDevices: false,\n                getUserMedia: false,\n                webkitGetUserMedia: false,\n                mozGetUserMedia: false,\n            },\n        };\n\n        Log.debug('Browser info:', result.browserInfo);\n\n        // Check for modern MediaDevices API\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            result.apis.mediaDevices = true;\n            result.method = 'mediaDevices';\n            result.supported = true;\n        }\n\n        // Check for legacy getUserMedia\n        if (navigator.getUserMedia) {\n            result.apis.getUserMedia = true;\n            if (!result.supported) {\n                result.method = 'getUserMedia';\n                result.supported = true;\n            }\n        }\n\n        // Check for webkit prefixed version (older Chrome/Safari)\n        if (navigator.webkitGetUserMedia) {\n            result.apis.webkitGetUserMedia = true;\n            if (!result.supported) {\n                result.method = 'webkitGetUserMedia';\n                result.supported = true;\n            }\n        }\n\n        // Check for moz prefixed version (older Firefox)\n        if (navigator.mozGetUserMedia) {\n            result.apis.mozGetUserMedia = true;\n            if (!result.supported) {\n                result.method = 'mozGetUserMedia';\n                result.supported = true;\n            }\n        }\n\n        // Check for HTTPS/secure context\n        if (\n            location.protocol !== 'https:' &&\n            location.hostname !== 'localhost'\n        ) {\n            result.issues.push('insecure_context');\n        }\n\n        // Check if we're in a mobile browser\n        if (result.browserInfo.mobile && !result.supported) {\n            result.issues.push('mobile_no_camera_api');\n        }\n\n        Log.debug('Camera compatibility check:', result);\n        return result;\n    }\n\n    /**\n     * Get detailed browser information.\n     * @returns {Object} Browser information\n     */\n    function getBrowserInfo() {\n        const ua = navigator.userAgent;\n        const result = {\n            mobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n                ua\n            ),\n            chrome: /Chrome/i.test(ua),\n            firefox: /Firefox/i.test(ua),\n            safari: /Safari/i.test(ua) && !/Chrome/i.test(ua),\n            edge: /Edge/i.test(ua),\n            version: null,\n            android: /Android/i.test(ua),\n            ios: /iPhone|iPad|iPod/i.test(ua),\n        };\n\n        // Extract Chrome version\n        if (result.chrome) {\n            const match = ua.match(/Chrome\\/(\\d+)/);\n            if (match) {\n                result.version = parseInt(match[1]);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Robust camera stream acquisition with fallbacks.\n     * @returns {Promise<MediaStream>} Camera stream\n     */\n    async function getCameraStreamRobust() {\n        const constraints = {\n            video: {\n                facingMode: 'environment',\n                width: { ideal: 1280 },\n                height: { ideal: 720 },\n            },\n        };\n\n        // Try modern API first\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            try {\n                Log.debug('Trying modern mediaDevices.getUserMedia');\n                return await navigator.mediaDevices.getUserMedia(constraints);\n            } catch (error) {\n                Log.debug('Modern API failed:', error);\n                // Continue to fallbacks\n            }\n        }\n\n        // Try legacy getUserMedia with Promise wrapper\n        if (navigator.getUserMedia) {\n            try {\n                Log.debug('Trying legacy getUserMedia');\n                return await new Promise((resolve, reject) => {\n                    navigator.getUserMedia(constraints, resolve, reject);\n                });\n            } catch (error) {\n                Log.debug('Legacy getUserMedia failed:', error);\n            }\n        }\n\n        // Try webkit prefixed version\n        if (navigator.webkitGetUserMedia) {\n            try {\n                Log.debug('Trying webkitGetUserMedia');\n                return await new Promise((resolve, reject) => {\n                    navigator.webkitGetUserMedia(constraints, resolve, reject);\n                });\n            } catch (error) {\n                Log.debug('webkitGetUserMedia failed:', error);\n            }\n        }\n\n        // Try moz prefixed version\n        if (navigator.mozGetUserMedia) {\n            try {\n                Log.debug('Trying mozGetUserMedia');\n                return await new Promise((resolve, reject) => {\n                    navigator.mozGetUserMedia(constraints, resolve, reject);\n                });\n            } catch (error) {\n                Log.debug('mozGetUserMedia failed:', error);\n            }\n        }\n\n        throw new Error('No camera API available');\n    }\n\n    /**\n     * Show detailed compatibility error with specific guidance.\n     * @param {Object} compatibility Compatibility check result\n     */\n    function showDetailedCompatibilityError(compatibility) {\n        let message =\n            '<div class=\"alert alert-danger\"><h5><i class=\"fa fa-exclamation-triangle\"></i> Camera Not Supported</h5>';\n\n        message +=\n            '<p><strong>Browser:</strong> ' + compatibility.browserInfo.chrome\n                ? `Chrome ${compatibility.browserInfo.version || 'Unknown'}`\n                : 'Unknown browser';\n\n        message +=\n            '<br><strong>Mobile:</strong> ' +\n            (compatibility.browserInfo.mobile ? 'Yes' : 'No');\n        message +=\n            '<br><strong>Secure Context:</strong> ' +\n            (location.protocol === 'https:' ? 'Yes' : 'No') +\n            '</p>';\n\n        message += '<p><strong>Available APIs:</strong></p><ul>';\n        Object.keys(compatibility.apis).forEach((api) => {\n            message += `<li>${api}: ${\n                compatibility.apis[api] ? '✓' : '✗'\n            }</li>`;\n        });\n        message += '</ul>';\n\n        if (compatibility.issues.length > 0) {\n            message += '<p><strong>Issues Found:</strong></p><ul>';\n            compatibility.issues.forEach((issue) => {\n                switch (issue) {\n                    case 'insecure_context':\n                        message +=\n                            '<li>Site is not served over HTTPS (required for camera access)</li>';\n                        break;\n                    case 'mobile_no_camera_api':\n                        message +=\n                            '<li>Mobile browser does not support camera API</li>';\n                        break;\n                }\n            });\n            message += '</ul>';\n        }\n\n        // Specific guidance based on browser\n        if (\n            compatibility.browserInfo.chrome &&\n            compatibility.browserInfo.mobile\n        ) {\n            message +=\n                '<div class=\"mt-3\"><strong>Chrome Mobile Solutions:</strong>';\n            message += '<ol>';\n            message += '<li>Ensure Chrome is updated to latest version</li>';\n            message += '<li>Try clearing Chrome cache and data</li>';\n            message +=\n                '<li>Check if \"Use camera\" is enabled in Chrome settings</li>';\n            message += '<li>Try accessing via Chrome Incognito mode</li>';\n            message += '</ol></div>';\n        }\n\n        message += '</div>';\n\n        const scannerContainer = document.getElementById('scanner-container');\n        if (scannerContainer) {\n            scannerContainer.innerHTML = message;\n        }\n    }\n\n    /**\n     * Normalize UPC code to standard 12-digit format (client-side).\n     * @param {string} upc Raw UPC code\n     * @returns {string|null} Normalized UPC or null if invalid\n     */\n    function normalizeUPC(upc) {\n        // Remove any non-numeric characters\n        upc = upc.replace(/[^0-9]/g, '');\n\n        // Check if it's a valid length (8-14 digits)\n        const length = upc.length;\n        if (length < 8 || length > 14) {\n            return null;\n        }\n\n        // Handle different UPC formats\n        switch (length) {\n            case 8:\n                // UPC-E format - pad to 12 digits\n                return upc.padStart(12, '0');\n\n            case 12:\n                // UPC-A format - this is our target format\n                return upc;\n\n            case 13:\n                // EAN-13 format - remove leading zero if it's 0\n                if (upc.charAt(0) === '0') {\n                    return upc.substring(1);\n                }\n                // Non-US EAN code - keep as-is\n                return upc;\n\n            case 14:\n                // GTIN-14 format - remove leading zeros\n                return upc.replace(/^0+/, '');\n\n            default:\n                // 9, 10, 11 digits - pad to 12\n                return upc.padStart(12, '0');\n        }\n    }\n\n    /**\n     * Process a barcode (from scan or manual entry).\n     *\n     * @param {string} barcode Barcode data\n     */\n    function processBarcode(barcode) {\n        const locationId = locationSelect.value;\n        if (!locationId) {\n            Notification.addNotification({\n                message: 'Please select a location first',\n                type: 'error',\n            });\n            return;\n        }\n\n        // Normalize UPC on client side for immediate feedback\n        const originalBarcode = barcode;\n        const normalizedBarcode = normalizeUPC(barcode);\n\n        if (!normalizedBarcode) {\n            showErrorMessage(\n                `Invalid UPC format: \"${originalBarcode}\". UPC must be 8-14 digits.`\n            );\n            return;\n        }\n\n        // Log normalization for debugging\n        if (originalBarcode !== normalizedBarcode) {\n            Log.debug(\n                `UPC normalized: \"${originalBarcode}\" -> \"${normalizedBarcode}\"`\n            );\n            showSuccessMessage(\n                `UPC normalized: ${originalBarcode} → ${normalizedBarcode}`\n            );\n        }\n\n        // Show processing state\n        const processingBtn = document.getElementById('scanner-manual-btn');\n        if (processingBtn) {\n            processingBtn.disabled = true;\n            processingBtn.textContent = 'Processing...';\n        }\n\n        // Process via existing UPC validation endpoint\n        processUPC(normalizedBarcode, locationId).finally(() => {\n            // Reset button state\n            if (processingBtn) {\n                processingBtn.disabled = false;\n                processingBtn.textContent = 'Process';\n            }\n        });\n    }\n\n    /**\n     * Process UPC using existing validation endpoint.\n     *\n     * @param {string} upc UPC code\n     * @param {string} locationId Location ID\n     * @returns {Promise} Processing promise\n     */\n    async function processUPC(upc, locationId) {\n        const requestUrl =\n            M.cfg.wwwroot +\n            '/local/equipment/classes/external/validate_upc.php';\n        const requestData = {\n            upc: upc,\n            locationid: locationId,\n            sesskey: M.cfg.sesskey,\n        };\n\n        Log.debug('Processing UPC request:', {\n            url: requestUrl,\n            data: requestData,\n            wwwroot: M.cfg.wwwroot,\n            currentOrigin: window.location.origin,\n            currentHost: window.location.host,\n        });\n\n        try {\n            const response = await fetch(requestUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json',\n                },\n                body: JSON.stringify(requestData),\n            });\n\n            Log.debug('Response received:', {\n                status: response.status,\n                statusText: response.statusText,\n                ok: response.ok,\n                headers: Object.fromEntries(response.headers.entries()),\n            });\n\n            if (!response.ok) {\n                throw new Error(\n                    `HTTP ${response.status}: ${response.statusText}`\n                );\n            }\n\n            const contentType = response.headers.get('content-type');\n            if (!contentType || !contentType.includes('application/json')) {\n                const textResponse = await response.text();\n                Log.error('Non-JSON response received:', textResponse);\n                throw new Error(\n                    `Expected JSON response, got: ${contentType}. Response: ${textResponse.substring(\n                        0,\n                        200\n                    )}`\n                );\n            }\n\n            const data = await response.json();\n            Log.debug('Parsed response data:', data);\n\n            if (data.success) {\n                // Item added successfully\n                sessionItemCount++;\n                sessionItemIds.push(data.itemid);\n                updateSessionDisplay();\n                showSuccessMessage(data.product_name);\n            } else {\n                // Error occurred\n                showErrorMessage(data.message, data.product_url);\n            }\n        } catch (error) {\n            Log.error('Error processing UPC:', {\n                error: error.message,\n                stack: error.stack,\n                upc: upc,\n                locationId: locationId,\n                requestUrl: requestUrl,\n            });\n\n            // Show detailed error message\n            let errorMessage = 'Network error occurred. ';\n\n            if (error.name === 'TypeError' && error.message.includes('fetch')) {\n                errorMessage +=\n                    'Unable to connect to server. Check your network connection.';\n            } else if (error.message.includes('HTTP')) {\n                errorMessage += `Server error: ${error.message}`;\n            } else if (error.message.includes('JSON')) {\n                errorMessage += 'Server returned invalid response format.';\n            } else {\n                errorMessage += `Details: ${error.message}`;\n            }\n\n            showErrorMessage(errorMessage);\n        }\n    }\n\n    /**\n     * Update session display.\n     */\n    function updateSessionDisplay() {\n        sessionCount.textContent = sessionItemCount;\n        if (sessionItemCount > 0) {\n            printQrBtn.style.display = 'inline-block';\n        } else {\n            printQrBtn.style.display = 'none';\n        }\n    }\n\n    /**\n     * Show success message.\n     *\n     * @param {string} productName Product name\n     */\n    function showSuccessMessage(productName) {\n        const alert = document.createElement('div');\n        alert.className =\n            'alert alert-success alert-dismissible fade show mt-2';\n        alert.innerHTML = `\n            <strong>✓ Success!</strong> Added ${productName} to inventory.\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        sessionItems.appendChild(alert);\n\n        // Auto-dismiss after 3 seconds\n        setTimeout(() => {\n            if (alert.parentNode) {\n                alert.remove();\n            }\n        }, 3000);\n    }\n\n    /**\n     * Show error message.\n     *\n     * @param {string} message Error message\n     * @param {string} productUrl Product URL (optional)\n     */\n    function showErrorMessage(message, productUrl = null) {\n        const alert = document.createElement('div');\n        alert.className = 'alert alert-danger alert-dismissible fade show mt-2';\n        let content = `<strong>✗ Error:</strong> ${message}`;\n        if (productUrl) {\n            content += ` <a href=\"${productUrl}\" class=\"alert-link\">Add this product type</a>`;\n        }\n        content += `<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>`;\n        alert.innerHTML = content;\n        sessionItems.appendChild(alert);\n    }\n\n    /**\n     * Test network connectivity to the server.\n     * @returns {Promise<boolean>} True if connectivity is working\n     */\n    async function testNetworkConnectivity() {\n        try {\n            const testUrl =\n                M.cfg.wwwroot +\n                '/local/equipment/classes/external/validate_upc.php';\n\n            Log.debug('Testing network connectivity to:', testUrl);\n\n            // Send a simple OPTIONS request to test connectivity\n            const response = await fetch(testUrl, {\n                method: 'OPTIONS',\n                headers: {\n                    Accept: 'application/json',\n                },\n            });\n\n            Log.debug('Network test response:', {\n                status: response.status,\n                ok: response.ok,\n                headers: Object.fromEntries(response.headers.entries()),\n            });\n\n            return response.ok;\n        } catch (error) {\n            Log.error('Network connectivity test failed:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Adds a network test button to the scanner controls interface.\n     *\n     * Creates and appends a network test button to the existing scanner controls container.\n     * The button includes a click handler that performs an asynchronous network connectivity\n     * test with visual feedback (loading spinner) and displays success/error messages.\n     *\n     * @function addNetworkTestButton\n     * @returns {void} This function does not return a value\n     *\n     * @requires testNetworkConnectivity - Async function that tests network connectivity\n     * @requires showSuccessMessage - Function to display success notifications\n     * @requires showErrorMessage - Function to display error notifications\n     *\n     * @example\n     * // Call after DOM is loaded to add the network test button\n     * addNetworkTestButton();\n     *\n     * @since 1.0.0\n     *\n     * @description\n     * - Searches for an element with class 'scanner-controls'\n     * - Only creates button if container exists and button doesn't already exist\n     * - Button shows WiFi icon and \"Test Network\" text\n     * - During testing, button is disabled and shows spinner with \"Testing...\" text\n     * - Results are communicated via success/error message functions\n     * - Button is re-enabled after test completion regardless of result\n     *\n     * @sideeffects\n     * - Modifies the DOM by appending a button element\n     * - May display success/error messages to the user\n     */\n    function addNetworkTestButton() {\n        const scannerControls = document.querySelector('.scanner-controls');\n        if (scannerControls && !document.getElementById('test-network-btn')) {\n            const testButton = document.createElement('button');\n            testButton.id = 'test-network-btn';\n            testButton.type = 'button';\n            testButton.className = 'btn btn-outline-info btn-sm mt-2';\n            testButton.innerHTML = '<i class=\"fa fa-wifi\"></i> Test Network';\n\n            testButton.addEventListener('click', async function () {\n                const originalText = this.innerHTML;\n                this.disabled = true;\n                this.innerHTML =\n                    '<i class=\"fa fa-spinner fa-spin\"></i> Testing...';\n\n                const isConnected = await testNetworkConnectivity();\n\n                if (isConnected) {\n                    showSuccessMessage('Network connectivity test passed!');\n                } else {\n                    showErrorMessage(\n                        'Network connectivity test failed. Check your connection.'\n                    );\n                }\n\n                this.disabled = false;\n                this.innerHTML = originalText;\n            });\n\n            scannerControls.appendChild(testButton);\n        }\n    }\n\n    // Handle existing manual UPC input\n    addItemBtn.addEventListener('click', function () {\n        const upc = manualUpc.value.trim();\n        if (upc) {\n            processBarcode(upc);\n            manualUpc.value = '';\n        }\n    });\n\n    // Allow Enter key in existing UPC input\n    manualUpc.addEventListener('keypress', function (e) {\n        if (e.key === 'Enter') {\n            addItemBtn.click();\n        }\n    });\n\n    // Handle print QR codes button\n    printQrBtn.addEventListener('click', function () {\n        if (sessionItemIds.length > 0) {\n            const url =\n                M.cfg.wwwroot + '/local/equipment/inventory/generate_qr.php';\n            const params = new URLSearchParams({\n                action: 'generate_for_items',\n                itemids: sessionItemIds.join(','),\n                sesskey: M.cfg.sesskey,\n            });\n            window.open(url + '?' + params.toString(), '_blank');\n        }\n    });\n}\n"],"names":["initializeScanner","debug","scannerInterface","document","getElementById","innerHTML","error","locationSelect","manualUpc","addItemBtn","sessionCount","sessionItems","printQrBtn","scannerCard","sessionSummary","scanner","sessionItemCount","sessionItemIds","initScanner","scannerContainer","createElement","id","className","appendChild","controlsDiv","UniversalScanner","containerId","resultCallback","handleScanResult","errorCallback","handleScanError","init","then","success","showFallbackInterface","startBtn","stopBtn","scanBtn","flipBtn","manualInput","manualBtn","isScanning","scanTimeout","isMirrored","updateVideoMirror","videoElement","querySelector","style","transform","performSingleScan","Promise","resolve","scanAttempts","maxAttempts","found","scanFrame","async","video","readyState","HAVE_ENOUGH_DATA","requestAnimationFrame","context","drawImage","canvas","width","height","hasBarcodeDetector","detector","BarcodeDetector","formats","barcodes","detect","length","barcode","rawValue","format","processBarcode","imageData","getImageData","code","jsQR","scan","data","addEventListener","stream","getCameraStreamRobust","srcObject","play","videoWidth","videoHeight","updateStatus","disabled","display","compatibility","checkCameraCompatibility","supported","addNotification","message","type","showDetailedCompatibilityError","getTracks","forEach","track","stop","clearTimeout","icon","text","showSuccessMessage","showScanSuccess","showErrorMessage","setTimeout","value","trim","e","key","click","setupScannerControls","scannerControls","testButton","originalText","this","testUrl","M","cfg","wwwroot","response","fetch","method","headers","Accept","status","ok","Object","fromEntries","entries","testNetworkConnectivity","addNetworkTestButton","result","barcodeData","barcode_data","errorCode","isMobile","test","navigator","userAgent","isHTTP","window","location","protocol","content","origin","testBtn","testCameraAccess","fileUploadSection","fileInput","processFileBtn","files","file","reject","reader","FileReader","onload","img","Image","getContext","willReadFrequently","onerror","Error","src","target","readAsDataURL","processImageFile","setupFileUpload","errorMessage","name","issues","browserInfo","getBrowserInfo","apis","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","hostname","push","mobile","ua","chrome","firefox","safari","edge","version","android","ios","match","parseInt","constraints","facingMode","ideal","keys","api","issue","locationId","originalBarcode","normalizedBarcode","upc","replace","padStart","charAt","substring","normalizeUPC","processingBtn","textContent","requestUrl","requestData","locationid","sesskey","url","currentOrigin","currentHost","host","body","JSON","stringify","statusText","contentType","get","includes","textResponse","json","itemid","updateSessionDisplay","product_name","product_url","stack","processUPC","finally","productName","alert","parentNode","remove","productUrl","destroy","params","URLSearchParams","action","itemids","join","open","toString"],"mappings":"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"}