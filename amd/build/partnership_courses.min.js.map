{"version":3,"file":"partnership_courses.min.js","sources":["../src/partnership_courses.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing consents.\n *\n * @module     local_equipment/partnership_courses\n * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport { get_string as getString } from 'core/str';\n\nexport const init = () => {\n    const partnershipSelect = document.getElementById('id_partnership');\n    const selectedCoursesInput = document.getElementById('id_selectedcourses');\n\n    if (!partnershipSelect || !selectedCoursesInput) {\n        return;\n    }\n\n    const partnershipData = JSON.parse(\n        partnershipSelect.getAttribute('data-partnerships') || '{}'\n    );\n\n    const updateStudentCourses = async (partnershipId) => {\n        const courses = partnershipData[partnershipId] || [];\n        const selects = document.querySelectorAll(\n            'select[name^=\"student_courses[\"]'\n        );\n        for (const select of selects) {\n            await updateCourseOptions(select, courses);\n        }\n    };\n\n    const updateCourseOptions = async (select, courses) => {\n        const studentIndex = select.name.match(/\\[(\\d+)\\]/)[1];\n        select.setAttribute('data-student-index', studentIndex);\n\n        const previouslySelected = JSON.parse(\n            select.getAttribute('data-selected') || '[]'\n        );\n        select.innerHTML = '';\n\n        if (courses.length === 0) {\n            const noCourseString = await getString(\n                'nocoursesavailable',\n                'local_equipment'\n            );\n            select.innerHTML = `<option value=\"\" disabled>${noCourseString}</option>`;\n        } else {\n            courses.forEach((course) => {\n                const option = document.createElement('option');\n                option.value = course.id;\n                option.textContent = course.fullname;\n                option.selected = previouslySelected.includes(\n                    course.id.toString()\n                );\n                select.appendChild(option);\n            });\n        }\n        // validateCourseSelection(select);\n    };\n\n    const updateSelectedCourses = () => {\n        const allSelects = document.querySelectorAll(\n            'select[name^=\"student_courses[\"]'\n        );\n        const selectedCourses = {};\n        allSelects.forEach((select) => {\n            const studentIndex = select.getAttribute('data-student-index');\n            selectedCourses[studentIndex] = Array.from(\n                select.selectedOptions\n            ).map((option) => option.value);\n        });\n        selectedCoursesInput.value = JSON.stringify(selectedCourses);\n    };\n\n    // const validateCourseSelection = (select) => {\n    //     const selectedCourses = Array.from(select.selectedOptions).map(\n    //         (option) => option.value\n    //     );\n    //     const errorElement =\n    //         select.parentNode.querySelector('.invalid-feedback');\n\n    //     if (selectedCourses.length === 0) {\n    //         select.classList.add('is-invalid');\n    //         if (errorElement) {\n    //             errorElement.textContent = 'Please select at least one course.';\n    //             errorElement.style.display = 'block';\n    //         }\n    //     } else {\n    //         select.classList.remove('is-invalid');\n    //         if (errorElement) {\n    //             errorElement.textContent = '';\n    //             errorElement.style.display = 'none';\n    //         }\n    //     }\n    // };\n\n    document\n        .querySelectorAll('select[name^=\"student_courses[\"]')\n        .forEach((select) => {\n            select.addEventListener('change', () => {\n                select.setAttribute(\n                    'data-selected',\n                    JSON.stringify(\n                        Array.from(select.selectedOptions).map(\n                            (option) => option.value\n                        )\n                    )\n                );\n                updateSelectedCourses();\n                // validateCourseSelection(select);\n            });\n        });\n\n    const form = document.querySelector('form');\n    if (form) {\n        form.addEventListener('submit', updateSelectedCourses);\n    }\n\n    partnershipSelect.addEventListener('change', (event) => {\n        updateStudentCourses(event.target.value);\n    });\n\n    updateStudentCourses(partnershipSelect.value);\n    updateSelectedCourses();\n\n    // if (typeof M.form !== 'undefined' && M.form.dependencyManager) {\n    //     M.form.dependencyManager.add_dependency({\n    //         element: document.querySelectorAll(\n    //             'select[name^=\"student_courses[\"]'\n    //         ),\n    //         callback: validateCourseSelection,\n    //     });\n    // }\n};\n"],"names":["partnershipSelect","document","getElementById","selectedCoursesInput","partnershipData","JSON","parse","getAttribute","updateStudentCourses","async","courses","partnershipId","selects","querySelectorAll","select","updateCourseOptions","studentIndex","name","match","setAttribute","previouslySelected","innerHTML","length","noCourseString","forEach","course","option","createElement","value","id","textContent","fullname","selected","includes","toString","appendChild","updateSelectedCourses","allSelects","selectedCourses","Array","from","selectedOptions","map","stringify","addEventListener","form","querySelector","event","target"],"mappings":"wLAwBoB,WACVA,kBAAoBC,SAASC,eAAe,kBAC5CC,qBAAuBF,SAASC,eAAe,0BAEhDF,oBAAsBG,kCAIrBC,gBAAkBC,KAAKC,MACzBN,kBAAkBO,aAAa,sBAAwB,MAGrDC,qBAAuBC,MAAAA,sBACnBC,QAAUN,gBAAgBO,gBAAkB,GAC5CC,QAAUX,SAASY,iBACrB,wCAEC,MAAMC,UAAUF,cACXG,oBAAoBD,OAAQJ,UAIpCK,oBAAsBN,MAAOK,OAAQJ,iBACjCM,aAAeF,OAAOG,KAAKC,MAAM,aAAa,GACpDJ,OAAOK,aAAa,qBAAsBH,oBAEpCI,mBAAqBf,KAAKC,MAC5BQ,OAAOP,aAAa,kBAAoB,SAE5CO,OAAOO,UAAY,GAEI,IAAnBX,QAAQY,OAAc,OAChBC,qBAAuB,mBACzB,qBACA,mBAEJT,OAAOO,8CAAyCE,iCAEhDb,QAAQc,SAASC,eACPC,OAASzB,SAAS0B,cAAc,UACtCD,OAAOE,MAAQH,OAAOI,GACtBH,OAAOI,YAAcL,OAAOM,SAC5BL,OAAOM,SAAWZ,mBAAmBa,SACjCR,OAAOI,GAAGK,YAEdpB,OAAOqB,YAAYT,YAMzBU,sBAAwB,WACpBC,WAAapC,SAASY,iBACxB,oCAEEyB,gBAAkB,GACxBD,WAAWb,SAASV,eACVE,aAAeF,OAAOP,aAAa,sBACzC+B,gBAAgBtB,cAAgBuB,MAAMC,KAClC1B,OAAO2B,iBACTC,KAAKhB,QAAWA,OAAOE,WAE7BzB,qBAAqByB,MAAQvB,KAAKsC,UAAUL,kBAyBhDrC,SACKY,iBAAiB,oCACjBW,SAASV,SACNA,OAAO8B,iBAAiB,UAAU,KAC9B9B,OAAOK,aACH,gBACAd,KAAKsC,UACDJ,MAAMC,KAAK1B,OAAO2B,iBAAiBC,KAC9BhB,QAAWA,OAAOE,UAI/BQ,oCAKNS,KAAO5C,SAAS6C,cAAc,QAChCD,MACAA,KAAKD,iBAAiB,SAAUR,uBAGpCpC,kBAAkB4C,iBAAiB,UAAWG,QAC1CvC,qBAAqBuC,MAAMC,OAAOpB,UAGtCpB,qBAAqBR,kBAAkB4B,OACvCQ"}