{"version":3,"file":"partnership_courses.min.js","sources":["../src/partnership_courses.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing consents.\n *\n * @module     local_equipment/partnership_courses\n * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Log from 'core/log';\nimport { get_string as getString } from 'core/str';\n\nexport const init = () => {\n    const partnershipSelect = document.getElementById('id_partnership');\n\n    if (!partnershipSelect) {\n        Log.error('Partnership select element not found');\n        return;\n    }\n\n    let partnershipData;\n    try {\n        partnershipData = JSON.parse(\n            partnershipSelect.getAttribute('data-partnerships') || '{}'\n        );\n    } catch (e) {\n        Log.error('Error parsing partnership data:', e);\n        return;\n    }\n    // Use async/await for better readability and error handling\n    const updateStudentCourses = async (partnershipId) => {\n        const courses = partnershipData[partnershipId] || [];\n        Log.debug('Courses: ');\n        Log.debug(courses);\n        const selects = document.querySelectorAll(\n            'select[name^=\"student_courses[\"]'\n        );\n        for (const select of selects) {\n            await updateCourseOptions(select, courses);\n        }\n    };\n    // const updateStudentCourses = async (partnershipId) => {\n    //     const courses = partnershipData[partnershipId] || [];\n    //     Log.debug('Courses:', courses);\n    //     const selects = document.querySelectorAll('select[name^=\"courses[\"]');\n    //     for (const select of selects) {\n    //         await updateCourseOptions(select, courses);\n    //     }\n    // };\n\n    // Change: Modified to handle previously selected courses\n    const updateCourseOptions = async (select, courses) => {\n        // Retrieve previously selected courses\n        const previouslySelected = JSON.parse(\n            select.getAttribute('data-selected') || '[]'\n        );\n        select.innerHTML = '';\n        if (courses.length === 0) {\n            const noCourseString = await getString(\n                'nocoursesavailable',\n                'local_equipment'\n            );\n            const option = document.createElement('option');\n            option.value = '';\n            option.textContent = noCourseString;\n            option.disabled = true;\n            select.appendChild(option);\n        } else {\n            courses.forEach((course) => {\n                const option = document.createElement('option');\n                option.value = course.id;\n                option.textContent = course.fullname;\n                // Restore previously selected state\n                option.selected = previouslySelected.includes(\n                    course.id.toString()\n                );\n                select.appendChild(option);\n            });\n        }\n        // Call preserveSelectedCourses after updating options\n        preserveSelectedCourses();\n    };\n\n    // const updateCourseOptions = async (select, courses) => {\n    //     select.innerHTML = '';\n    //     if (courses.length === 0) {\n    //         const noCourseString = await getString(\n    //             'nocoursesavailable',\n    //             'local_equipment'\n    //         );\n    //         const option = document.createElement('option');\n    //         option.value = '';\n    //         option.textContent = noCourseString;\n    //         option.disabled = true;\n    //         select.appendChild(option);\n    //     } else {\n    //         courses.forEach((course) => {\n    //             const option = document.createElement('option');\n    //             option.value = course.id;\n    //             option.textContent = course.fullname;\n    //             select.appendChild(option);\n    //         });\n    //     }\n    // };\n\n    // New function: Preserve selected courses\n    const preserveSelectedCourses = () => {\n        document\n            .querySelectorAll('select[name^=\"student_courses[\"]')\n            .forEach((select) => {\n                select.addEventListener('change', () => {\n                    const selectedOptions = Array.from(\n                        select.selectedOptions\n                    ).map((option) => option.value);\n                    select.setAttribute(\n                        'data-selected',\n                        JSON.stringify(selectedOptions)\n                    );\n                });\n            });\n    };\n\n    partnershipSelect.addEventListener('change', (event) => {\n        updateStudentCourses(event.target.value);\n    });\n\n    // Initial update\n    updateStudentCourses(partnershipSelect.value);\n\n    // Call preserveSelectedCourses initially\n    preserveSelectedCourses();\n};\n"],"names":["partnershipSelect","document","getElementById","error","partnershipData","JSON","parse","getAttribute","e","updateStudentCourses","async","courses","partnershipId","debug","selects","querySelectorAll","select","updateCourseOptions","previouslySelected","innerHTML","length","noCourseString","option","createElement","value","textContent","disabled","appendChild","forEach","course","id","fullname","selected","includes","toString","preserveSelectedCourses","addEventListener","selectedOptions","Array","from","map","setAttribute","stringify","event","target"],"mappings":";;;;;;;kJA0BoB,WACVA,kBAAoBC,SAASC,eAAe,sBAE7CF,2CACGG,MAAM,4CAIVC,oBAEAA,gBAAkBC,KAAKC,MACnBN,kBAAkBO,aAAa,sBAAwB,MAE7D,MAAOC,4BACDL,MAAM,kCAAmCK,SAI3CC,qBAAuBC,MAAAA,sBACnBC,QAAUP,gBAAgBQ,gBAAkB,gBAC9CC,MAAM,0BACNA,MAAMF,eACJG,QAAUb,SAASc,iBACrB,wCAEC,MAAMC,UAAUF,cACXG,oBAAoBD,OAAQL,UAapCM,oBAAsBP,MAAOM,OAAQL,iBAEjCO,mBAAqBb,KAAKC,MAC5BU,OAAOT,aAAa,kBAAoB,SAE5CS,OAAOG,UAAY,GACI,IAAnBR,QAAQS,OAAc,OAChBC,qBAAuB,mBACzB,qBACA,mBAEEC,OAASrB,SAASsB,cAAc,UACtCD,OAAOE,MAAQ,GACfF,OAAOG,YAAcJ,eACrBC,OAAOI,UAAW,EAClBV,OAAOW,YAAYL,aAEnBX,QAAQiB,SAASC,eACPP,OAASrB,SAASsB,cAAc,UACtCD,OAAOE,MAAQK,OAAOC,GACtBR,OAAOG,YAAcI,OAAOE,SAE5BT,OAAOU,SAAWd,mBAAmBe,SACjCJ,OAAOC,GAAGI,YAEdlB,OAAOW,YAAYL,WAI3Ba,2BA0BEA,wBAA0B,KAC5BlC,SACKc,iBAAiB,oCACjBa,SAASZ,SACNA,OAAOoB,iBAAiB,UAAU,WACxBC,gBAAkBC,MAAMC,KAC1BvB,OAAOqB,iBACTG,KAAKlB,QAAWA,OAAOE,QACzBR,OAAOyB,aACH,gBACApC,KAAKqC,UAAUL,yBAMnCrC,kBAAkBoC,iBAAiB,UAAWO,QAC1ClC,qBAAqBkC,MAAMC,OAAOpB,UAItCf,qBAAqBT,kBAAkBwB,OAGvCW"}