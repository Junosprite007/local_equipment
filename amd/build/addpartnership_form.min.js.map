{"version":3,"file":"addpartnership_form.min.js","sources":["../src/addpartnership_form.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for updating partnership headers in the add partnerships form.\n *\n * @module      local_equipment/addpartnership_form\n * @copyright   2024 onward Joshua Kirby <josh@funlearningcompany.com>\n * @author      Joshua Kirby - CTO @ Fun Learning Company - funlearningcompany.com\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport * as Str from \"core/str\";\nimport Log from \"core/log\";\nimport Notification from \"core/notification\";\n\nconst SELECTORS = {\n    PARTNERSHIP_NAME_INPUT: \".partnership-name-input\",\n    PARTNERSHIP_HEADER: \".partnership-header\",\n};\n\n/**\n * Initialize the module.\n */\nexport const init = () => {\n    Str.get_string(\"partnership\", \"local_equipment\")\n        .then((partnershipString) => {\n            setupEventListeners(partnershipString);\n            Log.debug(\"AMD module initialized\");\n        })\n        .catch((error) => {\n            Log.error(\"Error initializing AMD module:\", error);\n        });\n};\n\n/**\n * Set up event listeners for partnership name inputs.\n *\n * @param {string} partnershipString The localized string for 'partnership'.\n */\nconst setupEventListeners = (partnershipString) => {\n    $(\"body\").on(\"input\", SELECTORS.PARTNERSHIP_NAME_INPUT, function () {\n        updatePartnershipHeader($(this), partnershipString);\n    });\n};\n\n/**\n * Update the partnership header based on the input value.\n *\n * @param {jQuery} $input The input element that triggered the event.\n * @param {string} partnershipString The localized string for 'partnership'.\n */\nconst updatePartnershipHeader = ($input, partnershipString) => {\n    const $header = $input.closest(\".fitem\").find(SELECTORS.PARTNERSHIP_HEADER);\n    if ($header.length) {\n        const headerText = $input.val() ? $input.val() : partnershipString;\n        $header.text(headerText);\n    } else {\n        Log.debug(\"Header element not found for input\");\n    }\n};\n\n/**\n * Display an alert box. It's actually working!\n *\n * @param {string} title - The title of the alert.\n * @param {string} message - The message of the alert.\n */\nexport const showAlert = (title, message) => {\n    Notification.alert(title, message);\n};\n"],"names":["SELECTORS","Str","get_string","then","partnershipString","setupEventListeners","debug","catch","error","on","updatePartnershipHeader","this","$input","$header","closest","find","length","headerText","val","text","title","message","alert"],"mappings":";;;;;;;;+3BA6BMA,iCACsB,0BADtBA,6BAEkB,oCAMJ,KAChBC,IAAIC,WAAW,cAAe,mBACzBC,MAAMC,oBACHC,oBAAoBD,gCAChBE,MAAM,6BAEbC,OAAOC,qBACAA,MAAM,iCAAkCA,iBASlDH,oBAAuBD,wCACvB,QAAQK,GAAG,QAAST,kCAAkC,WACpDU,yBAAwB,mBAAEC,MAAOP,uBAUnCM,wBAA0B,CAACE,OAAQR,2BAC/BS,QAAUD,OAAOE,QAAQ,UAAUC,KAAKf,iCAC1Ca,QAAQG,OAAQ,OACVC,WAAaL,OAAOM,MAAQN,OAAOM,MAAQd,kBACjDS,QAAQM,KAAKF,8BAETX,MAAM,0DAUO,CAACc,MAAOC,iCAChBC,MAAMF,MAAOC"}