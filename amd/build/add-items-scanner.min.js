define("local_equipment/add-items-scanner",["exports","local_equipment/universal-scanner","core/notification","core/log","local_equipment/jsqr"],(function(_exports,_universalScanner,_notification,_log,_jsqr){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Scanner integration for add items page.
   *
   * @module     local_equipment/add-items-scanner
   * @copyright  2024 onwards Joshua Kirby <josh@funlearningcompany.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_universalScanner=_interopRequireDefault(_universalScanner),_notification=_interopRequireDefault(_notification),_log=_interopRequireDefault(_log),_jsqr=_interopRequireDefault(_jsqr);function initializeScanner(){_log.default.debug("local_equipment/add-items-scanner: initializeScanner() called");const locationSelect=document.getElementById("location_select"),manualUpc=document.getElementById("manual_upc"),addItemBtn=document.getElementById("add_item_btn"),sessionCount=document.getElementById("session_count"),sessionItems=document.getElementById("session_items"),printQrBtn=document.getElementById("print_qr_btn"),scannerContainer=document.getElementById("scanner-container");_log.default.debug("DOM elements found:",{locationSelect:!!locationSelect,manualUpc:!!manualUpc,addItemBtn:!!addItemBtn,sessionCount:!!sessionCount,sessionItems:!!sessionItems,printQrBtn:!!printQrBtn,scannerContainer:!!scannerContainer});let scanner=null,sessionItemCount=0,sessionItemIds=[];function initScanner(){if(!scannerContainer)return void _log.default.error("Scanner container not found in DOM");scannerContainer.innerHTML="";const controlsDiv=document.createElement("div");controlsDiv.className="scanner-controls",controlsDiv.innerHTML='\n            <div class="scanner-area mb-3" id="scanner-area">\n                \x3c!-- Scanner video will be inserted here --\x3e\n            </div>\n            <div class="scanner-toggle mb-3">\n                <div class="btn-group" role="group">\n                    <button type="button" id="start-camera-btn" class="btn btn-primary">\n                        <i class="fa fa-camera"></i> Start Camera\n                    </button>\n                    <button type="button" id="stop-camera-btn" class="btn btn-secondary" disabled>\n                        <i class="fa fa-stop"></i> Stop Camera\n                    </button>\n                </div>\n                <div class="mt-2">\n                    <button type="button" id="scan-barcode-btn" class="btn btn-primary" style="display: none;">\n                        <i class="fa fa-qrcode"></i> Scan\n                    </button>\n                    <button type="button" id="flip-camera-btn" class="btn btn-outline-secondary btn-sm ms-2" style="display: none;"\n                        title="Toggle camera mirror">\n                        <i class="fa fa-arrows-h"></i> Flip\n                    </button>\n                </div>\n            </div>\n            <div class="file-upload-section mb-3" style="display: none;" id="file-upload-section">\n                <label for="barcode-file-input" class="form-label">\n                    <i class="fa fa-camera"></i> Take Photo of Barcode:\n                </label>\n                <div class="input-group">\n                    <input type="file" id="barcode-file-input" class="form-control" accept="image/*" capture="environment">\n                    <button type="button" id="process-file-btn" class="btn btn-outline-success" disabled>\n                        <i class="fa fa-search"></i> Scan Photo\n                    </button>\n                </div>\n                <small class="form-text text-muted">\n                    Take a clear photo of the barcode with good lighting\n                </small>\n            </div>\n            <div class="manual-input">\n                <label for="scanner-manual-input" class="form-label">Or enter barcode manually:</label>\n                <div class="input-group">\n                    <input type="text" id="scanner-manual-input" class="form-control" placeholder="Scan or type barcode...">\n                    <button type="button" id="scanner-manual-btn" class="btn btn-outline-primary">Process</button>\n                </div>\n            </div>\n        ',scannerContainer.appendChild(controlsDiv),scanner=new _universalScanner.default({containerId:"scanner-area",resultCallback:handleScanResult,errorCallback:handleScanError}),scanner.init().then((success=>{success?_log.default.debug("Scanner initialized successfully"):(_log.default.error("Scanner initialization failed"),showFallbackInterface())})),function(){const startBtn=document.getElementById("start-camera-btn"),stopBtn=document.getElementById("stop-camera-btn"),scanBtn=document.getElementById("scan-barcode-btn"),flipBtn=document.getElementById("flip-camera-btn"),manualInput=document.getElementById("scanner-manual-input"),manualBtn=document.getElementById("scanner-manual-btn");let isScanning=!1,scanTimeout=null,isMirrored=!1;function updateVideoMirror(){const videoElement=document.querySelector("#scanner-area video");videoElement?(videoElement.style.transform=isMirrored?"scaleX(-1)":"scaleX(1)",_log.default.debug("Video mirror updated:",isMirrored?"mirrored (scaleX(-1))":"normal (scaleX(1))","Video element found:",!!videoElement,"Applied transform:",videoElement.style.transform)):_log.default.error("Video element not found for mirror update")}async function performSingleScan(){return new Promise((resolve=>{let scanAttempts=0;const maxAttempts=30;let found=!1;const scanFrame=async()=>{if(found||scanAttempts>=maxAttempts)resolve(found);else{try{if(!scanner.video||scanner.video.readyState!==scanner.video.HAVE_ENOUGH_DATA)return scanAttempts++,void requestAnimationFrame(scanFrame);if(scanner.context.drawImage(scanner.video,0,0,scanner.canvas.width,scanner.canvas.height),scanner.hasBarcodeDetector)try{const detector=new BarcodeDetector({formats:["qr_code","ean_13","ean_8","upc_a","upc_e","code_128","code_39"]}),barcodes=await detector.detect(scanner.canvas);if(barcodes.length>0){const barcode=barcodes[0];return _log.default.debug("Barcode detected:",barcode.rawValue,barcode.format),processBarcode(barcode.rawValue),found=!0,void resolve(!0)}}catch(error){_log.default.debug("BarcodeDetector failed:",error)}try{const imageData=scanner.context.getImageData(0,0,scanner.canvas.width,scanner.canvas.height),code=_jsqr.default.scan(imageData.data,imageData.width,imageData.height);if(code&&code.data)return _log.default.debug("QR code detected:",code.data),processBarcode(code.data),found=!0,void resolve(!0)}catch(error){_log.default.debug("QR detection failed:",error)}}catch(error){_log.default.debug("Frame processing error:",error)}scanAttempts++,requestAnimationFrame(scanFrame)}};requestAnimationFrame(scanFrame)}))}startBtn.addEventListener("click",(async()=>{try{scanner.stream=await getCameraStreamRobust(),scanner.video.srcObject=scanner.stream,await scanner.video.play(),scanner.canvas.width=scanner.video.videoWidth,scanner.canvas.height=scanner.video.videoHeight,scanner.updateStatus("Camera ready - click Scan to detect barcode"),startBtn.disabled=!0,stopBtn.disabled=!1,scanBtn.style.display="inline-block",flipBtn.style.display="inline-block",updateVideoMirror(),updateProductDetailsPanel("Camera started. Click 'Scan' to detect barcodes in the camera view.")}catch(error){_log.default.error("Failed to start camera:",error);const compatibility=await checkCameraCompatibility();compatibility.supported?_notification.default.addNotification({message:"Failed to start camera: "+error.message,type:"error"}):showDetailedCompatibilityError(compatibility)}})),stopBtn.addEventListener("click",(()=>{scanner.stream&&(scanner.stream.getTracks().forEach((track=>track.stop())),scanner.stream=null),scanner.video&&(scanner.video.srcObject=null),scanner.updateStatus("Camera stopped"),startBtn.disabled=!1,stopBtn.disabled=!0,scanBtn.style.display="none",flipBtn.style.display="none",scanTimeout&&(clearTimeout(scanTimeout),scanTimeout=null),isScanning=!1})),flipBtn.addEventListener("click",(()=>{isMirrored=!isMirrored,updateVideoMirror();const icon="fa-arrows-h",text=isMirrored?"Flip (Mirrored)":"Flip (Normal)";flipBtn.innerHTML='<i class="fa '.concat(icon,'"></i> ').concat(text);showSuccessMessage(isMirrored?"Camera mirrored (good for webcams)":"Camera normal (good for mobile)")})),scanBtn.addEventListener("click",(async()=>{if(!isScanning){isScanning=!0,scanBtn.disabled=!0,scanBtn.innerHTML='<i class="fa fa-spinner fa-spin"></i> Scanning...',scanner.updateStatus("Scanning for barcode...");try{await performSingleScan()?(scanner.updateStatus("Scan successful!"),scanner.showScanSuccess()):(scanner.updateStatus("No barcode detected - try again"),showErrorMessage("No barcode detected. Please position the barcode in the target area and try again."))}catch(error){_log.default.error("Scan error:",error),scanner.updateStatus("Scan failed"),showErrorMessage("Scan failed. Please try again.")}isScanning=!1,scanBtn.disabled=!1,scanBtn.innerHTML='<i class="fa fa-qrcode"></i> Scan',setTimeout((()=>{scanner.updateStatus("Ready to scan - position barcode and click Scan")}),2e3)}})),manualBtn.addEventListener("click",(()=>{const barcode=manualInput.value.trim();barcode&&(processBarcode(barcode),manualInput.value="")})),manualInput.addEventListener("keypress",(e=>{"Enter"===e.key&&manualBtn.click()}))}(),function(){const scannerControls=document.querySelector(".scanner-controls");if(scannerControls&&!document.getElementById("test-network-btn")){const testButton=document.createElement("button");testButton.id="test-network-btn",testButton.type="button",testButton.className="btn btn-outline-info btn-sm mt-2",testButton.innerHTML='<i class="fa fa-wifi"></i> Test Network',testButton.addEventListener("click",(async function(){const originalText=this.innerHTML;this.disabled=!0,this.innerHTML='<i class="fa fa-spinner fa-spin"></i> Testing...';await async function(){try{const testUrl=M.cfg.wwwroot+"/local/equipment/classes/external/validate_upc.php";_log.default.debug("Testing network connectivity to:",testUrl);const response=await fetch(testUrl,{method:"OPTIONS",headers:{Accept:"application/json"}});return _log.default.debug("Network test response:",{status:response.status,ok:response.ok,headers:Object.fromEntries(response.headers.entries())}),response.ok}catch(error){return _log.default.error("Network connectivity test failed:",error),!1}}()?showSuccessMessage("Network connectivity test passed!"):showErrorMessage("Network connectivity test failed. Check your connection."),this.disabled=!1,this.innerHTML=originalText})),scannerControls.appendChild(testButton)}}()}function handleScanResult(result){if(result.success&&result.data){const barcodeData=result.data.barcode_data||result.data;_log.default.debug("Scan successful, processing barcode:",barcodeData),processBarcode(barcodeData)}else{_log.default.error("Scan failed:",result);showErrorMessage(result.message||"Scan failed. Please try again.")}}function handleScanError(errorCode,message){_log.default.error("Scanner error:",errorCode,message),"camera_access_failed"===errorCode&&showFallbackInterface()}function showFallbackInterface(){if(scannerContainer){const isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isHTTP="http:"===window.location.protocol;let content="";content=isMobile&&isHTTP?'\n                    <div class="alert alert-info">\n                        <h5><i class="fa fa-mobile"></i> Mobile Camera Setup Required</h5>\n                        <p><strong>To enable camera scanning on mobile:</strong></p>\n                        <ol class="text-start mb-3">\n                            <li>Open Chrome menu (⋮) → <strong>Settings</strong></li>\n                            <li>Go to <strong>Site Settings</strong> → <strong>Camera</strong></li>\n                            <li>Find this site and set to <strong>"Allow"</strong></li>\n                        </ol>\n                        <p><strong>Alternative:</strong> In Chrome address bar, type:<br>\n                        <code>chrome://flags/#unsafely-treat-insecure-origin-as-secure</code><br>\n                        Add: <code>'.concat(window.location.origin,'</code></p>\n                        <button type="button" id="test-camera-btn" class="btn btn-primary btn-sm mt-2">\n                            <i class="fa fa-camera"></i> Test Camera Access\n                        </button>\n                    </div>\n                '):isMobile?'\n                    <div class="alert alert-warning text-center">\n                        <i class="fa fa-mobile"></i>\n                        <strong>Camera access denied</strong><br>\n                        Please check your browser settings and allow camera access for this site.\n                        <button type="button" id="test-camera-btn" class="btn btn-primary btn-sm mt-2">\n                            <i class="fa fa-camera"></i> Test Camera Access\n                        </button>\n                    </div>\n                ':'\n                    <div class="alert alert-warning text-center">\n                        <i class="fa fa-exclamation-triangle"></i>\n                        <strong>Camera not available</strong><br>\n                        Please use the manual input below to enter barcodes.\n                    </div>\n                ',scannerContainer.innerHTML=content;const testBtn=document.getElementById("test-camera-btn");if(testBtn&&testBtn.addEventListener("click",testCameraAccess),isMobile){const fileUploadSection=document.getElementById("file-upload-section");fileUploadSection&&(fileUploadSection.style.display="block",function(){const fileInput=document.getElementById("barcode-file-input"),processFileBtn=document.getElementById("process-file-btn");if(!fileInput||!processFileBtn)return;fileInput.addEventListener("change",(function(){processFileBtn.disabled=!this.files.length})),processFileBtn.addEventListener("click",(async function(){const file=fileInput.files[0];if(!file)return;const originalText=this.innerHTML;this.disabled=!0,this.innerHTML='<i class="fa fa-spinner fa-spin"></i> Scanning Photo...';try{const barcode=await async function(file){return new Promise(((resolve,reject)=>{const reader=new FileReader;reader.onload=function(e){const img=new Image;img.onload=async function(){try{const canvas=document.createElement("canvas"),context=canvas.getContext("2d",{willReadFrequently:!0});if(canvas.width=img.width,canvas.height=img.height,context.drawImage(img,0,0),"BarcodeDetector"in window)try{const detector=new BarcodeDetector({formats:["qr_code","ean_13","ean_8","upc_a","upc_e","code_128","code_39"]}),barcodes=await detector.detect(canvas);if(barcodes.length>0)return _log.default.debug("Barcode detected from file:",barcodes[0].rawValue),void resolve(barcodes[0].rawValue)}catch(error){_log.default.debug("BarcodeDetector failed on file:",error)}try{const imageData=context.getImageData(0,0,canvas.width,canvas.height),code=_jsqr.default.scan(imageData.data,imageData.width,imageData.height);if(code&&code.data)return _log.default.debug("QR code detected from file:",code.data),void resolve(code.data)}catch(error){_log.default.debug("jsQR failed on file:",error)}resolve(null)}catch(error){reject(error)}},img.onerror=function(){reject(new Error("Failed to load image"))},img.src=e.target.result},reader.onerror=function(){reject(new Error("Failed to read file"))},reader.readAsDataURL(file)}))}(file);barcode?(showSuccessMessage("Barcode detected from photo!"),processBarcode(barcode),fileInput.value=""):showErrorMessage("No barcode found in the image. Please try taking a clearer photo with better lighting.")}catch(error){_log.default.error("File processing error:",error),showErrorMessage("Failed to process image. Please try again.")}this.disabled=!1,this.innerHTML=originalText,processFileBtn.disabled=!0}))}())}}}async function testCameraAccess(){const testBtn=document.getElementById("test-camera-btn"),originalText=testBtn.innerHTML;testBtn.disabled=!0,testBtn.innerHTML='<i class="fa fa-spinner fa-spin"></i> Testing...';const compatibility=await checkCameraCompatibility();if(!compatibility.supported)return showDetailedCompatibilityError(compatibility),testBtn.disabled=!1,void(testBtn.innerHTML=originalText);try{(await getCameraStreamRobust()).getTracks().forEach((track=>track.stop())),showSuccessMessage("Camera access granted! You can now use the Start Camera button."),initScanner()}catch(error){let errorMessage="Camera access failed. ";"NotAllowedError"===error.name?errorMessage+="Please allow camera permissions in your browser settings.":"NotFoundError"===error.name?errorMessage+="No camera found on this device.":"NotSupportedError"===error.name?errorMessage+="Camera not supported on this browser/device.":"NotReadableError"===error.name?errorMessage+="Camera is being used by another application.":errorMessage+="Error: ".concat(error.message),showErrorMessage(errorMessage),testBtn.disabled=!1,testBtn.innerHTML=originalText}}async function checkCameraCompatibility(){const result={supported:!1,method:null,issues:[],browserInfo:getBrowserInfo(),apis:{mediaDevices:!1,getUserMedia:!1,webkitGetUserMedia:!1,mozGetUserMedia:!1}};return _log.default.debug("Browser info:",result.browserInfo),navigator.mediaDevices&&navigator.mediaDevices.getUserMedia&&(result.apis.mediaDevices=!0,result.method="mediaDevices",result.supported=!0),navigator.getUserMedia&&(result.apis.getUserMedia=!0,result.supported||(result.method="getUserMedia",result.supported=!0)),navigator.webkitGetUserMedia&&(result.apis.webkitGetUserMedia=!0,result.supported||(result.method="webkitGetUserMedia",result.supported=!0)),navigator.mozGetUserMedia&&(result.apis.mozGetUserMedia=!0,result.supported||(result.method="mozGetUserMedia",result.supported=!0)),"https:"!==location.protocol&&"localhost"!==location.hostname&&result.issues.push("insecure_context"),result.browserInfo.mobile&&!result.supported&&result.issues.push("mobile_no_camera_api"),_log.default.debug("Camera compatibility check:",result),result}function getBrowserInfo(){const ua=navigator.userAgent,result={mobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua),chrome:/Chrome/i.test(ua),firefox:/Firefox/i.test(ua),safari:/Safari/i.test(ua)&&!/Chrome/i.test(ua),edge:/Edge/i.test(ua),version:null,android:/Android/i.test(ua),ios:/iPhone|iPad|iPod/i.test(ua)};if(result.chrome){const match=ua.match(/Chrome\/(\d+)/);match&&(result.version=parseInt(match[1]))}return result}async function getCameraStreamRobust(){const constraints={video:{facingMode:"environment",width:{ideal:1280},height:{ideal:720}}};if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)try{return _log.default.debug("Trying modern mediaDevices.getUserMedia"),await navigator.mediaDevices.getUserMedia(constraints)}catch(error){_log.default.debug("Modern API failed:",error)}if(navigator.getUserMedia)try{return _log.default.debug("Trying legacy getUserMedia"),await new Promise(((resolve,reject)=>{navigator.getUserMedia(constraints,resolve,reject)}))}catch(error){_log.default.debug("Legacy getUserMedia failed:",error)}if(navigator.webkitGetUserMedia)try{return _log.default.debug("Trying webkitGetUserMedia"),await new Promise(((resolve,reject)=>{navigator.webkitGetUserMedia(constraints,resolve,reject)}))}catch(error){_log.default.debug("webkitGetUserMedia failed:",error)}if(navigator.mozGetUserMedia)try{return _log.default.debug("Trying mozGetUserMedia"),await new Promise(((resolve,reject)=>{navigator.mozGetUserMedia(constraints,resolve,reject)}))}catch(error){_log.default.debug("mozGetUserMedia failed:",error)}throw new Error("No camera API available")}function showDetailedCompatibilityError(compatibility){let message='<div class="alert alert-danger"><h5><i class="fa fa-exclamation-triangle"></i> Camera Not Supported</h5>';message+=(compatibility.browserInfo.chrome,"Chrome ".concat(compatibility.browserInfo.version||"Unknown")),message+="<br><strong>Mobile:</strong> "+(compatibility.browserInfo.mobile?"Yes":"No"),message+="<br><strong>Secure Context:</strong> "+("https:"===location.protocol?"Yes":"No")+"</p>",message+="<p><strong>Available APIs:</strong></p><ul>",Object.keys(compatibility.apis).forEach((api=>{message+="<li>".concat(api,": ").concat(compatibility.apis[api]?"✓":"✗","</li>")})),message+="</ul>",compatibility.issues.length>0&&(message+="<p><strong>Issues Found:</strong></p><ul>",compatibility.issues.forEach((issue=>{switch(issue){case"insecure_context":message+="<li>Site is not served over HTTPS (required for camera access)</li>";break;case"mobile_no_camera_api":message+="<li>Mobile browser does not support camera API</li>"}})),message+="</ul>"),compatibility.browserInfo.chrome&&compatibility.browserInfo.mobile&&(message+='<div class="mt-3"><strong>Chrome Mobile Solutions:</strong>',message+="<ol>",message+="<li>Ensure Chrome is updated to latest version</li>",message+="<li>Try clearing Chrome cache and data</li>",message+='<li>Check if "Use camera" is enabled in Chrome settings</li>',message+="<li>Try accessing via Chrome Incognito mode</li>",message+="</ol></div>"),message+="</div>",scannerContainer&&(scannerContainer.innerHTML=message)}function processBarcode(barcode){const locationId=locationSelect.value;if(!locationId)return void _notification.default.addNotification({message:"Please select a location first",type:"error"});const originalBarcode=barcode,normalizedBarcode=function(upc){const length=(upc=upc.replace(/[^0-9]/g,"")).length;if(length<8||length>14)return null;switch(length){case 8:default:return upc.padStart(12,"0");case 12:return upc;case 13:return"0"===upc.charAt(0)?upc.substring(1):upc;case 14:return upc.replace(/^0+/,"")}}(barcode);if(!normalizedBarcode)return void showErrorMessage('Invalid UPC format: "'.concat(originalBarcode,'". UPC must be 8-14 digits.'));originalBarcode!==normalizedBarcode&&(_log.default.debug('UPC normalized: "'.concat(originalBarcode,'" -> "').concat(normalizedBarcode,'"')),showSuccessMessage("UPC normalized: ".concat(originalBarcode," → ").concat(normalizedBarcode)));const processingBtn=document.getElementById("scanner-manual-btn");processingBtn&&(processingBtn.disabled=!0,processingBtn.textContent="Processing..."),async function(upc,locationId){if(!window.M||!window.M.cfg||!window.M.cfg.sesskey)return void showErrorMessage("Session expired. Please refresh the page and log in again.");const requestUrl=M.cfg.wwwroot+"/local/equipment/classes/external/validate_upc.php",requestData={upc:upc,locationid:locationId,sesskey:M.cfg.sesskey};_log.default.debug("Processing UPC request:",{url:requestUrl,data:requestData,wwwroot:M.cfg.wwwroot,currentOrigin:window.location.origin,currentHost:window.location.host});try{const response=await fetch(requestUrl,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify(requestData)});if(_log.default.debug("Response received:",{status:response.status,statusText:response.statusText,ok:response.ok,headers:Object.fromEntries(response.headers.entries())}),!response.ok)throw new Error("HTTP ".concat(response.status,": ").concat(response.statusText));const contentType=response.headers.get("content-type");if(!contentType||!contentType.includes("application/json")){const textResponse=await response.text();throw _log.default.error("Non-JSON response received:",textResponse),new Error("Expected JSON response, got: ".concat(contentType,". Response: ").concat(textResponse.substring(0,200)))}const data=await response.json();_log.default.debug("Parsed response data:",data),data.success?(sessionItemCount++,sessionItemIds.push(data.itemid),updateSessionDisplay(),showSuccessMessage(data.product_name)):showErrorMessage(data.message,data.product_url)}catch(error){_log.default.error("Error processing UPC:",{error:error.message,stack:error.stack,upc:upc,locationId:locationId,requestUrl:requestUrl});let errorMessage="Network error occurred. ";"TypeError"===error.name&&error.message.includes("fetch")?errorMessage+="Unable to connect to server. Check your network connection.":error.message.includes("HTTP")?errorMessage+="Server error: ".concat(error.message):error.message.includes("JSON")?errorMessage+="Server returned invalid response format.":errorMessage+="Details: ".concat(error.message),showErrorMessage(errorMessage)}}(normalizedBarcode,locationId).finally((()=>{processingBtn&&(processingBtn.disabled=!1,processingBtn.textContent="Process")}))}function updateSessionDisplay(){sessionCount.textContent=sessionItemCount,printQrBtn.style.display=sessionItemCount>0?"inline-block":"none"}function showSuccessMessage(productName){const alert=document.createElement("div");alert.className="alert alert-success alert-dismissible fade show mt-2",alert.innerHTML="\n            <strong>✓ Success!</strong> Added ".concat(productName,' to inventory.\n            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>\n        '),sessionItems.appendChild(alert),setTimeout((()=>{alert.parentNode&&alert.remove()}),3e3)}function showErrorMessage(message){let productUrl=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const alert=document.createElement("div");alert.className="alert alert-danger alert-dismissible fade show mt-2";let content="<strong>✗ Error:</strong> ".concat(message);productUrl&&(content+=' <a href="'.concat(productUrl,'" class="alert-link">Add this product type</a>')),content+='<button type="button" class="btn-close" data-bs-dismiss="alert"></button>',alert.innerHTML=content,sessionItems.appendChild(alert)}function updateProductDetailsPanel(message){let alertType=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"info";const productDetails=document.getElementById("product-details");if(!productDetails)return void _log.default.debug("Product details panel not found");const alertClass="alert alert-".concat(alertType);productDetails.innerHTML='\n            <div class="'.concat(alertClass,'">\n                <i class="fa fa-info-circle me-2"></i>\n                ').concat(message,'\n            </div>\n            <h5 class="mt-3">How to Add Items:</h5>\n            <ol>\n                <li>Select the storage location where items will be placed</li>\n                <li>Scan the UPC barcode on each item\'s packaging</li>\n                <li>Each scan will automatically add one item to inventory</li>\n                <li>Continue scanning until all items are added</li>\n            </ol>\n            <p class="mb-0">\n                <strong>Note: </strong>\n                If you scan a UPC that isn\'t in the system, you\'ll be prompted to add it as a new product type first.\n            </p>\n        ')}locationSelect.addEventListener("change",(function(){this.value?(initScanner(),sessionItemCount=0,sessionItemIds=[],updateSessionDisplay(),updateProductDetailsPanel("Location selected. Ready to scan UPC codes or enter them manually.")):(scannerContainer&&(scannerContainer.innerHTML=""),scanner&&(scanner.destroy(),scanner=null),updateProductDetailsPanel("Please select a storage location first."))})),addItemBtn&&addItemBtn.addEventListener("click",(function(){const upc=manualUpc.value.trim();upc&&(processBarcode(upc),manualUpc.value="")})),manualUpc&&manualUpc.addEventListener("keypress",(function(e){"Enter"===e.key&&addItemBtn.click()})),printQrBtn&&printQrBtn.addEventListener("click",(function(){if(sessionItemIds.length>0){const url=M.cfg.wwwroot+"/local/equipment/inventory/generate_qr.php",params=new URLSearchParams({action:"generate_for_items",itemids:sessionItemIds.join(","),sesskey:M.cfg.sesskey});window.open(url+"?"+params.toString(),"_blank")}}))}_exports.init=()=>{_log.default.debug("local_equipment/add-items-scanner: init() called"),_log.default.debug("local_equipment/add-items-scanner: document.readyState =",document.readyState),"loading"===document.readyState?(_log.default.debug("local_equipment/add-items-scanner: DOM still loading, adding DOMContentLoaded listener"),document.addEventListener("DOMContentLoaded",(function(){_log.default.debug("local_equipment/add-items-scanner: DOMContentLoaded event fired"),initializeScanner()}))):(_log.default.debug("local_equipment/add-items-scanner: DOM already ready, initializing immediately"),initializeScanner())}}));

//# sourceMappingURL=add-items-scanner.min.js.map