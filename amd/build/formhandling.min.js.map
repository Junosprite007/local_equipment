{"version":3,"file":"formhandling.min.js","sources":["../src/formhandling.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for the add partnerships form.\n *\n * @module     local_equipment/formhandling\n * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport { get_string as getString } from 'core/str';\nimport Log from 'core/log';\n\n/**\n * Initialize the add partnerships form functionality.\n */\nexport const init = () => {\n    Log.debug('init function called in formhandling.js');\n};\n\n/**\n * Set up partnerships handling.\n * @param {string} name The name of the fieldset.\n * @param {string} type The type of element.\n */\nexport const setupStudentsHandling = (name, type) => {\n    setupFieldsetNameUpdates(name, type);\n    Log.debug('Setup student handling javascript initialized');\n    Log.debug(name);\n    Log.debug(`${name}${type}`);\n    const selector = `fieldset[id^='id_${name}${type}_']`;\n\n    $(document).on('click', `.local-equipment-remove-${name}`, function () {\n        const $fieldset = $(this).closest(selector);\n        $fieldset.remove();\n        updateFieldsetNumbers(name, type);\n        updateHiddenFields(name, type, true);\n        renumberFormElements(name, type);\n        updateTrashIcons(name, type);\n    });\n\n    updateTrashIcons(name, type);\n};\n\n/**\n * Update the unique number of the fieldset.\n * @param {string} name The name of the fieldset.\n * @param {string} type The type of element.\n */\nconst updateFieldsetNumbers = (name, type) => {\n    Log.debug(`${name} ${type}`);\n    $(`.local-equipment-${name}-${type}`).each((index, element) => {\n        getString(name, 'local_equipment', index + 1)\n            .then((string) => {\n                $(element).text(string);\n            })\n            .catch((error) => {\n                Log.error(`Error updating ${name} ${type}: `, error);\n            });\n    });\n};\n\n/**\n * Update hidden fields.\n * @param {string} name The name of the fieldset.\n * @param {string} type The type of element.\n * @param {boolean} usePlural Whether or not the 'name' input field should be pluralized.\n */\nconst updateHiddenFields = (name, type, usePlural = false) => {\n    const inputName = usePlural ? name + 's' : name;\n    const fieldsetsCount = $(`fieldset[id^='id_${name}${type}_']`).length;\n    $(`input[name=\"${inputName}\"]`).val(fieldsetsCount);\n    Log.debug(`Updated ${inputName} to ${fieldsetsCount}`);\n\n    // Update the URL if necessary\n    const url = new URL(window.location.href);\n    url.searchParams.set('repeatno', fieldsetsCount);\n    window.history.replaceState({}, '', url);\n};\n\n/**\n * Renumber form elements.\n * @param {string} name The name of the fieldset.\n * @param {string} type The type of element.\n */\nconst renumberFormElements = (name, type) => {\n    $(`fieldset[id^='id_${name}${type}_']`).each((index, fieldset) => {\n        $(fieldset)\n            .find('input, select, textarea')\n            .each((_, element) => {\n                const name = $(element).attr('name');\n                if (name) {\n                    const newName = name.replace(/\\[\\d+\\]/, `[${index}]`);\n                    $(element).attr('name', newName);\n                }\n                const id = $(element).attr('id');\n                if (id) {\n                    const newId = id.replace(/_\\d+_/, `_${index}_`);\n                    $(element).attr('id', newId);\n                }\n            });\n    });\n};\n\n/**\n * Update trash icons visibility.\n * @param {string} name The name of the fieldset.\n * @param {string} type The type of element.\n */\nconst updateTrashIcons = (name, type) => {\n    const fieldsets = $(`fieldset[id^='id_${name}${type}_']`);\n    if (fieldsets.length > 1) {\n        $(`.local-equipment-remove-${name}`).show();\n    } else {\n        $(`.local-equipment-remove-${name}`).hide();\n    }\n};\n\n\n/**\n * Enhance multi-select fields to allow selection without CTRL key.\n */\nconst enhanceMultiSelects = () => {\n    Log.debug('Enhancing multi-select fields');\n    $('select[multiple]').each((index, element) => {\n        $(element)\n            .on('mousedown', (e) => {\n                e.preventDefault();\n\n                const option = $(e.target).closest('option');\n                if (option.length) {\n                    option.prop('selected', !option.prop('selected'));\n                    $(element).trigger('change');\n                }\n            })\n            .on('mousemove', (e) => {\n                e.preventDefault();\n            });\n    });\n};\n\n/**\n * Set up real-time header updates for student names.\n * @param {string} name The name of the fieldset.\n * @param {string} type The type of element.\n */\nexport const setupFieldsetNameUpdates = (name, type) => {\n    const updateFieldsetHeader = (fieldset) => {\n        const index = parseInt(fieldset.id.split('_').pop(), 10);\n        const firstNameInput = fieldset.querySelector(\n            `#id_${name}_firstname_${index}`\n        );\n        const headerField = fieldset.querySelector(`#id_${name}name_${index}`);\n        const header = fieldset.querySelector('h3');\n\n        if (headerField && header) {\n            const updateHeader = () => {\n                const headerName = headerField.value.trim();\n                if (headerName) {\n                    // Swap the two next lines if you want only the name to show with no description.\n                    // getString('a', 'local_equipment', headerName)\n                    getString(name + type, 'local_equipment', headerName)\n                        .then((str) => {\n                            header.textContent = str;\n                        })\n                        .catch((error) => {\n                            // eslint-disable-next-line no-console\n                            console.error(\n                                'Error updating student header:',\n                                error\n                            );\n                            header.textContent = `Student ${index + 1}`;\n                        });\n                } else {\n                    getString(name, 'local_equipment', index + 1)\n                        .then((str) => {\n                            header.textContent = str;\n                        })\n                        .catch((error) => {\n                            // eslint-disable-next-line no-console\n                            console.error(\n                                'Error updating student header:',\n                                error\n                            );\n                            header.textContent = `Student ${index + 1}`;\n                        });\n                }\n            };\n\n            headerField.addEventListener('input', updateHeader);\n            // Trigger initial update\n            updateHeader();\n        }\n        if (firstNameInput && header) {\n            const updateHeader = () => {\n                const headerName = firstNameInput.value.trim();\n                if (headerName) {\n                    // Swap the two next lines if you want only the name to show with no description.\n                    // getString('a', 'local_equipment', headerName)\n                    getString(name + type, 'local_equipment', headerName)\n                        .then((str) => {\n                            header.textContent = str;\n                        })\n                        .catch((error) => {\n                            // eslint-disable-next-line no-console\n                            console.error(\n                                'Error updating student header:',\n                                error\n                            );\n                            header.textContent = `Student ${index + 1}`;\n                        });\n                } else {\n                    getString(name, 'local_equipment', index + 1)\n                        .then((str) => {\n                            header.textContent = str;\n                        })\n                        .catch((error) => {\n                            // eslint-disable-next-line no-console\n                            console.error(\n                                'Error updating student header:',\n                                error\n                            );\n                            header.textContent = `Student ${index + 1}`;\n                        });\n                }\n            };\n\n            firstNameInput.addEventListener('input', updateHeader);\n            // Trigger initial update\n            updateHeader();\n        }\n    };\n\n    const setupFieldset = (fieldset) => {\n        updateFieldsetHeader(fieldset);\n    };\n\n\n    // Initial setup for existing student fields\n    document\n        .querySelectorAll(`fieldset[id^=\"id_${name}${type}_\"]`)\n        .forEach(setupFieldset);\n\n    // Setup for dynamically added student fields\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            if (mutation.type === 'childList') {\n                mutation.addedNodes.forEach((node) => {\n                    if (\n                        node.nodeType === Node.ELEMENT_NODE &&\n                        node.matches(`fieldset[id^=\"id_${name}${type}_\"]`)\n                    ) {\n                        setupFieldset(node);\n                    }\n                });\n            }\n        });\n    });\n\n    observer.observe(document.querySelector('form'), {\n        childList: true,\n        subtree: true,\n    });\n};\n\nexport const setupMultiSelects = () => {\n    enhanceMultiSelects();\n};\n\n\n// /**\n//  * Collapse all student fieldsets.\n//  * @param {boolean} expanded Whether or not the fieldsets should be expanded.\n//  */\n\n// export const collapseNewStudentFieldset = () => {\n//     const fieldsets = document.querySelectorAll('fieldset[id^=\"id_studentheader_\"]');\n//     const lastFieldset = fieldsets[fieldsets.length - 1];\n//     if (lastFieldset) {\n//         const container = lastFieldset.querySelector('.fcontainer');\n//         if (container) {\n//             container.classList.remove('show');\n//         }\n//         const toggleButton = lastFieldset.querySelector('.fheader');\n//         if (toggleButton) {\n//             toggleButton.setAttribute('aria-expanded', 'false');\n//         }\n//     }\n// };\n\n// /**\n//  * Set up real-time header updates for student names.\n//  * @param {string} name The name of the fieldset.\n//  * @param {string} type The type of element.\n//  */\n// export const setupFieldsetNameUpdates = (name, type) => {\n//     const updateHeader = (index) => {\n//         const firstNameInput = document.querySelector(\n//             `#id_${name}_firstname_${index}`\n//         );\n//         const header = document.querySelector(`#id_${name}${type}_${index} h3`);\n\n//         if (firstNameInput && header) {\n//             firstNameInput.addEventListener('input', (event) => {\n//                 const headerName = event.target.value.trim();\n//                 getString(\n//                     name + type,\n//                     'local_equipment',\n//                     headerName || index + 1\n//                 )\n//                     .then((str) => {\n//                         header.textContent = str;\n//                     })\n//                     .catch((error) => {\n//                         // eslint-disable-next-line no-console\n//                         console.error(`Error updating ${name} ${type}:`, error);\n//                         header.textContent = `Student ${index + 1}`;\n//                     });\n//             });\n//         }\n//     };\n\n//     // Initial setup for existing student fields\n//     document\n//         .querySelectorAll(`fieldset[id^=\"id_${name}${type}_\"]`)\n//         .forEach((fieldset, index) => {\n//             updateHeader(index);\n//         });\n\n//     // Setup for dynamically added student fields\n//     const observer = new MutationObserver((mutations) => {\n//         mutations.forEach((mutation) => {\n//             if (mutation.type === 'childList') {\n//                 mutation.addedNodes.forEach((node) => {\n//                     if (\n//                         node.nodeType === Node.ELEMENT_NODE &&\n//                         node.matches(`fieldset[id^=\"id_${name}${type}_\"]`)\n//                     ) {\n//                         const index = parseInt(node.id.split('_').pop(), 10);\n//                         updateHeader(index);\n//                     }\n//                 });\n//             }\n//         });\n//     });\n\n//     observer.observe(document.querySelector('form'), {\n//         childList: true,\n//         subtree: true,\n//     });\n// };\n"],"names":["debug","name","type","setupFieldsetNameUpdates","selector","document","on","this","closest","remove","updateFieldsetNumbers","updateHiddenFields","renumberFormElements","updateTrashIcons","each","index","element","then","string","text","catch","error","usePlural","inputName","fieldsetsCount","length","val","url","URL","window","location","href","searchParams","set","history","replaceState","fieldset","find","_","attr","newName","replace","id","newId","show","hide","setupFieldset","parseInt","split","pop","firstNameInput","querySelector","headerField","header","updateHeader","headerName","value","trim","str","textContent","console","addEventListener","updateFieldsetHeader","querySelectorAll","forEach","MutationObserver","mutations","mutation","addedNodes","node","nodeType","Node","ELEMENT_NODE","matches","observe","childList","subtree","e","preventDefault","option","target","prop","trigger"],"mappings":"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"}