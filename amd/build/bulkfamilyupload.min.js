define("local_equipment/bulkfamilyupload",["exports","jquery","core/str","core/log"],(function(_exports,_jquery,_str,_log){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * JavaScript for bulk family upload functionality.
   *
   * @module     local_equipment/bulkfamilyupload
   * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.validateFamilyData=_exports.init=void 0,_jquery=_interopRequireDefault(_jquery),_log=_interopRequireDefault(_log);_exports.init=()=>{const $textarea=(0,_jquery.default)("#id_familydata"),$preprocessDiv=(0,_jquery.default)("#family-preprocess-display"),$preprocessButton=(0,_jquery.default)(".preprocessbutton"),$submitButton=(0,_jquery.default)("#id_submitbutton"),$partnershipData=(0,_jquery.default)("#id_partnershipdata"),partnershipDataValue=JSON.parse($partnershipData.attr("data-partnerships")),$courseData=(0,_jquery.default)("#id_coursedata"),courseDataValue=JSON.parse($courseData.attr("data-courses"));$preprocessDiv.css("height",$textarea.outerHeight()+"px"),$textarea.on("input",(()=>{$submitButton.prop("disabled",!0)}));$preprocessButton.on("click",(async e=>{e.preventDefault();try{$textarea.val($textarea.val().replace(/^\s+|\s+$/g,""));const data={input:$textarea.val(),partnerships:partnershipDataValue,courses:courseDataValue},families=await validateFamilyData(data);_log.default.debug("families: "),_log.default.debug(families),$preprocessDiv.html(families.html),$preprocessDiv.css("height",$textarea.outerHeight()+"px");const hasErrors=families.html.includes("alert-danger");$submitButton.prop("disabled",hasErrors);const messageKey=hasErrors?"preprocessing_failure":"preprocessing_success",message=await(0,_str.get_string)(messageKey,"local_equipment");_log.default.debug(message)}catch(error){_log.default.error("Error in preprocessing: "),_log.default.error(error),$submitButton.prop("disabled",!0);const errorMessage=await(0,_str.get_string)("errorvalidatingfamilydata","local_equipment");_log.default.debug(errorMessage)}})),(0,_jquery.default)(window).on("resize",(()=>{$preprocessDiv.css("height",$textarea.outerHeight()+"px")}))};const validateFamilyData=async _ref=>{let{input:input,partnerships:partnerships,courses:courses}=_ref,familiesData=[],familiesHTML=[];if(_log.default.debug("input: "),_log.default.debug(input),!input||"string"!=typeof input)throw new Error((0,_str.get_string)("invalidinput","local_equipment",(0,_str.get_string)("expectedanonemptystring","local_equipment")));const regexes={email:/^[^\s@]+@[^\s@]+\.[^\s@]+$/,phone:/^(\+?\d{1,2}\s?)?(\(?\d{3}\)?[\s.-]?)?\d{3}[\s.-]?\d{4}$/,name:/^[a-zA-Z\s'-]+$/,partnership:/^-?\d+$/,student:/^\*(?!\*)(.)/,courses:/^\*\*.*$/},parsePhoneNumber=async phoneNumber=>{let parsedPhoneNumber=phoneNumber.replace(/[()\-\s+.]/g,"");if(10===parsedPhoneNumber.length&&"1"!==parsedPhoneNumber[0])parsedPhoneNumber="+1"+parsedPhoneNumber;else{if(11!==parsedPhoneNumber.length||"1"!==parsedPhoneNumber[0])return'<span class="pl-2 pr-2 alert-danger">'+await(0,_str.get_string)("invalidphonenumber","local_equipment",parsedPhoneNumber)+"</span>";parsedPhoneNumber="+"+parsedPhoneNumber}return parsedPhoneNumber},familiesInput=input.split("\n\n").filter((family=>family.trim()));return familiesHTML=await Promise.all(familiesInput.map((async family=>{_log.default.debug("Processing family...");let parents=[],students=[],parent={},student={},partnership={},inStudentSection=!1,familyData={},familyHTML=[],partnershipAdded=!1;const promiseResults=await Promise.all(family.split("\n").map((async line=>{_log.default.debug("Processing family... mapping..."),line.trim();const textType=(line=>{for(const[type,regex]of Object.entries(regexes))if(regex.test(line))return"phone"===type&&line.length<10?"unknown":type;return"unknown"})(line);if("student"===textType&&(inStudentSection=!0),"unknown"===textType){const errorString=await(0,_str.get_string)("unrecognizedformat","local_equipment",line);familyHTML.push('<span class="pl-2 alert-danger">'.concat(errorString,"</span>"))}else if(partnershipAdded&&"partnership"===textType){const errorString=await(0,_str.get_string)("connotaddmorethanonepartnership","local_equipment",line);familyHTML.push('<span class="pl-2 alert-danger">'.concat(errorString,"</span>"))}else"partnership"===textType?(({partnership:partnership,inStudentSection:inStudentSection}=await(async id=>{let partnership={};return partnership=partnerships[id]?{data:id,html:partnerships[id]}:{data:id,html:'<span class="pl-2 pr-2 alert-danger">'+await(0,_str.get_string)("partnershipnumbernotfound","local_equipment",id)+"</span>"},{partnership:partnership,inStudentSection:!0}})(line)),familyHTML.push(partnership.html),familyData.partnership=partnership.data,partnershipAdded=!0):inStudentSection?(({student:student}=await(async(line,textType,student)=>{switch(student={...student,[textType]:{html:line,data:line}},textType){case"student":{const name=line.replace("*","").trim();student[textType].data=name,student[textType].html=name;break}case"email":student[textType].data=line,student[textType].html='<span class="pl-4 pr-4">'+line+"</span>";break;case"phone":{let formattedPhone=await parsePhoneNumber(line);student[textType].data=formattedPhone,student[textType].html='<span class="pl-4 pr-4">'+formattedPhone+"</span>";break}case"courses":{const coursesData=line.replace("**","").trim().split(",").map((course=>course.trim())),coursesHTML=await Promise.all(coursesData.map((async id=>{let courseName="";if(courses[id]){const enDash="â€“",regex=new RegExp("".concat(id," ").concat(enDash," "),"g");courseName=courses[id].replace(regex,"")}else{const errorMessage=await(0,_str.get_string)("idnotfound","local_equipment",id);courseName='<span class="pl-2 pr-2 alert-danger">'.concat(errorMessage,"</span>")}return _log.default.debug("courseName: ",courseName),_log.default.debug("id: ",id),courseName}))).join(", ");student[textType].data=coursesData,student[textType].html=coursesHTML;break}}return student})(line,textType,student)),"courses"===textType&&(students.push(student),student={}),familyHTML.push(student[textType].html)):(({parent:parent}=await(async(line,textType,parent)=>{switch(parent={...parent,[textType]:{html:line,data:line}},textType){case"email":parent[textType].html='<span class="pl-4 pr-4">'+line+"</span>";break;case"phone":{let formattedPhone=await parsePhoneNumber(line);parent[textType].data=formattedPhone,parent[textType].html='<span class="pl-4 pr-4">'+formattedPhone+"</span>";break}}return parent})(line,textType,parent)),"email"===textType&&(parents.push(parent),parent={}),familyHTML.push(parent[textType].html))})));return _log.default.debug("promiseResults: "),_log.default.debug(promiseResults),familyData={parents:parents,students:students,partnership:partnership},familiesData.push(familyData),familyHTML='<div class="bg-light border p-3">'.concat(familyHTML.join("<br />"),"</div>"),familiesHTML.push(familyHTML),familyHTML}))),_log.default.debug("family stuff: "),_log.default.debug(familiesData),_log.default.debug(familiesHTML),_log.default.debug(familiesInput),_log.default.debug(familiesHTML),{data:familiesData,html:familiesHTML.join("<br>")}};_exports.validateFamilyData=validateFamilyData}));

//# sourceMappingURL=bulkfamilyupload.min.js.map