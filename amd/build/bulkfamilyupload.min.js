define("local_equipment/bulkfamilyupload",["exports","jquery","core/str","core/log"],(function(_exports,_jquery,_str,_log){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * JavaScript for bulk family upload functionality.
   *
   * @module     local_equipment/bulkfamilyupload
   * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.validateFamilyData=_exports.init=void 0,_jquery=_interopRequireDefault(_jquery),_log=_interopRequireDefault(_log);_exports.init=()=>{const $textarea=(0,_jquery.default)("#id_familiesinputdata"),$preprocessDiv=(0,_jquery.default)("#id_familypreprocessdisplay"),$preprocessButton=(0,_jquery.default)(".preprocessbutton"),$shownexterrorContainer=(0,_jquery.default)(".shownexterror-container"),$noerrorsfoundContainer=(0,_jquery.default)(".noerrorsfound-container"),$shownexterrorButton=$shownexterrorContainer.find("button"),$noerrorsfoundButton=$noerrorsfoundContainer.find("button"),$submitButton=(0,_jquery.default)("#id_submitbutton"),$partnershipData=(0,_jquery.default)("#id_partnershipdata"),$courseData=(0,_jquery.default)("#id_coursedata"),partnershipDataValue=JSON.parse($partnershipData.attr("data-partnerships")),courseDataValue=JSON.parse($courseData.attr("data-courses"));let currentErrorIndex=-1;const processCurrentData=async()=>{try{const data={input:cleanInputText($textarea.val()),partnerships:partnershipDataValue,courses:courseDataValue},families=await validateFamilyData(data);_log.default.debug("families:",families),$preprocessDiv.html(families.html),$preprocessDiv.css("height",$textarea.outerHeight()+"px");const hasErrors=families.html.includes("alert-danger");$shownexterrorButton.prop("hidden",!hasErrors),$shownexterrorButton.prop("disabled",!hasErrors),$noerrorsfoundButton.prop("hidden",hasErrors),$submitButton.prop("disabled",hasErrors),$shownexterrorButton.prop({disabled:!hasErrors,hidden:!hasErrors}),hasErrors&&-1===currentErrorIndex&&(currentErrorIndex=0,scrollToError(currentErrorIndex))}catch(error){_log.default.error("Error in preprocessing:",error),$submitButton.prop("disabled",!0);const errorMessage=await(0,_str.get_string)("errorvalidatingfamilydata","local_equipment");$preprocessDiv.html('<div class="alert alert-danger">'.concat(errorMessage,"</div>"))}};$preprocessDiv.css("height",$textarea.outerHeight()+"px"),$textarea.on("input",(()=>{$submitButton.prop("disabled",!0)}));const cleanInputText=text=>text&&"string"==typeof text?text.replace(/^\s+|\s+$/g,""):"",scrollToError=index=>{const $errors=$preprocessDiv.find(".alert-danger");if(index>=0&&index<$errors.length){(0,_jquery.default)(".error-highlight").removeClass("error-highlight");const $currentError=$errors.eq(index);$currentError.addClass("error-highlight"),(element=>{const $container=(0,_jquery.default)("#id_familypreprocessdisplay"),containerTop=$container.offset().top,scroll=(0,_jquery.default)(element).offset().top-containerTop-$container.height()/2+(0,_jquery.default)(element).height();$container.scrollTop($container.scrollTop()+scroll)})($currentError.get(0)),(errorInfo=>{if(-1===errorInfo.lineNumber)return;const lines=$textarea.val().split("\n");let position=lines.slice(0,errorInfo.lineNumber).reduce(((pos,line)=>pos+line.length+1),0);const textareaElement=$textarea.get(0);textareaElement.focus(),errorInfo.errorStart>=0&&errorInfo.errorEnd>=0?textareaElement.setSelectionRange(position+errorInfo.errorStart,position+errorInfo.errorEnd):textareaElement.setSelectionRange(position,position+lines[errorInfo.lineNumber].length);const lineHeight=parseInt($textarea.css("line-height")),scrollPosition=errorInfo.lineNumber*lineHeight;$textarea.scrollTop(scrollPosition-$textarea.height()/2)})(($error=>{const errorText=$error.text().trim(),lines=$textarea.val().split("\n");if(_log.default.debug("errorText: "),_log.default.debug(errorText),_log.default.debug("lines: "),_log.default.debug(lines),errorText.includes("Course ID")){const courseIdMatch=errorText.match(/Course ID #(.+) not found/);if(_log.default.debug("courseIdMatch: "),_log.default.debug(courseIdMatch),courseIdMatch){const courseId=courseIdMatch[1],lineIndex=lines.findIndex((line=>line.startsWith("**")&&line.includes(courseId)));if(-1!==lineIndex){const start=lines[lineIndex].indexOf(courseId);return{lineNumber:lineIndex,errorStart:start,errorEnd:start+courseId.length}}}}const cleanErrorText=errorText.replace(/^(Error:|Invalid:|Not found:|Course ID)\s*/i,"").trim();return{lineNumber:lines.findIndex((line=>{const cleanLine=line.trim();return cleanLine&&(cleanErrorText.includes(cleanLine)||cleanLine.includes(cleanErrorText))})),errorStart:-1,errorEnd:-1}})($currentError))}};(0,_jquery.default)("<style>").text("\n            .error-highlight {\n                animation: highlight-pulse 1s;\n                box-shadow: 0 0 8px rgba(220, 53, 69, 0.5);\n            }\n            @keyframes highlight-pulse {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.02); }\n                100% { transform: scale(1); }\n            }\n        ").appendTo("head"),$preprocessButton.on("click",(async e=>{e.preventDefault(),$textarea.val(cleanInputText($textarea.val())),currentErrorIndex=-1,await processCurrentData()})),$shownexterrorButton.on("click",(async e=>{e.preventDefault(),await processCurrentData();const $errors=$preprocessDiv.find(".alert-danger");$errors.length>0&&(currentErrorIndex=(currentErrorIndex+1)%$errors.length,scrollToError(currentErrorIndex))})),(0,_jquery.default)(window).on("resize",(()=>{$preprocessDiv.css("height",$textarea.outerHeight()+"px")}))};const validateFamilyData=async _ref=>{let{input:input,partnerships:partnerships,courses:courses}=_ref;if(!input||"string"!=typeof input)throw new Error((0,_str.get_string)("invalidinput","local_equipment",(0,_str.get_string)("expectedanonemptystring","local_equipment")));const regexes={email:/^[^\s@]+@[^\s@]+\.[^\s@]+$/,phone:/^(\+?\d{1,2}\s?)?(\(?\d{3}\)?[\s.-]?)?\d{3}[\s.-]?\d{4}$/,name:/^[a-zA-Z\s'-]+$/,partnership:/^-?\d+$/,student:/^\*(?!\*)(.)/,courses:/^\*\*.*$/},determineTextType=line=>{for(const[type,regex]of Object.entries(regexes))if(regex.test(line))return"phone"===type&&line.length<10?"unknown":type;return"unknown"},parsePhoneNumber=async phoneNumber=>{let parsedPhoneNumber=phoneNumber.replace(/[()\-\s+.]/g,"");if(10===parsedPhoneNumber.length&&"1"!==parsedPhoneNumber[0])parsedPhoneNumber="+1"+parsedPhoneNumber;else{if(11!==parsedPhoneNumber.length||"1"!==parsedPhoneNumber[0])return'<span class="pl-2 pr-2 alert-danger">'+await(0,_str.get_string)("invalidphonenumber","local_equipment",parsedPhoneNumber)+"</span>";parsedPhoneNumber="+"+parsedPhoneNumber}return parsedPhoneNumber},processParentInfo=async(line,textType,parent)=>{switch(parent={...parent,[textType]:{html:line,data:line}},textType){case"email":parent[textType].html='<span class="pl-4 pr-4">'+line+"</span>";break;case"phone":{let formattedPhone=await parsePhoneNumber(line);parent[textType].data=formattedPhone,parent[textType].html='<span class="pl-4 pr-4">'+formattedPhone+"</span>";break}}return parent},processStudentInfo=async(line,textType,student)=>{switch(student={...student,[textType]:{html:line,data:line}},textType){case"student":{const name=line.replace("*","").trim();student={...student,[textType]:{data:name,html:name}};break}case"email":student[textType].data=line,student[textType].html='<span class="pl-4 pr-4">'+line+"</span>";break;case"phone":{let formattedPhone=await parsePhoneNumber(line);student[textType].data=formattedPhone,student[textType].html='<span class="pl-4 pr-4">'+formattedPhone+"</span>";break}case"courses":{const coursesData=line.replace("**","").trim().split(",").map((course=>course.trim())),processedCourses=[],coursesHTML=await Promise.all(coursesData.map((async id=>{const courseAlreadyProcessed=processedCourses.includes(id);let courseName="";if(courses[id]&&!courseAlreadyProcessed){processedCourses.push(id);const enDash="â€“",regex=new RegExp("".concat(id," ").concat(enDash," "),"g");courseName=courses[id].replace(regex,"")}else if(courses[id]&&courseAlreadyProcessed){processedCourses.push(id);const errorMessage=await(0,_str.get_string)("coursealreadyadded","local_equipment",id);courseName='<span class="pl-2 pr-2 alert-danger">'.concat(errorMessage,"</span>")}else{const errorMessage=await(0,_str.get_string)("courseidnotfound","local_equipment",id);courseName='<span class="pl-2 pr-2 alert-danger">'.concat(errorMessage,"</span>")}return courseName})));student[textType].data=coursesData,student[textType].html='<span class="pl-4 pr-4">'+coursesHTML.join(", ")+"</span>";break}}return student},processPartnershipInfo=async id=>{let partnership={};return partnership=partnerships[id]?{data:id,html:partnerships[id].name}:{data:id,html:'<span class="pl-2 pr-2 alert-danger">'+await(0,_str.get_string)("partnershipnumbernotfound","local_equipment",id)+"</span>"},{partnership:partnership,inStudentSection:!0}},processFamily=async family=>{try{let parents=[],students=[],parent={},student={},partnership={},inStudentSection=!1,familyHTML=[],partnershipAdded=!1;const lines=family.split("\n").map((line=>line.trim())).filter((line=>line));for(const line of lines)try{const textType=determineTextType(line);if("student"===textType&&(inStudentSection=!0),"unknown"===textType){const errorString=await(0,_str.get_string)("unrecognizedformat","local_equipment",line);familyHTML.push('<span class="pl-2 alert-danger">'.concat(errorString,"</span>"));continue}if(partnershipAdded&&"partnership"===textType){const errorString=await(0,_str.get_string)("connotaddmorethanonepartnership","local_equipment",line);familyHTML.push('<span class="pl-2 alert-danger">'.concat(errorString,"</span>"));continue}switch(!0){case"partnership"===textType:{const result=await processPartnershipInfo(line);partnership=result.partnership,inStudentSection=result.inStudentSection,familyHTML.push(partnership.html),partnershipAdded=!0;break}case!inStudentSection:parent=await processParentInfo(line,textType,parent),parent[textType]&&familyHTML.push(parent[textType].html),"email"===textType&&(parents.push({...parent}),parent={});break;case inStudentSection:student=await processStudentInfo(line,textType,student),student[textType]&&familyHTML.push(student[textType].html),"courses"===textType&&(students.push({...student}),student={});break}}catch(lineError){_log.default.error("Error processing line:",line,lineError);const errorString=await(0,_str.get_string)("errorprocessingline","local_equipment",line);familyHTML.push('<span class="pl-2 alert-danger">'.concat(errorString,"</span>"))}Object.keys(student).length>0&&students.push({...student});return{data:{parents:parents,students:students,partnership:partnership},html:'<div class="bg-light border p-3">'.concat(familyHTML.join("<br />"),"</div>")}}catch(error){_log.default.error("Error processing family:",error);const errorString=await(0,_str.get_string)("errorprocessingfamily","local_equipment");return{data:{},html:'<div class="bg-light border p-3"><span class="pl-2 alert-danger">'.concat(errorString,"</span></div>")}}};try{const familiesInput=input.split("\n\n").filter((family=>family.trim())),results=await Promise.all(familiesInput.map(processFamily)),familiesData=results.map((result=>result.data)).filter(Boolean),familiesHTML=results.map((result=>result.html));return _log.default.debug("Processing complete:",{familiesCount:familiesData.length,dataStructure:familiesData,htmlContent:familiesHTML}),{data:familiesData,html:familiesHTML.join("<br>")}}catch(error){_log.default.error("Error in validateFamilyData:",error);const errorMessage=await(0,_str.get_string)("errorvalidatingfamilydata","local_equipment");return{data:[],html:'<div class="alert alert-danger">'.concat(errorMessage,"</div>")}}};_exports.validateFamilyData=validateFamilyData}));

//# sourceMappingURL=bulkfamilyupload.min.js.map