define("local_equipment/formhandling",["exports","jquery","core/str","core/log"],(function(_exports,_jquery,_str,_log){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * JavaScript for the add partnerships form.
   *
   * @module     local_equipment/formhandling
   * @copyright  2024 Joshua Kirby <josh@funlearningcompany.com>
   * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.setupStudentsHandling=_exports.setupFieldsetNameUpdates=_exports.init=void 0,_jquery=_interopRequireDefault(_jquery),_log=_interopRequireDefault(_log);_exports.init=()=>{_log.default.debug("init function called in formhandling.js")};_exports.setupStudentsHandling=(name,type)=>{setupFieldsetNameUpdates(name,type),_log.default.debug("Setup student handling javascript initialized"),_log.default.debug(name),_log.default.debug("".concat(name).concat(type));const selector="fieldset[id^='id_".concat(name).concat(type,"_']");(0,_jquery.default)(document).on("click",".local-equipment-remove-".concat(name),(function(){(0,_jquery.default)(this).closest(selector).remove(),updateFieldsetNumbers(name,type),updateHiddenFields(name,type,!0),renumberFormElements(name,type),updateTrashIcons(name,type)})),updateTrashIcons(name,type)};const updateFieldsetNumbers=(name,type)=>{_log.default.debug("".concat(name," ").concat(type)),(0,_jquery.default)(".local-equipment-".concat(name,"-").concat(type)).each(((index,element)=>{(0,_str.get_string)(name,"local_equipment",index+1).then((string=>{(0,_jquery.default)(element).text(string)})).catch((error=>{_log.default.error("Error updating ".concat(name," ").concat(type,": "),error)}))}))},updateHiddenFields=function(name,type){let usePlural=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const inputName=usePlural?name+"s":name,fieldsetsCount=(0,_jquery.default)("fieldset[id^='id_".concat(name).concat(type,"_']")).length;(0,_jquery.default)('input[name="'.concat(inputName,'"]')).val(fieldsetsCount),_log.default.debug("Updated ".concat(inputName," to ").concat(fieldsetsCount));const url=new URL(window.location.href);url.searchParams.set("repeatno",fieldsetsCount),window.history.replaceState({},"",url)},renumberFormElements=(name,type)=>{(0,_jquery.default)("fieldset[id^='id_".concat(name).concat(type,"_']")).each(((index,fieldset)=>{(0,_jquery.default)(fieldset).find("input, select, textarea").each(((_,element)=>{const name=(0,_jquery.default)(element).attr("name");if(name){const newName=name.replace(/\[\d+\]/,"[".concat(index,"]"));(0,_jquery.default)(element).attr("name",newName)}const id=(0,_jquery.default)(element).attr("id");if(id){const newId=id.replace(/_\d+_/,"_".concat(index,"_"));(0,_jquery.default)(element).attr("id",newId)}}))}))},updateTrashIcons=(name,type)=>{(0,_jquery.default)("fieldset[id^='id_".concat(name).concat(type,"_']")).length>1?(0,_jquery.default)(".local-equipment-remove-".concat(name)).show():(0,_jquery.default)(".local-equipment-remove-".concat(name)).hide()},setupFieldsetNameUpdates=(name,type)=>{const setupFieldset=fieldset=>{(fieldset=>{const index=parseInt(fieldset.id.split("_").pop(),10),firstNameInput=fieldset.querySelector("#id_".concat(name,"_firstname_").concat(index)),header=fieldset.querySelector("h3");if(firstNameInput&&header){const updateHeader=()=>{const headerName=firstNameInput.value.trim();headerName?(0,_str.get_string)(name+type,"local_equipment",headerName).then((str=>{header.textContent=str})).catch((error=>{console.error("Error updating student header:",error),header.textContent="Student ".concat(index+1)})):(0,_str.get_string)(name,"local_equipment",index+1).then((str=>{header.textContent=str})).catch((error=>{console.error("Error updating student header:",error),header.textContent="Student ".concat(index+1)}))};firstNameInput.addEventListener("input",updateHeader),updateHeader()}})(fieldset)};document.querySelectorAll('fieldset[id^="id_'.concat(name).concat(type,'_"]')).forEach(setupFieldset);new MutationObserver((mutations=>{mutations.forEach((mutation=>{"childList"===mutation.type&&mutation.addedNodes.forEach((node=>{node.nodeType===Node.ELEMENT_NODE&&node.matches('fieldset[id^="id_'.concat(name).concat(type,'_"]'))&&setupFieldset(node)}))}))})).observe(document.querySelector("form"),{childList:!0,subtree:!0})};_exports.setupFieldsetNameUpdates=setupFieldsetNameUpdates}));

//# sourceMappingURL=formhandling.min.js.map