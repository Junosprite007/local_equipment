{"version":3,"file":"check-inout-scanner.min.js","sources":["../src/check-inout-scanner.js"],"sourcesContent":["// This file is part of FLIP Plugins for Moodle\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Check-in/Check-out scanner interface.\n *\n * @module     local_equipment/check-inout-scanner\n * @copyright  2024 onwards Joshua Kirby <josh@funlearningcompany.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'local_equipment/universal-scanner',\n    'core/notification',\n    'core/log',\n    'core/ajax',\n], function (UniversalScanner, Notification, Log, Ajax) {\n    'use strict';\n\n    /**\n     * Initialize the check-in/out scanner.\n     */\n    const init = () => {\n        Log.debug('local_equipment/check-inout-scanner: init() called');\n\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', initializeScanner);\n        } else {\n            initializeScanner();\n        }\n    };\n\n    /**\n     * Initialize the scanner interface.\n     */\n    function initializeScanner() {\n        Log.debug(\n            'local_equipment/check-inout-scanner: initializeScanner() called'\n        );\n\n        const scannerContainer = document.getElementById('scanner-container');\n        const equipmentDetails = document.getElementById('equipment-details');\n        const manualUuid = document.getElementById('manual_uuid');\n        const lookupBtn = document.getElementById('lookup_btn');\n\n        if (!scannerContainer || !equipmentDetails) {\n            Log.error('Required elements not found');\n            return;\n        }\n\n        let scanner = null;\n        let currentEquipment = null;\n        let currentMode = 'student'; // 'student' or 'location'\n\n        // Initialize scanner interface\n        initScanner();\n\n        // Mode toggle handlers\n        const modeRadios = document.querySelectorAll(\n            'input[name=\"assignment_mode\"]'\n        );\n        modeRadios.forEach((radio) => {\n            radio.addEventListener('change', function () {\n                currentMode = this.value;\n                Log.debug('Assignment mode changed to:', currentMode);\n\n                // Update equipment details if equipment is loaded\n                if (currentEquipment) {\n                    displayEquipmentDetails(currentEquipment);\n                }\n            });\n        });\n\n        // Manual lookup handler\n        if (lookupBtn) {\n            lookupBtn.addEventListener('click', () => {\n                const uuid = manualUuid.value.trim();\n                if (uuid) {\n                    lookupEquipment(uuid);\n                    manualUuid.value = '';\n                }\n            });\n        }\n\n        if (manualUuid) {\n            manualUuid.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    lookupBtn.click();\n                }\n            });\n        }\n\n        /**\n         * Initialize the scanner interface.\n         */\n        function initScanner() {\n            // Clear existing scanner interface\n            scannerContainer.innerHTML = '';\n\n            // Create scanner container\n            const scannerDiv = document.createElement('div');\n            scannerDiv.id = 'qr-scanner-container';\n            scannerDiv.className = 'qr-scanner-container mb-3';\n            scannerContainer.appendChild(scannerDiv);\n\n            // Create scanner controls\n            const controlsDiv = document.createElement('div');\n            controlsDiv.className = 'scanner-controls';\n            controlsDiv.innerHTML = `\n                <div class=\"scanner-toggle mb-3\">\n                    <div class=\"btn-group\" role=\"group\">\n                        <button type=\"button\" id=\"start-camera-btn\" class=\"btn btn-primary\">\n                            <i class=\"fa fa-camera\"></i> Start Camera\n                        </button>\n                        <button type=\"button\" id=\"stop-camera-btn\" class=\"btn btn-secondary\" disabled>\n                            <i class=\"fa fa-stop\"></i> Stop Camera\n                        </button>\n                    </div>\n                    <div class=\"mt-2\">\n                        <button type=\"button\" id=\"scan-qr-btn\" class=\"btn btn-success\" style=\"display: none;\">\n                            <i class=\"fa fa-qrcode\"></i> Scan\n                        </button>\n                        <button type=\"button\" id=\"flip-camera-btn\" class=\"btn btn-outline-secondary btn-sm ms-2\"\n                            style=\"display: none;\" title=\"Toggle camera mirror\">\n                            <i class=\"fa fa-arrows-h\"></i> Flip\n                        </button>\n                    </div>\n                </div>\n            `;\n            scannerContainer.appendChild(controlsDiv);\n\n            // Initialize scanner instance\n            scanner = new UniversalScanner({\n                containerId: 'qr-scanner-container',\n                resultCallback: handleScanResult,\n                errorCallback: handleScanError,\n            });\n\n            // Initialize scanner\n            scanner.init().then((success) => {\n                if (success) {\n                    Log.debug('Scanner initialized successfully');\n                } else {\n                    Log.error('Scanner initialization failed');\n                    showFallbackInterface();\n                }\n            });\n\n            // Set up control buttons\n            setupScannerControls();\n        }\n\n        /**\n         * Set up scanner control buttons.\n         */\n        function setupScannerControls() {\n            const startBtn = document.getElementById('start-camera-btn');\n            const stopBtn = document.getElementById('stop-camera-btn');\n            const scanBtn = document.getElementById('scan-qr-btn');\n            const flipBtn = document.getElementById('flip-camera-btn');\n\n            let isScanning = false;\n            let isMirrored = false; // Default to normal (good for mobile)\n\n            if (startBtn) {\n                startBtn.addEventListener('click', async () => {\n                    try {\n                        scanner.stream = await getCameraStreamRobust();\n                        scanner.video.srcObject = scanner.stream;\n                        await scanner.video.play();\n\n                        scanner.canvas.width = scanner.video.videoWidth;\n                        scanner.canvas.height = scanner.video.videoHeight;\n\n                        scanner.updateStatus(\n                            'Camera ready - click Scan to detect QR code'\n                        );\n\n                        startBtn.disabled = true;\n                        stopBtn.disabled = false;\n                        scanBtn.style.display = 'inline-block';\n                        flipBtn.style.display = 'inline-block';\n\n                        updateVideoMirror();\n                    } catch (error) {\n                        Log.error('Failed to start camera:', error);\n                        Notification.addNotification({\n                            message: 'Failed to start camera: ' + error.message,\n                            type: 'error',\n                        });\n                    }\n                });\n            }\n\n            if (stopBtn) {\n                stopBtn.addEventListener('click', () => {\n                    if (scanner.stream) {\n                        scanner.stream\n                            .getTracks()\n                            .forEach((track) => track.stop());\n                        scanner.stream = null;\n                    }\n                    if (scanner.video) {\n                        scanner.video.srcObject = null;\n                    }\n\n                    scanner.updateStatus('Camera stopped');\n                    startBtn.disabled = false;\n                    stopBtn.disabled = true;\n                    scanBtn.style.display = 'none';\n                    flipBtn.style.display = 'none';\n\n                    isScanning = false;\n                });\n            }\n\n            // Flip camera button\n            if (flipBtn) {\n                flipBtn.addEventListener('click', () => {\n                    isMirrored = !isMirrored;\n                    updateVideoMirror();\n\n                    const text = isMirrored\n                        ? 'Flip (Mirrored)'\n                        : 'Flip (Normal)';\n                    flipBtn.innerHTML = `<i class=\"fa fa-arrows-h\"></i> ${text}`;\n\n                    const message = isMirrored\n                        ? 'Camera mirrored (good for webcams)'\n                        : 'Camera normal (good for mobile)';\n                    showSuccessMessage(message);\n                });\n            }\n\n            /**\n             * Update video mirror state.\n             */\n            function updateVideoMirror() {\n                const videoElement = document.querySelector(\n                    '#qr-scanner-container video'\n                );\n\n                if (videoElement) {\n                    if (isMirrored) {\n                        videoElement.style.transform = 'scaleX(-1)';\n                    } else {\n                        videoElement.style.transform = 'scaleX(1)';\n                    }\n\n                    Log.debug(\n                        'Video mirror updated:',\n                        isMirrored\n                            ? 'mirrored (scaleX(-1))'\n                            : 'normal (scaleX(1))',\n                        'Applied transform:',\n                        videoElement.style.transform\n                    );\n                }\n            }\n\n            // Scan button\n            if (scanBtn) {\n                scanBtn.addEventListener('click', async () => {\n                    if (isScanning) {\n                        return;\n                    }\n\n                    isScanning = true;\n                    scanBtn.disabled = true;\n                    scanBtn.innerHTML =\n                        '<i class=\"fa fa-spinner fa-spin\"></i> Scanning...';\n                    scanner.updateStatus('Scanning for QR code...');\n\n                    try {\n                        const result = await performSingleScan();\n                        if (result) {\n                            scanner.updateStatus('Scan successful!');\n                            scanner.showScanSuccess();\n                        } else {\n                            scanner.updateStatus(\n                                'No QR code detected - try again'\n                            );\n                            const msg =\n                                'No QR code detected. Please ' +\n                                'position the QR code in the target area ' +\n                                'and try again.';\n                            showErrorMessage(msg);\n                        }\n                    } catch (error) {\n                        Log.error('Scan error:', error);\n                        scanner.updateStatus('Scan failed');\n                        showErrorMessage('Scan failed. Please try again.');\n                    }\n\n                    isScanning = false;\n                    scanBtn.disabled = false;\n                    scanBtn.innerHTML = '<i class=\"fa fa-qrcode\"></i> Scan';\n\n                    setTimeout(() => {\n                        scanner.updateStatus(\n                            'Ready to scan - position QR code and click Scan'\n                        );\n                    }, 2000);\n                });\n            }\n\n            /**\n             * Perform a single scan attempt.\n             * @returns {Promise<boolean>} True if scan was successful\n             */\n            async function performSingleScan() {\n                return new Promise((resolve) => {\n                    let scanAttempts = 0;\n                    const maxAttempts = 30;\n                    let found = false;\n\n                    /**\n                     * Process a single frame for QR detection.\n                     */\n                    const scanFrame = async () => {\n                        if (found || scanAttempts >= maxAttempts) {\n                            resolve(found);\n                            return;\n                        }\n\n                        try {\n                            if (\n                                !scanner.video ||\n                                scanner.video.readyState !==\n                                    scanner.video.HAVE_ENOUGH_DATA\n                            ) {\n                                scanAttempts++;\n                                requestAnimationFrame(scanFrame);\n                                return;\n                            }\n\n                            scanner.context.drawImage(\n                                scanner.video,\n                                0,\n                                0,\n                                scanner.canvas.width,\n                                scanner.canvas.height\n                            );\n\n                            // Try native BarcodeDetector first\n                            if (\n                                scanner.hasBarcodeDetector &&\n                                window.BarcodeDetector\n                            ) {\n                                try {\n                                    const detector = new window.BarcodeDetector(\n                                        {\n                                            formats: ['qr_code'],\n                                        }\n                                    );\n\n                                    const barcodes = await detector.detect(\n                                        scanner.canvas\n                                    );\n\n                                    if (barcodes.length > 0) {\n                                        const barcode = barcodes[0];\n                                        Log.debug(\n                                            'QR code detected:',\n                                            barcode.rawValue\n                                        );\n                                        processQRCode(barcode.rawValue);\n                                        found = true;\n                                        resolve(true);\n                                        return;\n                                    }\n                                } catch (error) {\n                                    Log.debug('BarcodeDetector failed:', error);\n                                }\n                            }\n\n                            // Note: Additional QR detection methods could be added here\n                            // For now, we rely on BarcodeDetector\n                        } catch (error) {\n                            Log.debug('Frame processing error:', error);\n                        }\n\n                        scanAttempts++;\n                        requestAnimationFrame(scanFrame);\n                    };\n\n                    requestAnimationFrame(scanFrame);\n                });\n            }\n        }\n\n        /**\n         * Handle scan result from scanner.\n         * @param {Object} result - The scan result object\n         */\n        function handleScanResult(result) {\n            if (result.success && result.data) {\n                const qrData = result.data.qr_data || result.data;\n                Log.debug('Scan successful, processing QR code:', qrData);\n                processQRCode(qrData);\n            } else {\n                Log.error('Scan failed:', result);\n                showErrorMessage(\n                    result.message || 'Scan failed. Please try again.'\n                );\n            }\n        }\n\n        /**\n         * Handle scan error from scanner.\n         * @param {string} errorCode - The error code\n         * @param {string} message - The error message\n         */\n        function handleScanError(errorCode, message) {\n            Log.error('Scanner error:', errorCode, message);\n            if (errorCode === 'camera_access_failed') {\n                showFallbackInterface();\n            }\n        }\n\n        /**\n         * Show fallback interface when camera is not available.\n         */\n        function showFallbackInterface() {\n            const scannerDiv = document.getElementById('qr-scanner-container');\n            if (scannerDiv) {\n                scannerDiv.innerHTML = `\n                    <div class=\"alert alert-warning text-center\">\n                        <i class=\"fa fa-exclamation-triangle\"></i>\n                        <strong>Camera not available</strong><br>\n                        Please use the manual UUID entry below.\n                    </div>\n                `;\n            }\n        }\n\n        /**\n         * Process a QR code.\n         * @param {string} qrData - The QR code data to process\n         */\n        function processQRCode(qrData) {\n            // Extract UUID from QR code data\n            let uuid = qrData;\n\n            // If QR code contains JSON, extract UUID\n            try {\n                const parsed = JSON.parse(qrData);\n                if (parsed.uuid) {\n                    uuid = parsed.uuid;\n                } else if (parsed.id) {\n                    uuid = parsed.id;\n                }\n            } catch (e) {\n                // Not JSON, use as-is\n            }\n\n            lookupEquipment(uuid);\n        }\n\n        /**\n         * Lookup equipment by UUID.\n         * @param {string} uuid - The equipment UUID to lookup\n         */\n        function lookupEquipment(uuid) {\n            Log.debug('Looking up equipment:', uuid);\n\n            Ajax.call([\n                {\n                    methodname: 'local_equipment_lookup_equipment',\n                    args: {\n                        uuid: uuid,\n                    },\n                    done: function (response) {\n                        if (response.success) {\n                            currentEquipment = response;\n                            displayEquipmentDetails(response);\n                        } else {\n                            showErrorMessage(\n                                response.message || 'Equipment not found'\n                            );\n                            clearEquipmentDetails();\n                        }\n                    },\n                    fail: function (error) {\n                        Log.error('AJAX error:', error);\n\n                        // Fallback to direct AJAX call\n                        const url =\n                            M.cfg.wwwroot +\n                            '/local/equipment/inventory/check_inout.php';\n                        fetch(url, {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type':\n                                    'application/x-www-form-urlencoded',\n                            },\n                            body: new URLSearchParams({\n                                ajax: '1',\n                                action: 'lookup_equipment',\n                                uuid: uuid,\n                                sesskey: M.cfg.sesskey,\n                            }),\n                        })\n                            .then((response) => response.json())\n                            .then((data) => {\n                                if (data.success) {\n                                    currentEquipment = data;\n                                    displayEquipmentDetails(data);\n                                } else {\n                                    showErrorMessage(\n                                        data.message || 'Equipment not found'\n                                    );\n                                    clearEquipmentDetails();\n                                }\n                            })\n                            .catch((err) => {\n                                Log.error('Fetch error:', err);\n                                showErrorMessage('Network error occurred');\n                                clearEquipmentDetails();\n                            });\n                    },\n                },\n            ]);\n        }\n\n        /**\n         * Display equipment details.\n         * @param {Object} data - The equipment data object\n         */\n        function displayEquipmentDetails(data) {\n            const item = data.item;\n            const transactions = data.transactions || [];\n\n            let statusBadge = '';\n\n            // Status badge\n            switch (item.status) {\n                case 'available':\n                    statusBadge =\n                        '<span class=\"badge bg-success\">Available</span>';\n                    break;\n                case 'checked_out':\n                    statusBadge =\n                        '<span class=\"badge bg-warning\">Checked Out</span>';\n                    break;\n                case 'in_transit':\n                    statusBadge =\n                        '<span class=\"badge bg-info\">In Transit</span>';\n                    break;\n                case 'maintenance':\n                    statusBadge =\n                        '<span class=\"badge bg-secondary\">Maintenance</span>';\n                    break;\n                case 'damaged':\n                    statusBadge =\n                        '<span class=\"badge bg-danger\">Damaged</span>';\n                    break;\n                default:\n                    statusBadge =\n                        '<span class=\"badge bg-secondary\">' +\n                        item.status +\n                        '</span>';\n            }\n\n            // Current assignment info\n            let currentAssignment = '';\n            if (item.firstname && item.lastname) {\n                const email = item.user_email\n                    ? `<br><small>${item.user_email}</small>`\n                    : '';\n                currentAssignment = `\n                    <div class=\"alert alert-info\">\n                        <strong>Currently assigned to:</strong><br>\n                        ${item.firstname} ${item.lastname}\n                        ${email}\n                    </div>\n                `;\n            } else if (item.location_name) {\n                currentAssignment = `\n                    <div class=\"alert alert-secondary\">\n                        <strong>Current location:</strong><br>\n                        ${item.location_name}\n                    </div>\n                `;\n            }\n\n            // Assignment interface based on mode\n            let assignmentInterface = '';\n            if (currentMode === 'student') {\n                const unassignBtn = item.current_userid\n                    ? '<button type=\"button\" id=\"unassign-btn\" ' +\n                      'class=\"btn btn-outline-secondary\">Remove Assignment</button>'\n                    : '';\n                assignmentInterface = `\n                    <div class=\"assignment-section\">\n                        <h5>Student Assignment</h5>\n                        <div class=\"mb-3\">\n                            <label for=\"user-search\" class=\"form-label\">Search for student:</label>\n                            <input type=\"text\" id=\"user-search\" class=\"form-control\"\n                                placeholder=\"Type student name or email...\">\n                            <div id=\"user-results\" class=\"list-group mt-2\" style=\"display: none;\"></div>\n                        </div>\n                        <div class=\"d-grid gap-2\">\n                            <button type=\"button\" id=\"assign-user-btn\" class=\"btn btn-primary\" disabled>\n                                Assign to Selected Student\n                            </button>\n                            ${unassignBtn}\n                        </div>\n                    </div>\n                `;\n            } else {\n                assignmentInterface = `\n                    <div class=\"assignment-section\">\n                        <h5>Location Transfer</h5>\n                        <div class=\"mb-3\">\n                            <label for=\"location-select\" class=\"form-label\">Transfer to location:</label>\n                            <select id=\"location-select\" class=\"form-select\">\n                                <option value=\"\">Select location...</option>\n                            </select>\n                        </div>\n                        <div class=\"d-grid gap-2\">\n                            <button type=\"button\" id=\"transfer-location-btn\" class=\"btn btn-primary\" disabled>\n                                Transfer to Selected Location\n                            </button>\n                        </div>\n                    </div>\n                `;\n            }\n\n            // Recent transactions\n            let transactionsList = '';\n            if (transactions.length > 0) {\n                transactionsList =\n                    '<h6>Recent Transactions</h6><div class=\"list-group list-group-flush\">';\n                transactions.forEach((trans) => {\n                    const date = new Date(\n                        trans.timestamp * 1000\n                    ).toLocaleDateString();\n                    const type =\n                        trans.transaction_type.charAt(0).toUpperCase() +\n                        trans.transaction_type.slice(1);\n\n                    let details = '';\n                    if (trans.to_firstname && trans.to_lastname) {\n                        details = `To: ${trans.to_firstname} ${trans.to_lastname}`;\n                    } else if (trans.from_firstname && trans.from_lastname) {\n                        details = `From: ${trans.from_firstname} ${trans.from_lastname}`;\n                    } else if (trans.to_location) {\n                        details = `To: ${trans.to_location}`;\n                    } else if (trans.from_location) {\n                        details = `From: ${trans.from_location}`;\n                    }\n\n                    const detailsHtml = details\n                        ? `<p class=\"mb-1\">${details}</p>`\n                        : '';\n                    const notesHtml = trans.notes\n                        ? `<small class=\"text-muted\">${trans.notes}</small>`\n                        : '';\n\n                    transactionsList += `\n                        <div class=\"list-group-item\">\n                            <div class=\"d-flex w-100 justify-content-between\">\n                                <h6 class=\"mb-1\">${type}</h6>\n                                <small>${date}</small>\n                            </div>\n                            ${detailsHtml}\n                            ${notesHtml}\n                        </div>\n                    `;\n                });\n                transactionsList += '</div>';\n            }\n\n            // Notes section\n            const notesSection = `\n                <div class=\"notes-section mt-3\">\n                    <h6>Add Notes</h6>\n                    <div class=\"mb-2\">\n                        <textarea id=\"equipment-notes\" class=\"form-control\" rows=\"2\"\n                            placeholder=\"Add notes about this equipment...\"></textarea>\n                    </div>\n                    <button type=\"button\" id=\"save-notes-btn\" class=\"btn btn-outline-primary btn-sm\">\n                        Save Notes\n                    </button>\n                </div>\n            `;\n\n            const manufacturerHtml = item.manufacturer\n                ? `<p><strong>Manufacturer:</strong> ${item.manufacturer}</p>`\n                : '';\n            const categoryHtml = item.category\n                ? `<p><strong>Category:</strong> ${item.category}</p>`\n                : '';\n\n            const html = `\n                <div class=\"equipment-info\">\n                    <div class=\"d-flex justify-content-between align-items-start mb-3\">\n                        <h4>${item.product_name}</h4>\n                        ${statusBadge}\n                    </div>\n\n                    <div class=\"row mb-3\">\n                        <div class=\"col-sm-6\">\n                            <strong>UUID:</strong><br>\n                            <code>${item.uuid}</code>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <strong>Condition:</strong><br>\n                            <span class=\"badge bg-light text-dark\">${\n                                item.condition_status || 'Unknown'\n                            }</span>\n                        </div>\n                    </div>\n\n                    ${manufacturerHtml}\n                    ${categoryHtml}\n\n                    ${currentAssignment}\n\n                    <hr>\n\n                    ${assignmentInterface}\n\n                    ${notesSection}\n\n                    <hr>\n\n                    ${transactionsList}\n                </div>\n            `;\n\n            equipmentDetails.innerHTML = html;\n\n            // Set up assignment interface handlers\n            setupAssignmentHandlers(item);\n        }\n\n        /**\n         * Set up assignment interface handlers.\n         * @param {Object} item - The equipment item object\n         */\n        function setupAssignmentHandlers(item) {\n            if (currentMode === 'student') {\n                setupStudentAssignment(item);\n            } else {\n                setupLocationTransfer(item);\n            }\n\n            // Notes handler\n            const saveNotesBtn = document.getElementById('save-notes-btn');\n            const notesTextarea = document.getElementById('equipment-notes');\n\n            if (saveNotesBtn && notesTextarea) {\n                saveNotesBtn.addEventListener('click', () => {\n                    const notes = notesTextarea.value.trim();\n                    if (notes) {\n                        saveEquipmentNotes(item.uuid, notes);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Set up student assignment interface.\n         * @param {Object} item - The equipment item object\n         */\n        function setupStudentAssignment(item) {\n            const userSearch = document.getElementById('user-search');\n            const userResults = document.getElementById('user-results');\n            const assignBtn = document.getElementById('assign-user-btn');\n            const unassignBtn = document.getElementById('unassign-btn');\n\n            let selectedUser = null;\n            let searchTimeout = null;\n\n            // User search\n            if (userSearch) {\n                userSearch.addEventListener('input', function () {\n                    const query = this.value.trim();\n\n                    clearTimeout(searchTimeout);\n\n                    if (query.length < 2) {\n                        userResults.style.display = 'none';\n                        return;\n                    }\n\n                    searchTimeout = setTimeout(() => {\n                        searchUsers(query);\n                    }, 300);\n                });\n            }\n\n            /**\n             * Search for users by query.\n             * @param {string} query - The search query\n             */\n            function searchUsers(query) {\n                const url =\n                    M.cfg.wwwroot +\n                    '/local/equipment/inventory/check_inout.php';\n                fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                    },\n                    body: new URLSearchParams({\n                        ajax: '1',\n                        action: 'search_users',\n                        query: query,\n                        sesskey: M.cfg.sesskey,\n                    }),\n                })\n                    .then((response) => response.json())\n                    .then((data) => {\n                        displayUserResults(data.users || []);\n                    })\n                    .catch((error) => {\n                        Log.error('User search error:', error);\n                    });\n            }\n\n            /**\n             * Display user search results.\n             * @param {Array} users - Array of user objects\n             */\n            function displayUserResults(users) {\n                if (users.length === 0) {\n                    userResults.style.display = 'none';\n                    return;\n                }\n\n                let html = '';\n                users.forEach((user) => {\n                    html += `\n                        <button type=\"button\" class=\"list-group-item list-group-item-action user-option\"\n                                data-userid=\"${user.id}\" data-name=\"${user.firstname} ${user.lastname}\">\n                            <strong>${user.firstname} ${user.lastname}</strong><br>\n                            <small class=\"text-muted\">${user.email}</small>\n                        </button>\n                    `;\n                });\n\n                userResults.innerHTML = html;\n                userResults.style.display = 'block';\n\n                // User selection handlers\n                userResults.querySelectorAll('.user-option').forEach((btn) => {\n                    btn.addEventListener('click', function () {\n                        selectedUser = {\n                            id: this.dataset.userid,\n                            name: this.dataset.name,\n                        };\n\n                        userSearch.value = selectedUser.name;\n                        userResults.style.display = 'none';\n                        assignBtn.disabled = false;\n                    });\n                });\n            }\n\n            // Assign button\n            if (assignBtn) {\n                assignBtn.addEventListener('click', () => {\n                    if (selectedUser) {\n                        assignToUser(\n                            item.uuid,\n                            selectedUser.id,\n                            selectedUser.name\n                        );\n                    }\n                });\n            }\n\n            // Unassign button\n            if (unassignBtn) {\n                unassignBtn.addEventListener('click', () => {\n                    unassignEquipment(item.uuid);\n                });\n            }\n        }\n\n        /**\n         * Set up location transfer interface.\n         * @param {Object} item - The equipment item object\n         */\n        function setupLocationTransfer(item) {\n            const locationSelect = document.getElementById('location-select');\n            const transferBtn = document.getElementById(\n                'transfer-location-btn'\n            );\n\n            // Load locations\n            const url =\n                M.cfg.wwwroot + '/local/equipment/inventory/check_inout.php';\n            fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                    ajax: '1',\n                    action: 'get_locations',\n                    sesskey: M.cfg.sesskey,\n                }),\n            })\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data.locations) {\n                        data.locations.forEach((location) => {\n                            const option = document.createElement('option');\n                            option.value = location.id;\n                            option.textContent = location.name;\n                            locationSelect.appendChild(option);\n                        });\n                    }\n                })\n                .catch((error) => {\n                    Log.error('Location loading error:', error);\n                });\n\n            // Location selection\n            if (locationSelect) {\n                locationSelect.addEventListener('change', function () {\n                    transferBtn.disabled = !this.value;\n                });\n            }\n\n            // Transfer button\n            if (transferBtn) {\n                transferBtn.addEventListener('click', () => {\n                    const locationId = locationSelect.value;\n                    const locationName =\n                        locationSelect.options[locationSelect.selectedIndex]\n                            .text;\n                    if (locationId) {\n                        transferToLocation(item.uuid, locationId, locationName);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Assign equipment to user.\n         * @param {string} uuid - Equipment UUID\n         * @param {string} userid - User ID\n         * @param {string} userName - User display name\n         */\n        function assignToUser(uuid, userid, userName) {\n            const notes = document\n                .getElementById('equipment-notes')\n                .value.trim();\n\n            const url =\n                M.cfg.wwwroot + '/local/equipment/inventory/check_inout.php';\n            fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                    ajax: '1',\n                    action: 'update_assignment',\n                    uuid: uuid,\n                    userid: userid,\n                    notes: notes,\n                    sesskey: M.cfg.sesskey,\n                }),\n            })\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data.success) {\n                        showSuccessMessage(`Equipment assigned to ${userName}`);\n                        // Refresh equipment details\n                        lookupEquipment(uuid);\n                    } else {\n                        showErrorMessage(data.message || 'Assignment failed');\n                    }\n                })\n                .catch((error) => {\n                    Log.error('Assignment error:', error);\n                    showErrorMessage('Network error occurred');\n                });\n        }\n\n        /**\n         * Transfer equipment to location.\n         * @param {string} uuid - Equipment UUID\n         * @param {string} locationid - Location ID\n         * @param {string} locationName - Location display name\n         */\n        function transferToLocation(uuid, locationid, locationName) {\n            const notes = document\n                .getElementById('equipment-notes')\n                .value.trim();\n\n            const url =\n                M.cfg.wwwroot + '/local/equipment/inventory/check_inout.php';\n            fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                    ajax: '1',\n                    action: 'update_assignment',\n                    uuid: uuid,\n                    locationid: locationid,\n                    notes: notes,\n                    sesskey: M.cfg.sesskey,\n                }),\n            })\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data.success) {\n                        showSuccessMessage(\n                            `Equipment transferred to ${locationName}`\n                        );\n                        // Refresh equipment details\n                        lookupEquipment(uuid);\n                    } else {\n                        showErrorMessage(data.message || 'Transfer failed');\n                    }\n                })\n                .catch((error) => {\n                    Log.error('Transfer error:', error);\n                    showErrorMessage('Network error occurred');\n                });\n        }\n\n        /**\n         * Unassign equipment.\n         * @param {string} uuid - Equipment UUID\n         */\n        function unassignEquipment(uuid) {\n            const notes = document\n                .getElementById('equipment-notes')\n                .value.trim();\n\n            const url =\n                M.cfg.wwwroot + '/local/equipment/inventory/check_inout.php';\n            fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                    ajax: '1',\n                    action: 'update_assignment',\n                    uuid: uuid,\n                    notes: notes,\n                    sesskey: M.cfg.sesskey,\n                }),\n            })\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data.success) {\n                        showSuccessMessage('Equipment unassigned');\n                        // Refresh equipment details\n                        lookupEquipment(uuid);\n                    } else {\n                        showErrorMessage(data.message || 'Unassignment failed');\n                    }\n                })\n                .catch((error) => {\n                    Log.error('Unassignment error:', error);\n                    showErrorMessage('Network error occurred');\n                });\n        }\n\n        /**\n         * Save equipment notes.\n         * @param {string} uuid - Equipment UUID\n         * @param {string} notes - Notes to save\n         */\n        function saveEquipmentNotes(uuid, notes) {\n            const url =\n                M.cfg.wwwroot + '/local/equipment/inventory/check_inout.php';\n            fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                    ajax: '1',\n                    action: 'update_notes',\n                    uuid: uuid,\n                    notes: notes,\n                    sesskey: M.cfg.sesskey,\n                }),\n            })\n                .then((response) => response.json())\n                .then((data) => {\n                    if (data.success) {\n                        showSuccessMessage('Notes saved successfully');\n                        document.getElementById('equipment-notes').value = '';\n                    } else {\n                        showErrorMessage(\n                            data.message || 'Failed to save notes'\n                        );\n                    }\n                })\n                .catch((error) => {\n                    Log.error('Notes save error:', error);\n                    showErrorMessage('Network error occurred');\n                });\n        }\n\n        /**\n         * Clear equipment details panel.\n         */\n        function clearEquipmentDetails() {\n            equipmentDetails.innerHTML = `\n                <div class=\"alert alert-info\">\n                    <i class=\"fa fa-info-circle me-2\"></i>\n                    Scan a QR code or enter UUID manually to view equipment details and manage assignments.\n                </div>\n            `;\n            currentEquipment = null;\n        }\n\n        /**\n         * Show success message.\n         * @param {string} message - Success message to display\n         */\n        function showSuccessMessage(message) {\n            Notification.addNotification({\n                message: message,\n                type: 'success',\n            });\n        }\n\n        /**\n         * Show error message.\n         * @param {string} message - Error message to display\n         */\n        function showErrorMessage(message) {\n            Notification.addNotification({\n                message: message,\n                type: 'error',\n            });\n        }\n\n        /**\n         * Get camera stream with robust fallbacks.\n         * @returns {Promise<MediaStream>} Camera stream\n         */\n        async function getCameraStreamRobust() {\n            const constraints = {\n                video: {\n                    facingMode: 'environment',\n                    width: { ideal: 1280 },\n                    height: { ideal: 720 },\n                },\n            };\n\n            // Try modern API first\n            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                try {\n                    return await navigator.mediaDevices.getUserMedia(\n                        constraints\n                    );\n                } catch (error) {\n                    Log.debug('Modern API failed:', error);\n                }\n            }\n\n            // Try legacy getUserMedia\n            if (navigator.getUserMedia) {\n                try {\n                    return await new Promise((resolve, reject) => {\n                        navigator.getUserMedia(constraints, resolve, reject);\n                    });\n                } catch (error) {\n                    Log.debug('Legacy getUserMedia failed:', error);\n                }\n            }\n\n            throw new Error('No camera API available');\n        }\n    }\n\n    // Return the public API\n    return {\n        init: init,\n    };\n});\n"],"names":["define","UniversalScanner","Notification","Log","Ajax","initializeScanner","debug","scannerContainer","document","getElementById","equipmentDetails","manualUuid","lookupBtn","error","scanner","currentEquipment","currentMode","innerHTML","scannerDiv","createElement","id","className","appendChild","controlsDiv","containerId","resultCallback","handleScanResult","errorCallback","handleScanError","init","then","success","showFallbackInterface","startBtn","stopBtn","scanBtn","flipBtn","isScanning","isMirrored","addEventListener","async","stream","constraints","video","facingMode","width","ideal","height","navigator","mediaDevices","getUserMedia","Promise","resolve","reject","Error","getCameraStreamRobust","srcObject","play","canvas","videoWidth","videoHeight","updateStatus","disabled","style","display","updateVideoMirror","addNotification","message","type","getTracks","forEach","track","stop","text","showSuccessMessage","videoElement","querySelector","transform","performSingleScan","showScanSuccess","showErrorMessage","setTimeout","scanAttempts","maxAttempts","found","scanFrame","readyState","HAVE_ENOUGH_DATA","requestAnimationFrame","context","drawImage","hasBarcodeDetector","window","BarcodeDetector","detector","formats","barcodes","detect","length","barcode","rawValue","processQRCode","setupScannerControls","initScanner","result","data","qrData","qr_data","errorCode","uuid","parsed","JSON","parse","e","lookupEquipment","call","methodname","args","done","response","displayEquipmentDetails","clearEquipmentDetails","fail","url","M","cfg","wwwroot","fetch","method","headers","body","URLSearchParams","ajax","action","sesskey","json","catch","err","item","transactions","statusBadge","status","currentAssignment","firstname","lastname","email","user_email","location_name","assignmentInterface","unassignBtn","current_userid","transactionsList","trans","date","Date","timestamp","toLocaleDateString","transaction_type","charAt","toUpperCase","slice","details","to_firstname","to_lastname","from_firstname","from_lastname","to_location","from_location","detailsHtml","notesHtml","notes","manufacturerHtml","manufacturer","categoryHtml","category","html","product_name","condition_status","userSearch","userResults","assignBtn","selectedUser","searchTimeout","query","this","value","trim","clearTimeout","searchUsers","displayUserResults","users","user","querySelectorAll","btn","dataset","userid","name","userName","assignToUser","unassignEquipment","setupStudentAssignment","locationSelect","transferBtn","locations","location","option","textContent","locationId","locationName","options","selectedIndex","locationid","transferToLocation","setupLocationTransfer","saveNotesBtn","notesTextarea","saveEquipmentNotes","setupAssignmentHandlers","radio","key","click"],"mappings":"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"}