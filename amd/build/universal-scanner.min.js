define("local_equipment/universal-scanner",["exports","core/ajax","core/log","local_equipment/jsqr"],(function(_exports,_ajax,_log,_jsqr){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Universal barcode scanner for QR codes and UPC/EAN barcodes.
   *
   * @module     local_equipment/universal-scanner
   * @copyright  2024 onwards Joshua Kirby <josh@funlearningcompany.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=_exports.default=void 0,_ajax=_interopRequireDefault(_ajax),_log=_interopRequireDefault(_log),_jsqr=_interopRequireDefault(_jsqr);class UniversalScanner{constructor(){let options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.options={containerId:"scanner-container",videoId:"scanner-video",canvasId:"scanner-canvas",resultCallback:null,errorCallback:null,scanTypes:["auto"],timeout:3e4,...options},this.isScanning=!1,this.stream=null,this.video=null,this.canvas=null,this.context=null,this.sessionId=this.generateSessionId(),this.scanAttempts=0,this.maxScanAttempts=50,this.startScanning=this.startScanning.bind(this),this.stopScanning=this.stopScanning.bind(this),this.processFrame=this.processFrame.bind(this)}async init(){try{return await this.setupInterface(),await this.checkCameraSupport(),!0}catch(error){return this.handleError("init_failed",error.message),!1}}async setupInterface(){const container=document.getElementById(this.options.containerId);if(!container)throw new Error("Container element ".concat(this.options.containerId," not found"));this.video=document.createElement("video"),this.video.id=this.options.videoId,this.video.setAttribute("playsinline",!0),this.video.setAttribute("autoplay",!0),this.video.setAttribute("muted",!0),this.video.style.width="100%",this.video.style.height="auto",this.canvas=document.createElement("canvas"),this.canvas.id=this.options.canvasId,this.canvas.style.display="none",this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),container.appendChild(this.video),container.appendChild(this.canvas),this.createScanOverlay(container)}createScanOverlay(container){const overlay=document.createElement("div");overlay.className="scanner-overlay",overlay.innerHTML='\n            <div class="scan-target">\n                <div class="scan-corners">\n                    <div class="corner top-left"></div>\n                    <div class="corner top-right"></div>\n                    <div class="corner bottom-left"></div>\n                    <div class="corner bottom-right"></div>\n                </div>\n                <div class="scan-line"></div>\n            </div>\n            <div class="scan-instructions">\n                <p>Position barcode or QR code within the frame</p>\n                <div class="scan-status">Ready to scan</div>\n            </div>\n        ',container.appendChild(overlay),this.overlay=overlay}async checkCameraSupport(){if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new Error("Camera access not supported in this browser");return this.hasBarcodeDetector="BarcodeDetector"in window,!0}async startScanning(){if(!this.isScanning)try{this.updateStatus("Requesting camera access..."),this.stream=await navigator.mediaDevices.getUserMedia({video:{facingMode:"environment",width:{ideal:1280},height:{ideal:720}}}),this.video.srcObject=this.stream,await this.video.play(),this.canvas.width=this.video.videoWidth,this.canvas.height=this.video.videoHeight,this.isScanning=!0,this.scanAttempts=0,this.updateStatus("Scanning..."),this.scanLoop()}catch(error){this.handleError("camera_access_failed",error.message)}}stopScanning(){this.isScanning=!1,this.stream&&(this.stream.getTracks().forEach((track=>track.stop())),this.stream=null),this.video&&(this.video.srcObject=null),this.updateStatus("Scanner stopped")}async scanLoop(){if(this.isScanning){try{await this.processFrame(),this.scanAttempts++,this.scanAttempts>=this.maxScanAttempts&&(this.updateStatus("Scan timeout - please try again"),setTimeout((()=>{this.scanAttempts=0,this.updateStatus("Scanning...")}),2e3))}catch(error){_log.default.debug("Frame processing error:",error)}this.isScanning&&requestAnimationFrame((()=>this.scanLoop()))}}async processFrame(){if(this.video&&this.video.readyState===this.video.HAVE_ENOUGH_DATA){if(this.context.drawImage(this.video,0,0,this.canvas.width,this.canvas.height),this.hasBarcodeDetector)try{const detector=new BarcodeDetector({formats:["qr_code","ean_13","ean_8","upc_a","upc_e","code_128","code_39"]}),barcodes=await detector.detect(this.canvas);if(barcodes.length>0){const barcode=barcodes[0];return void await this.processScanResult(barcode.rawValue,barcode.format)}}catch(error){_log.default.debug("BarcodeDetector failed:",error)}await this.detectQRCodeManually()}}async detectQRCodeManually(){try{const imageData=this.context.getImageData(0,0,this.canvas.width,this.canvas.height),code=_jsqr.default.scan(imageData.data,imageData.width,imageData.height);code&&code.data&&await this.processScanResult(code.data,"qr_code")}catch(error){_log.default.debug("Manual QR detection failed:",error)}}async processScanResult(data,format){if(data&&""!==data.trim()){this.updateStatus("Processing scan..."),this.isScanning=!1;try{let scanType="auto";if("qr_code"===format?scanType="qr":["ean_13","ean_8","upc_a","upc_e"].includes(format)&&(scanType="upc"),_log.default.debug("Processing scan result:",{data:data,format:format,scanType:scanType}),this.options.resultCallback){const result={success:!0,data:{barcode_data:data,scan_type:scanType,format:format},timestamp:Date.now()};return this.updateStatus("Scan successful!"),this.showScanSuccess(),void this.options.resultCallback(result)}const result=await this.sendScanToServer(data,scanType);result.success?(this.updateStatus("Scan successful!"),this.showScanSuccess(),this.options.resultCallback&&this.options.resultCallback(result)):this.handleScanError(result)}catch(error){this.handleError("processing_failed",error.message)}}}async sendScanToServer(barcodeData,scanType){const request={methodname:"local_equipment_process_scan",args:{barcode_data:barcodeData,scan_type:scanType,session_id:this.sessionId}};return await _ajax.default.call([request])[0]}handleScanError(result){const message={empty_barcode:"No barcode data detected",invalid_uuid:"Invalid QR code format",item_not_found:"Equipment item not found",product_not_found:"Product not found in database",unknown_type:"Unknown barcode type"}[result.error_code]||result.message||"Scan failed";this.updateStatus("Error: ".concat(message)),setTimeout((()=>{this.isScanning=!0,this.updateStatus("Scanning...")}),2e3)}handleError(errorCode,message){_log.default.error("Scanner error [".concat(errorCode,"]:"),message),this.updateStatus("Error: ".concat(message)),this.options.errorCallback&&this.options.errorCallback(errorCode,message)}updateStatus(message){const statusElement=document.querySelector(".scan-status");statusElement&&(statusElement.textContent=message)}showScanSuccess(){const target=document.querySelector(".scan-target");target&&(target.classList.add("scan-success"),setTimeout((()=>{target.classList.remove("scan-success")}),1e3))}generateSessionId(){return"scan_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}async processFileUpload(file){return new Promise(((resolve,reject)=>{const reader=new FileReader;reader.onload=async e=>{try{const img=new Image;img.onload=async()=>{if(this.canvas.width=img.width,this.canvas.height=img.height,this.context.drawImage(img,0,0),this.hasBarcodeDetector)try{const detector=new BarcodeDetector({formats:["qr_code","ean_13","ean_8","upc_a","upc_e"]}),barcodes=await detector.detect(this.canvas);if(barcodes.length>0){const result=await this.processScanResult(barcodes[0].rawValue,barcodes[0].format);resolve(result)}else reject(new Error("No barcode found in image"))}catch(error){reject(error)}else reject(new Error("Barcode detection not supported"))},img.src=e.target.result}catch(error){reject(error)}},reader.onerror=()=>reject(new Error("Failed to read file")),reader.readAsDataURL(file)}))}async processManualEntry(barcodeData){let scanType=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"auto";try{this.updateStatus("Processing manual entry...");const result=await this.sendScanToServer(barcodeData,scanType);return result.success?(this.updateStatus("Manual entry successful!"),this.options.resultCallback&&this.options.resultCallback(result)):this.handleScanError(result),result}catch(error){throw this.handleError("manual_entry_failed",error.message),error}}destroy(){this.stopScanning(),this.video&&this.video.parentNode&&this.video.parentNode.removeChild(this.video),this.canvas&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas),this.overlay&&this.overlay.parentNode&&this.overlay.parentNode.removeChild(this.overlay)}}_exports.default=UniversalScanner;return _exports.init=function(){let options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new UniversalScanner(options)},_exports.default}));

//# sourceMappingURL=universal-scanner.min.js.map